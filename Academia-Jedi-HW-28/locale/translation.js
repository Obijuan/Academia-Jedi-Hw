// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Comb');
gettext('Const');
gettext('Varios');
gettext('Codificadores');
gettext('Decodificadores');
gettext('Demux');
gettext('Mux');
gettext('Puertas');
gettext('Tablas');
gettext('cod-2-1');
gettext('Codificador de 2 a 1. La salida zero se activa cuando ninguna entrada está activada');
gettext('cod-4-1');
gettext('Codificador de 4 a 1, con prioridad. La salida zero se activa cuando ninguna entrada está activad');
gettext('7Seg');
gettext('decod-1-2');
gettext('Decodificador de 1 a 2');
gettext('decod-2-4');
gettext('Decodificador de 2 a 4');
gettext('decod-3-8');
gettext('Decodificador de 3 a 8');
gettext('Anodo-comun');
gettext('Catodo-comun');
gettext('displayBit');
gettext('DisplayBit. Decodificador de 1 bit a 7 segmentos. Ánodo común');
gettext('displayBit2');
gettext('DisplayBit2. Decodificador de 2 bits a 7 segmentos. Ánodo común');
gettext('displayBit3');
gettext('DisplayBit3. Decodificador de 3 bits a 7 segmentos. Ánodo común');
gettext('displayDEC');
gettext('DisplayDEC. Decodificador BCD a 7 segmentos. Ánodo común');
gettext('displayHEX');
gettext('DisplayHEX. Decodificador de binario a hexadecimal-7 segmentos. Ánodo común');
gettext('displayBit');
gettext('DisplayBit. Decodificador de 1 bit a 7 segmentos. Cátodo común');
gettext('displayBit2');
gettext('DisplayBit2. Decodificador de 2 bits a 7 segmentos. Cátodo común');
gettext('displayBit3');
gettext('DisplayBit3. Decodificador de 3 bits a 7 segmentos. Cátodo común');
gettext('displayDEC');
gettext('DisplayDEC. Decodificador BCD a 7 segmentos. Cátodo común');
gettext('displayHEX');
gettext('DisplayHEX. Decodificador de binario a hexadecimal-7 segmentos. Cátodo común');
gettext('1-Bit');
gettext('Demux-1-2');
gettext('Demultiplexor de 1 bit, de 1 a 2');
gettext('Demux-2-4');
gettext('Demultiplexor de 1 bit, de 2 a 4');
gettext('1-Bit');
gettext('2-Bits');
gettext('24-Bits');
gettext('3-Bits');
gettext('4-Bits');
gettext('5-Bits');
gettext('7-Bit');
gettext('8-Bit');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1');
gettext('Mux-2-1');
gettext('Mux-4-1-flip');
gettext('Multiplexor de 4 a 1. Implementado en verilog');
gettext('Mux-4-1');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1 de 2 bits');
gettext('Mux-2-1');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 2 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 24 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 3 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 4 bits');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 4 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 5 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 7 bits');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1 de 8 bits');
gettext('Mux-2-1');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 8 bits');
gettext('and');
gettext('Puerta AND');
gettext('and3');
gettext('Puerta AND de 3 entradas');
gettext('nand');
gettext('Puerta NAND');
gettext('nor');
gettext('Puerta NOR');
gettext('not');
gettext('Puerta NOT');
gettext('or');
gettext('Puerta OR');
gettext('xnor');
gettext('Puerta XNOR');
gettext('xor');
gettext('Puerta XOR');
gettext('tablas_bin');
gettext('tablas_hex');
gettext('1bit_entrada');
gettext('2bit_entrada');
gettext('3bit_entrada');
gettext('4bit_entrada');
gettext('5bit_entrada');
gettext('6bit_entrada');
gettext('7bit_entrada');
gettext('8bit_entrada');
gettext('tabla-bin-1-1');
gettext('Circuito combinacional de 1 entradas y 1 salidas');
gettext('tabla-bin-1-2');
gettext('Circuito combinacional de 1 entradas y 2 salidas');
gettext('tabla-bin-1-3');
gettext('Circuito combinacional de 1 entradas y 3 salidas');
gettext('tabla-bin-1-4');
gettext('Circuito combinacional de 1 entradas y 4 salidas');
gettext('tabla-bin-1-5');
gettext('Circuito combinacional de 1 entradas y 5 salidas');
gettext('tabla-bin-1-6');
gettext('Circuito combinacional de 1 entradas y 6 salidas');
gettext('tabla-bin-1-7');
gettext('Circuito combinacional de 1 entradas y 7 salidas');
gettext('tabla-bin-1-8');
gettext('Circuito combinacional de 1 entradas y 8 salidas');
gettext('tabla-bin-2-1');
gettext('Circuito combinacional de 2 entradas y 1 salidas');
gettext('tabla-bin-2-2');
gettext('Circuito combinacional de 2 entradas y 2 salidas');
gettext('tabla-bin-2-3');
gettext('Circuito combinacional de 2 entradas y 3 salidas');
gettext('tabla-bin-2-4');
gettext('Circuito combinacional de 2 entradas y 4 salidas');
gettext('tabla-bin-2-5');
gettext('Circuito combinacional de 2 entradas y 5 salidas');
gettext('tabla-bin-2-6');
gettext('Circuito combinacional de 2 entradas y 6 salidas');
gettext('tabla-bin-2-7');
gettext('Circuito combinacional de 2 entradas y 7 salidas');
gettext('tabla-bin-2-8');
gettext('Circuito combinacional de 2 entradas y 8 salidas');
gettext('tabla-bin-3-1');
gettext('Circuito combinacional de 3 entradas y 1 salidas');
gettext('tabla-bin-3-2');
gettext('Circuito combinacional de 3 entradas y 2 salidas');
gettext('tabla-bin-3-3');
gettext('Circuito combinacional de 3 entradas y 3 salidas');
gettext('tabla-bin-3-4');
gettext('Circuito combinacional de 3 entradas y 4 salidas');
gettext('tabla-bin-3-5');
gettext('Circuito combinacional de 3 entradas y 5 salidas');
gettext('tabla-bin-3-6');
gettext('Circuito combinacional de 3 entradas y 6 salidas');
gettext('tabla-bin-3-7');
gettext('Circuito combinacional de 3 entradas y 7 salidas');
gettext('tabla-bin-3-8');
gettext('Circuito combinacional de 3 entradas y 8 salidas');
gettext('tabla-bin-4-1');
gettext('Circuito combinacional de 4 entradas y 1 salidas');
gettext('tabla-bin-4-2');
gettext('Circuito combinacional de 4 entradas y 2 salidas');
gettext('tabla-bin-4-3');
gettext('Circuito combinacional de 4 entradas y 3 salidas');
gettext('tabla-bin-4-4');
gettext('Circuito combinacional de 4 entradas y 4 salidas');
gettext('tabla-bin-4-5');
gettext('Circuito combinacional de 4 entradas y 5 salidas');
gettext('tabla-bin-4-6');
gettext('Circuito combinacional de 4 entradas y 6 salidas');
gettext('tabla-bin-4-7');
gettext('Circuito combinacional de 4 entradas y 7 salidas');
gettext('tabla-bin-4-8');
gettext('Circuito combinacional de 4 entradas y 8 salidas');
gettext('tabla-bin-5-1');
gettext('Circuito combinacional de 5 entradas y 1 salidas');
gettext('tabla-bin-5-2');
gettext('Circuito combinacional de 5 entradas y 2 salidas');
gettext('tabla-bin-5-3');
gettext('Circuito combinacional de 5 entradas y 3 salidas');
gettext('tabla-bin-5-4');
gettext('Circuito combinacional de 5 entradas y 4 salidas');
gettext('tabla-bin-5-5');
gettext('Circuito combinacional de 5 entradas y 5 salidas');
gettext('tabla-bin-5-6');
gettext('Circuito combinacional de 5 entradas y 6 salidas');
gettext('tabla-bin-5-7');
gettext('Circuito combinacional de 5 entradas y 7 salidas');
gettext('tabla-bin-5-8');
gettext('Circuito combinacional de 5 entradas y 8 salidas');
gettext('tabla-bin-6-1');
gettext('Circuito combinacional de 6 entradas y 1 salidas');
gettext('tabla-bin-6-2');
gettext('Circuito combinacional de 6 entradas y 2 salidas');
gettext('tabla-bin-6-3');
gettext('Circuito combinacional de 6 entradas y 3 salidas');
gettext('tabla-bin-6-4');
gettext('Circuito combinacional de 6 entradas y 4 salidas');
gettext('tabla-bin-6-5');
gettext('Circuito combinacional de 6 entradas y 5 salidas');
gettext('tabla-bin-6-6');
gettext('Circuito combinacional de 6 entradas y 6 salidas');
gettext('tabla-bin-6-7');
gettext('Circuito combinacional de 6 entradas y 7 salidas');
gettext('tabla-bin-6-8');
gettext('Circuito combinacional de 6 entradas y 8 salidas');
gettext('tabla-bin-7-1');
gettext('Circuito combinacional de 7 entradas y 1 salidas');
gettext('tabla-bin-7-2');
gettext('Circuito combinacional de 7 entradas y 2 salidas');
gettext('tabla-bin-7-3');
gettext('Circuito combinacional de 7 entradas y 3 salidas');
gettext('tabla-bin-7-4');
gettext('Circuito combinacional de 7 entradas y 4 salidas');
gettext('tabla-bin-7-5');
gettext('Circuito combinacional de 7 entradas y 5 salidas');
gettext('tabla-bin-7-6');
gettext('Circuito combinacional de 7 entradas y 6 salidas');
gettext('tabla-bin-7-7');
gettext('Circuito combinacional de 7 entradas y 7 salidas');
gettext('tabla-bin-7-8');
gettext('Circuito combinacional de 7 entradas y 8 salidas');
gettext('tabla-bin-8-1');
gettext('Circuito combinacional de 8 entradas y 1 salidas');
gettext('tabla-bin-8-2');
gettext('Circuito combinacional de 8 entradas y 2 salidas');
gettext('tabla-bin-8-3');
gettext('Circuito combinacional de 8 entradas y 3 salidas');
gettext('tabla-bin-8-4');
gettext('Circuito combinacional de 8 entradas y 4 salidas');
gettext('tabla-bin-8-5');
gettext('Circuito combinacional de 8 entradas y 5 salidas');
gettext('tabla-bin-8-6');
gettext('Circuito combinacional de 8 entradas y 6 salidas');
gettext('tabla-bin-8-7');
gettext('Circuito combinacional de 8 entradas y 7 salidas');
gettext('tabla-bin-8-8');
gettext('Circuito combinacional de 8 entradas y 8 salidas');
gettext('1bit_entrada');
gettext('2bit_entrada');
gettext('3bit_entrada');
gettext('4bit_entrada');
gettext('5bit_entrada');
gettext('6bit_entrada');
gettext('7bit_entrada');
gettext('8bit_entrada');
gettext('tabla-hex-1-1');
gettext('tabla-hex-1-2');
gettext('tabla-hex-1-3');
gettext('tabla-hex-1-4');
gettext('tabla-hex-1-5');
gettext('tabla-hex-1-6');
gettext('tabla-hex-1-7');
gettext('tabla-hex-1-8');
gettext('tabla-hex-2-1');
gettext('tabla-hex-2-2');
gettext('tabla-hex-2-3');
gettext('tabla-hex-2-4');
gettext('tabla-hex-2-5');
gettext('tabla-hex-2-6');
gettext('tabla-hex-2-7');
gettext('tabla-hex-2-8');
gettext('tabla-hex-3-1');
gettext('tabla-hex-3-2');
gettext('tabla-hex-3-3');
gettext('tabla-hex-3-4');
gettext('tabla-hex-3-5');
gettext('tabla-hex-3-6');
gettext('tabla-hex-3-7');
gettext('tabla-hex-3-8');
gettext('tabla-hex-4-1');
gettext('tabla-hex-4-2');
gettext('tabla-hex-4-3');
gettext('tabla-hex-4-4');
gettext('tabla-hex-4-5');
gettext('tabla-hex-4-6');
gettext('tabla-hex-4-7');
gettext('tabla-hex-4-8');
gettext('tabla-hex-5-1');
gettext('tabla-hex-5-2');
gettext('tabla-hex-5-3');
gettext('tabla-hex-5-4');
gettext('tabla-hex-5-5');
gettext('tabla-hex-5-6');
gettext('tabla-hex-5-7');
gettext('tabla-hex-5-8');
gettext('tabla-hex-6-1');
gettext('tabla-hex-6-2');
gettext('tabla-hex-6-3');
gettext('tabla-hex-6-4');
gettext('tabla-hex-6-5');
gettext('tabla-hex-6-6');
gettext('tabla-hex-6-7');
gettext('tabla-hex-6-8');
gettext('tabla-hex-7-1');
gettext('tabla-hex-7-2');
gettext('tabla-hex-7-3');
gettext('tabla-hex-7-4');
gettext('tabla-hex-7-5');
gettext('tabla-hex-7-6');
gettext('tabla-hex-7-7');
gettext('tabla-hex-7-8');
gettext('tabla-hex-8-1');
gettext('tabla-hex-8-2');
gettext('tabla-hex-8-3');
gettext('tabla-hex-8-4');
gettext('tabla-hex-8-5');
gettext('tabla-hex-8-6');
gettext('tabla-hex-8-7');
gettext('tabla-hex-8-8');
gettext('7Seg');
gettext('Bits');
gettext('Bus');
gettext('Anodo_comun');
gettext('Catodo_comun');
gettext('Digitos');
gettext('Letras');
gettext('Digitos');
gettext('Letras');
gettext('0');
gettext('Constante de  7 bits para mostrar el dígito 0 en un display de 7 segmentos. Ánodo común');
gettext('Valor genérico constante, de 7 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 0 | 0 | 0 | 0 | 1 |');
gettext('1');
gettext('Constante de  7 bits para mostrar el dígito 1 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 1 | 1 | 1 | 1 |');
gettext('2');
gettext('Constante de  7 bits para mostrar el dígito 2 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 1 | 0 | 0 | 1 | 0 |');
gettext('3');
gettext('Constante de  7 bits para mostrar el dígito 3 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 0 | 1 | 1 | 0 |');
gettext('4');
gettext('Constante de  7 bits para mostrar el dígito 4 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 1 | 1 | 0 | 0 |');
gettext('5');
gettext('Constante de  7 bits para mostrar el dígito 5 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 0 | 0 | 1 | 0 | 0 |');
gettext('6');
gettext('Constante de  7 bits para mostrar el dígito 6 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 0 | 0 | 0 | 0 | 0 |');
gettext('7');
gettext('Constante de  7 bits para mostrar el dígito 7 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 1 | 1 | 1 | 1 |');
gettext('8');
gettext('Constante de  7 bits para mostrar el dígito 8 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 |  0| 0 | 0 | 0 | 0 |');
gettext('9');
gettext('Constante de  7 bits para mostrar el dígito 9 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 |  0| 0 | 1 | 0 | 0 |');
gettext('A');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal A en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 |  0| 1 | 0 | 0 | 0 |');
gettext('B');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal B en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  0| 0 | 0 | 0 | 0 |');
gettext('C');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal C en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 0 | 0 | 0 | 1 |');
gettext('D');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal D en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 0 | 0 | 1 | 0 |');
gettext('E');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal E en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 0 | 0 | 0 | 0 |');
gettext('F');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal F en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 1 | 0 | 0 | 0 |');
gettext('G');
gettext('Constante de  7 bits para mostrar la letral G en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 0 | 0 | 1 | 0 | 0 |');
gettext('H');
gettext('Constante de  7 bits para mostrar la letra H en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 | 0 | 1 | 0 | 0 | 0 |');
gettext('I');
gettext('Constante de  7 bits para mostrar la letra I en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 | 1 | 1 | 0 | 0 | 1 |');
gettext('J');
gettext('Constante de  7 bits para mostrar la letra J en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 0 | 0 | 1 | 1 |');
gettext('L');
gettext('Constante de  7 bits para mostrar la letra L en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 0 | 0 | 0 | 1 |');
gettext('N');
gettext('Constante de  7 bits para mostrar la letra N en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 0 | 1 | 0 | 1 | 0 |');
gettext('NN');
gettext('Constante de  7 bits para mostrar la letra ñ en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 0 | 1 | 0 | 1 | 0 |');
gettext('O');
gettext('Constante de  7 bits para mostrar la letra O en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 0 | 0 | 0 | 1 |');
gettext('P');
gettext('Constante de  7 bits para mostrar la letra P en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 1 | 1 | 0 | 0 | 0 |');
gettext('Q');
gettext('Constante de  7 bits para mostrar la letra Q en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 1 | 1 | 0 | 0 |');
gettext('R');
gettext('Constante de  7 bits para mostrar la letra R en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 1 | 0 | 1 | 0 |');
gettext('S');
gettext('Constante de  7 bits para mostrar la letra S en un display de 7 segmentos. Ánodo común');
gettext('U');
gettext('Constante de  7 bits para mostrar la letra U en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 0 | 0 | 0 | 1 |');
gettext('Y');
gettext('Constante de  7 bits para mostrar la letra Y en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 0 | 1 | 0 | 0 |');
gettext('Digitos');
gettext('Letras');
gettext('0');
gettext('Constante de  7 bits para mostrar el dígito 0 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 1 | 1 | 0 |');
gettext('1');
gettext('Constante de  7 bits para mostrar el dígito 1 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 0 | 0 | 0 | 0 |');
gettext('2');
gettext('Constante de  7 bits para mostrar el dígito 2 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  0| 1 | 1 | 0 | 1 |');
gettext('3');
gettext('Constante de  7 bits para mostrar el dígito 3 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 0 | 0 | 1 |');
gettext('4');
gettext('Constante de  7 bits para mostrar el dígito 4 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 0 | 0 | 1 | 1 |');
gettext('5');
gettext('Constante de  7 bits para mostrar el dígito 5 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  1| 1 | 0 | 1 | 1 |');
gettext('6');
gettext('Constante de  7 bits para mostrar el dígito 6 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  1| 1 | 1 | 1 | 1 |');
gettext('7');
gettext('Constante de  7 bits para mostrar el dígito 7 en un display de 7 segmentos');
gettext('8');
gettext('Constante de  7 bits para mostrar el dígito 8 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 1 | 1 | 1 |');
gettext('9');
gettext('Constante de  7 bits para mostrar el dígito 9 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 0 | 1 | 1 |');
gettext('A');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal A en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 0 | 1 | 1 | 1 |');
gettext('B');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal B en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 |  1| 1 | 1 | 1 | 1 |');
gettext('C');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal C en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 1 | 1 | 1 | 0 |');
gettext('D');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal D en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 1 | 1 | 0 | 1 |');
gettext('E');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal E en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 1 | 1 | 1 | 1 |');
gettext('F');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal F en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 0 | 1 | 1 | 1 |');
gettext('G');
gettext('Constante de  7 bits para mostrar la letral G en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 | 1 | 1 | 0 | 1 | 1 |');
gettext('H');
gettext('Constante de  7 bits para mostrar la letra H en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 | 1 | 0 | 1 | 1 | 1 |');
gettext('I');
gettext('Constante de  7 bits para mostrar la letra I en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 0 | 0 | 1 | 1 | 0 |');
gettext('J');
gettext('Constante de  7 bits para mostrar la letra J en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 1 | 1 | 1 | 0 | 0 |');
gettext('L');
gettext('Constante de  7 bits para mostrar la letra L en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 1 | 1 | 1 | 0 |');
gettext('N');
gettext('Constante de  7 bits para mostrar la letra N en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 1 | 0 | 1 | 0 | 1 |');
gettext('NN');
gettext('Constante de  7 bits para mostrar la letra ñ en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 1 | 0 | 1 | 0 | 1 |');
gettext('O');
gettext('Constante de  7 bits para mostrar la letra O en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 1 | 1 | 1 | 0 |');
gettext('P');
gettext('Constante de  7 bits para mostrar la letra P en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 0 | 0 | 1 | 1 | 1 |');
gettext('Q');
gettext('Constante de  7 bits para mostrar la letra Q en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 0 | 0 | 1 | 1 |');
gettext('R');
gettext('Constante de  7 bits para mostrar la letra R en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 0 | 1 | 0 | 1 |');
gettext('S');
gettext('Constante de  7 bits para mostrar la letra S en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 1 | 1 | 0 | 1 | 1 |');
gettext('U');
gettext('Constante de  7 bits para mostrar la letra U en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 1 | 1 | 1 | 1 | 0 |');
gettext('Y');
gettext('Constante de  7 bits para mostrar la letra Y en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 1 | 1 | 0 | 1 | 1 |');
gettext('0');
gettext('1');
gettext('2');
gettext('3');
gettext('4');
gettext('5');
gettext('6');
gettext('7');
gettext('8');
gettext('9');
gettext('A');
gettext('B');
gettext('C');
gettext('D');
gettext('E');
gettext('F');
gettext('G');
gettext('H');
gettext('I');
gettext('J');
gettext('L');
gettext('N');
gettext('NN');
gettext('O');
gettext('P');
gettext('Q');
gettext('R');
gettext('S');
gettext('U');
gettext('Y');
gettext('0');
gettext('Un bit constante a 0');
gettext('1');
gettext('Un bit constante a 1');
gettext('01_bits');
gettext('02_bits');
gettext('04_bits');
gettext('05_bits');
gettext('07_bits');
gettext('08_bits');
gettext('Generico');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Generico');
gettext('Valor genérico constante, de 2 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_0');
gettext('Valor constante 0 para bus de 2 bits');
gettext('Valor_1');
gettext('Valor constante 1 para bus de 2 bits');
gettext('Valor_2');
gettext('Valor constante 2 para bus de 2 bits');
gettext('Valor_3');
gettext('Valor constante 3 para bus de 2 bits');
gettext('Generico');
gettext('Valor genérico constante, de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_00');
gettext('Valor constante 0 para bus de 4 bits');
gettext('Valor_05');
gettext('Valor constante 5 para bus de 4 bits');
gettext('Valor_10');
gettext('Valor constante 10 para bus de 4 bits');
gettext('Valor_15');
gettext('Valor constante 15 para bus de 4 bits');
gettext('Generico');
gettext('Valor genérico constante, de 5 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Generico');
gettext('Generico');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_000');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Valor_085');
gettext('Valor constante 85 (55h) para bus de 8 bits');
gettext('Valor_170');
gettext('Valor constante 170 (AAh) para bus de 8 bits');
gettext('Valor_255');
gettext('Valor constante 255 para bus de 8 bits');
gettext('Accesorios');
gettext('Biestables');
gettext('Bombeo');
gettext('Bus');
gettext('Contadores');
gettext('Flancos');
gettext('IR');
gettext('Motor');
gettext('Pegatinas');
gettext('Pulsador');
gettext('Recreo');
gettext('Retardo');
gettext('Servos');
gettext('Timers');
gettext('icebot');
gettext('CircuitScramble');
gettext('Baliza-1');
gettext('Baliza luminosa de 1 led. Parpadea a 2Hz cuando se activa');
gettext('Bombear 2 bits por segundo');
gettext('Corazon genérico para bombear bits a la frecuencia fijada en Hz (por defecto 1Hz)');
gettext('**Baliza luminosa**\n\nParpadeo del LED a 2Hz');
gettext('Creado a partir de un **corazón  \ngenérico**, dando el valor adecuado  \na su parámetro frecuencia');
gettext('Baliza-2');
gettext('Baliza luminosa de 2 leds. Parpadean alternativamente a 2Hz cuando se activa');
gettext('**Baliza luminosa**\n\nParpadeo de los LEDs alternativamente a 2Hz, cuando están habilitados ');
gettext('Init-tic');
gettext('Emitir un tic inicial al arrancar, y nunca más');
gettext('Sirena');
gettext('Cuando se activa su entrada (por nivel) suena la sirena');
gettext('Bombear 1000 bits por segundo');
gettext('Bombear 4 bits por segundo');
gettext('Bombear 2000 bits por segundo');
gettext('**Sirena acústica**\n\nSe alternan pitidos de 1Khz y 2Khz a la frecuencia de 4Hz');
gettext('Cuando esta señal se pone a 1  \nempieza a sonar la sirena');
gettext('Conectar la salida  \ndirectamente a un  \nzumbador');
gettext('Button-off');
gettext('Pulsador de cambio con icono de Circuit Scramble. Cada vez que se aprieta cambia de estado');
gettext('Valor inicial del pulsador\n');
gettext('and');
gettext('system');
gettext('Cambio');
gettext('Biestable de cambio (Tipo T). Cuando se recibe un tic cambia de estado');
gettext('Dato');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('Set-Reset');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('Dato');
gettext('Fijos');
gettext('Tics');
gettext('Corazon_Hz');
gettext('Corazon_Seg');
gettext('Bombear 1 bit con el periodo especificado en el parámetro. Por defecto el periodo es de 1 segundos');
gettext('Corazon_10Hz');
gettext('Bombear 10 bits por segundo');
gettext('Corazon_1Hz');
gettext('Bombear 1 bit por segundo');
gettext('Corazon_1KHz');
gettext('Corazon_2Hz');
gettext('Corazon_2KHz');
gettext('Corazon_3Hz');
gettext('Bombear 3 bits por segundo');
gettext('Corazon_4Hz');
gettext('Corazon_5Hz');
gettext('Bombear 5 bits por segundo');
gettext('Corazon_7Hz');
gettext('Bombear 7 bits por segundo');
gettext('Corazon_DO4');
gettext('Bombear bits a la frecuencia del DO de la cuarta octava');
gettext('Corazon_MI4');
gettext('Bombear bits a la frecuencia del MI de la cuarta octava');
gettext('Corazon_RE4');
gettext('Bombear bits a la frecuencia del RE de la cuarta octava');
gettext('Fijos');
gettext('Heart-Hz');
gettext('Corazón de bombeo de tics a un frecuencia parametrica en Hz');
gettext('Heart-Sec-ena');
gettext('Corazón de bombeo de tics con periodo paramétrico de segundos y entrada de enable');
gettext('Heart-Sec');
gettext('Corazón de bombeo de tics a con periodo paramétrico de segundos');
gettext('Heart-ms-ena');
gettext('Corazón de bombeo de tics con periodo paramétrico de milisegundos y entrada de enable');
gettext('Heart-ms');
gettext('Corazón de bombeo de tics a con periodo paramétrico de milisegundos');
gettext('Heart-tics-ena');
gettext('Corazón de bombeo de tics, cuyo periodo está especificado en tics también');
gettext('Heart-tics-num');
gettext('Corazón  finito de tics. Emitir num tics cuando se recibe un tic de start');
gettext('Contador módulo M, ascendente, de 5 bits, con reset ');
gettext('**Parámetro**: Módulo del contador');
gettext('Heart-tics');
gettext('Heart-us-ena');
gettext('Corazón de bombeo de tics, cuyo periodo está especificado en micro-segundos. Solo se hace el bombeo cuando está habilitado');
gettext('Heart-us');
gettext('Corazón de bombeo de tics a con periodo paramétrico de microsegundos');
gettext('Heart-1Hz');
gettext('Corazón de bombeo de tics a la frecuencia de 1Hz');
gettext('02_bits');
gettext('03_bits');
gettext('04_bits');
gettext('08_bits');
gettext('Agregador');
gettext('Agregador de 2 cables en un bus de 2-bits');
gettext('Separador');
gettext('Separador de bus de 2-bits en dos cables');
gettext('Agregador');
gettext('Agregador de 3 cables en un bus de 3-bits');
gettext('Separador');
gettext('Separador de bus de 3-bits');
gettext('Agregador');
gettext('Agregador de buses de 2-bits a bus de 4-bits');
gettext('Agregador4');
gettext('Agregador de 4 cables en un bus de 4-bits');
gettext('Separador');
gettext('Separador de bus de 4-bits en buses de 2 bits');
gettext('Separador4');
gettext('Separador de bus de 4-bits en 4 cables');
gettext('Agregador');
gettext('Agregador de 2 buses de 4-bits a bus de 8-bits');
gettext('Separador');
gettext('Separador de bus de 8-bits en buses de 4 bits');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('cont-up-system');
gettext('Contador del sistema, módulo M, ascendente, de 2 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 2 bits, con reset ');
gettext('cont-up-system');
gettext('Contador del sistema, módulo M, ascendente, de 3 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 3 bits, con reset ');
gettext('cont-up-system');
gettext('Contador del sistema, módulo M, ascendente, de 4 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 4 bits, con reset ');
gettext('cont-up');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 6 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 7 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 8 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 9 bits, con reset ');
gettext('Bajada');
gettext('Detector de flanco de bajada. Emite un tic cuando detecta un flanco descendente');
gettext('Subida');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('IR-tic');
gettext('Detección de objeto con sensor de infrarrojos (IR). Emite un tic cada vez detecta un objeto');
gettext('**IRr-tic**');
gettext('SM-S4303R');
gettext('MotorBit');
gettext('Controlador para servo de rotacion continua SprintRC SM-S4303R. Con on=1, el motor avanza. Dir=1 sentido agujas reloj/ 0 el contrario. V1 y V2 son los pulsos para las velocidades horaria y antihoraria (en micro-sec). V0 para que esté parado');
gettext('Mux 2:1. Bus de 7 bits. ');
gettext('Mux 2:1. Bus de 4 bits. ');
gettext('Agregador de 4 cables a bus de 4bits');
gettext('Separador de bus de 4bits en 4 cables (1 + 1 + 1 + 1)');
gettext('Multiplexor 2:1 de 1-bit');
gettext('NAND logic gate');
gettext('Transistor');
gettext('Transistor cmos hecho a partir de semiconductores');
gettext('Cristal de Siicio');
gettext('Atomos de silicio');
gettext('Separador de bus de 8bits en 2 (4 + 4)');
gettext('Agregador de 2 buses de 4 a bus de 8bits');
gettext('Controlador PWM para posicionar servos de 20ms. Las unidades de pos son de 10usec');
gettext('**Velocidad 1**: Velocidad para el  \nsentido de giro horario\n');
gettext('**Velocidad 2**: Velocidad para el \nsentido de giro antirhorario');
gettext('**Entrada on/off**: Motor en  \nmovimiento o parado');
gettext('**Motorbit paramétrico** para los **SM-S4303R** o compatibles\n\nTiene 3 parámetros, especificados en micro-segundos. **V1** y **V2** son las posiciones (ancho del pulso)  \npara las velocidades de giro en sentido horario y antihorario respectivamente\n\n**V0** es la posición en la que el servo está parado (velocidad 0)\n\nPor defecto se asignan los valores para las velocidades máximas, tanto en sentido horario como antihorario\n\n* V1max = 1900\n* V2max = 1100\n* V0 = 1500');
gettext('**Velocidad en sentido horario**\n\n* Si V1 >= 1900, la velocidad es máxima\n* Si 1900 > V1 > 1500, la velocidad estará  \nentre la máxima y 0');
gettext('**Velocidad en sentido antihorario**\n\n* Si V2 <= 1100, la velocidad es máxima\n* Si 1100 < V2 < 1500, la velocidad estará  \nentre la máxima y 0');
gettext('**dir**: Sentido de giro  \n1: horario / 0: antihorario');
gettext('**Velocidad 0**: Posición para que  \nel servo esté parado');
gettext('Mux 2:1 with logic gates');
gettext('Entrada 1');
gettext('Entrada 0');
gettext('Selección');
gettext('Implementación en Verilog');
gettext('Las puertas están construidas a\npartir de transistores');
gettext('Pincha en algún transistor para\nbajar de nivel');
gettext('Nivel 3: Semiconductores');
gettext('Los transistores se crean a \npartir de uniones entre \nsemiconductores, de tipo P y N\nEstán integrados en los dados de\nsilicio en los circuitos integrados');
gettext('Pincha en el bloque para bajar de nivel');
gettext('Nivel 2: MATERIALES');
gettext('Cristal de silicio');
gettext('Los semiconductores se crean a partir de cristales\nde Silicio (Si) que se dopans con impurezas\npara darle las propiedades de semiconductores');
gettext('Pincha en los bloques para bajar de nivel');
gettext('Átomos de Silicio');
gettext('Nivel 1: ATOMOS');
gettext('Los cristales de silicio se forman a \npartir del enlace covalente entre los\nátomos de silicio. Cada uno de ellos \nestá rodeado por 4 átomos de silicio\nformando un tetraedro');
gettext('<B>Posicion del servo</B>\n\nSe especifica en unidades de 10micro-segundos\nEj. pos = 100 --> Pulso de achura 1ms');
gettext('<B>Generación de una señal PWM para posicionamiento de Servos</B>\nEl periodo es de 20ms\nEl ancho del pulso varía entre 0 - 255 (0 - 2.5ms)');
gettext('Academia-Jedi');
gettext('Emojis');
gettext('00-Pre');
gettext('01-Primero');
gettext('02-Segundo');
gettext('03-Tercero');
gettext('00-Observador');
gettext('Rango de Observador. Pre-academia Jedi');
gettext('01-Aspirante-a-Cadete');
gettext('Rango de Aspirante a Cadete. Pre-academia Jedi');
gettext('02-Cadete');
gettext('Rango de Cadete. Primer curso');
gettext('03-Cadete-N1');
gettext('Rango de Cadete Nivel 1. Primer curso');
gettext('04-Cadete-N2');
gettext('Rango de Cadete Nivel 2. Primer curso');
gettext('05-Cadete-N3');
gettext('Rango de Cadete Nivel 3. Primer curso');
gettext('06-Aspirante-Padawan');
gettext('Rango de Aspirante a Padawan. Primer curso');
gettext('07-Aspirante-Padawan-N1');
gettext('Rango de Aspirante a Padawan Nivel 1. Primer curso');
gettext('08-Aspirante-Padawan-N2');
gettext('Rango de Aspirante a Padawan Nivel 2. Primer curso');
gettext('09-Aspirante-Padawan-N3');
gettext('Rango de Aspirante a Padawan Nivel 3. Primer curso');
gettext('10-Padawan');
gettext('Rango de Padawan. Segundo curso');
gettext('11-Padawan-N1');
gettext('Rango de Padawan Nivel 1. Segundo curso');
gettext('12-Padawan-N2');
gettext('Rango de Padawan Nivel 2. Segundo curso');
gettext('13-Padawan-N3');
gettext('Rango de Padawan Nivel 3. Segundo curso');
gettext('14-Aspirante-Jedi');
gettext('Rango de Aspirante a Jedi. Segundo curso');
gettext('15-Aspirante-Jedi-N1');
gettext('Rango de Aspirante a Jedi Nivel 1. Segundo curso');
gettext('16-Aspirante-Jedi-N2');
gettext('Rango de Aspirante a Jedi Nivel 2. Segundo curso');
gettext('17-Aspirante-Jedi-N3');
gettext('Rango de Aspirante a Jedi Nivel 3. Segundo curso');
gettext('18-Jedi');
gettext('Rango de Jedi. Tercer curso');
gettext('19-Jedi-N1');
gettext('Rango de Jedi Nivel 1. Tercer curso');
gettext('20-Jedi-N2');
gettext('Rango de Jedi Nivel 2. Tercer curso');
gettext('21-Jedi-N3');
gettext('Rango de Jedi Nivel 3. Tercer curso');
gettext('Smiley');
gettext('Stickers de Smiley');
gettext('caca');
gettext('Caca sonriente');
gettext('like');
gettext('Like');
gettext('pulsador-cambio');
gettext('Pulsador de cambio. Cada vez que se aprieta cambia de estado');
gettext('pulsador-tic');
gettext('Detección de pulsación. Emite un tic cada vez que se aprieta el pulsador');
gettext('**Pulsador-tic**');
gettext('comecocos');
gettext('Bloque de prueba para explicar conceptos. No hace nada');
gettext('Bloque de documentación, para explicar los  \nconceptos de puertos, parámeros, pines, cables  \ny buses en el tutorial 21');
gettext('Tortuga-2');
gettext('Divisor entre dos');
gettext('Biestable T síncrono, inicializado a 0');
gettext('Biestable T síncrono, inicializado por parametro INI');
gettext('Biestable tipo D con entrada de enable, inicializado al parámetro INI');
gettext('Biestable D con inicialización paramétrica');
gettext('Generar un pulso de reloj al recibir un flanco por la entrada');
gettext('Biestable D inicializado a 0');
gettext('Delay flip-flop');
gettext('Tortuga: Divisor entre 2\n\nImplementado a partir de un\nbiestable T síncrono');
gettext('Hacer que solo responda a los flancos\nde subida de la señal de entrada');
gettext('Emax-ES08A');
gettext('Futaba-3003');
gettext('TowerPro-SG90');
gettext('ServoBit-90');
gettext('ServoBit para microservos EMAX ES08A. Controlador de 1 bit para mover el servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('ServoBit para microservos EMAX ES08A. Controlador de 1 bit para mover el servo a las 2 posiciones POS0 y POS1');
gettext('**Posición 1**: Posición del servo cuando  \nse introduce un 1\n\nEl valor por defecto es de 135 grados\n');
gettext('**Posición 0**: Posición del servo cuando  \nse introduce un 0\n\nEl valor por defecto es de 45 grados');
gettext('**Entrada**: posición a donde llevar  \nel servo (posición 0 ó 1)');
gettext('**Servobit paramétrico** para los microservos **EMAX-ES08A** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **580 usec**  \n* Extremo izquierdo **2550 usec**\n');
gettext('ServoBit');
gettext('Servobit-90');
gettext('ServoBit para Futaba 3003. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('ServoBit paramétrico para Futaba 3003. Controlador de 1 bit para mover el servo a las 2 posiciones P0 y P1');
gettext('**Servobit** para Servos Futaba 3003 o comaptibles\nLas dos posiciones están distanciadas **90 grados**  \n\n* **Posicion 0**: 45 grados  \n* **Posicion 1**: 135 grados  ');
gettext('**Servobit paramétrico** para los microservos **Futaba 3003** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **380 usec**  \n* Extremo izquierdo **2410 usec**\n');
gettext('Servobit');
gettext('Servobit-90');
gettext('ServoBit para micrservo TowerPro-SG90. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('**Servobit paramétrico** para los microservos **TowerPro SG-90** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **500 usec**  \n* Extremo izquierdo **2350 usec**\n');
gettext('Servobit');
gettext('timer-msec');
gettext('Temporizador en milisegundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('**Arranque del**  \n**temporizador**');
gettext('**Salida de pulso**');
gettext('**Salida de tic**');
gettext('**Parametro del timer**  \nmilisegundos a esperar');
gettext('timer-sec');
gettext('Temporizador en segundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('**Parametro del timer**  \nSegundos a esperar');
gettext('timer-system');
gettext('Temporizador en tics. La señal p está activa durante los tics indicados. ov se emite un tic al finalizar');
gettext('timer-usec');
gettext('Temporizador en microsegundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('**Parametro del timer**  \nmicroseundos a esperar');
gettext('Icemove4');
gettext('Icemove4: Controlador de 4 movimientos para el Icebot');
gettext('# ICEmove4\n\nControlador para el [robot Icebot](https://github.com/Obijuan/icebot/wiki), que genera **4 movimientos**:  \nParado, giro derecha (arco), giro izquierda (arco) y adelante');
gettext('**Código del movimiento**');
gettext('**Motor de la rueda derecha**');
gettext('**Motor de la rueda izquierda**');
gettext('## Tabla de movimientos\n\n| Código de entrada | Movimiento del Robot   |\n|-------------------|------------------------|\n|  0                |  Parado                |\n|  1                |  Giro derecha (arco)   |\n|  2                |  Giro izquierda (arco) |\n|  3                |  Adelante              |');
gettext('**Entrada de reloj**');
gettext('Icemove9');
gettext('Icemove9: Controlador de 9 movimientos para el Icebot');
gettext('# ICEmove9\n\nControlador de 9 movimientos para el robot Icebot  \n(Entrada de 4 bits)');
gettext('## Tabla de movimientos\n\n| Código de entrada | Movimiento del Robot   |\n|-------------------|------------------------|\n|  0, 1, 2, 3       |  Parado                |\n|  4,6              |  Arco derecha          |\n|  5,7              |  Arco izquierda-atrás  |\n|  8,9              |  Arco derecha-atrás    |\n|  10,11            |  Arco izquierda        |\n|  12               |  Giro derecha          |\n|  13               |  Atrás                 |\n|  14               |  Adelante              |\n|  15               |  Giro izquierda        |');
gettext('0-Soluciones-Tutorial-27');
gettext('1-Ejemplos');
gettext('2-Ejercicios');
gettext('Sol-27-1');
gettext('**Display DEC**');
gettext('**Contador**  \n**Unidades**');
gettext('**Contador**  \n**Decenas**');
gettext('**Contador**  \n**Centenas**');
gettext('**Selección del dígito**  \na mostrar en el display');
gettext('Emitir pitido al  \ndetectar brazo  \ndel spinner');
gettext('**Reset**');
gettext('**LED Testigo**');
gettext('Evento:\nBrazo detectado');
gettext('**Solución ejercicio 27.1:** (5 Bitpoints). Contador de vueltas de un spinner, de 0 a 999\n\nCrear un circuito capaz de contar las **vueltas de un spinner**. Debe tener **3 dígitos decimales**, por lo que  \ncontará desde **000** hasta **999**. Para detectar los brazos del spinner se usará **un sensor de infrarrojos IR**.  \nCada vez que uno de los brazos del spinner sea detectado por el IR se emitirá un **pitido de 10ms**  \nSe colocará un **display de 7 segmentos** para ver el dígito del contador seleccionado: unidades, decenas o  \ncentenas. Tendrá un **pulsador de reset** para iniciar la cuenta a cero');
gettext('**Mostrar en el**  \n**display el dígito**\n**seleccionado**');
gettext('**Detector de**  \n**vueltas**\n**Unidades**');
gettext('Evento:\nVuelta completada');
gettext('**IR de pulsos**');
gettext('[Vídeo en Youtube](https://www.youtube.com/watch?v=WpYWPK14Y6Q): ');
gettext('[![Click to see the youtube video](http://img.youtube.com/vi/WpYWPK14Y6Q/0.jpg)](https://www.youtube.com/watch?v=WpYWPK14Y6Q)');
gettext('Sol-27-2');
gettext('**Contador**  \n**Unidades de**\n**segundo**');
gettext('**Contador**  \n**decenas de**\n**segundo**');
gettext('**Display**  \n**decimal**');
gettext('**Mostrar en**  \n**binario**');
gettext('**Comparador**');
gettext('Evento: dígito  \ndecenas de segundo  \nes igual a 1');
gettext('Evento: dígito  \nunidades de segundo  \nes igual a 2');
gettext('Evento:  \nEl segundero  \nvale 12');
gettext('**Estado de**  \n**la alarma**');
gettext('0: No disparada  \n1: Disparada');
gettext('**Parar alarma**');
gettext('Evento: ha  \npasado 1 seg');
gettext('**Solución ejercicio 27.2:** (5 Bitpoints). Alarma despertador\n\nDiseñar un **reloj digital con alarma**, de manera que al alcanzar la hora indicada se **dispare la alarma**.  \nPara hacerlo fácil, el reloj sólo medirá **segundos**. Tednrá **2 dígitos**, por lo que sólo  \ncontará 1 minuto: de 00 a 59 segundos. La alarma se debe disparar cuando el **segundero es 12**, y una vez  \ndisparada seguirá sonando hasta que se apriete el **botón de paro**. Cuando reloj llega a 59, vuelve a empear desde  \n0, por lo que si la alarma estaba parada, volverá a sonar al llegar otra vez a 12 (es decir, que sonará cada  \nminuto). El reloj tendrá también un **botón de reset**, para llevar al sistema a su estado inicial. Para el  \nsonido de la alarma se puede usar cualquier pitido. También se puede usar el bloque **Sirena** de la colección.  \nColocar también un **LED** que se encenderá mientras las alarma suena  \n\n**Consejo**. Para disparar la alarma hay que comparar si los dígitos son 1 y 2. Utilizar tablas de verdad para  \nla implementación de estos circuitos comparadores');
gettext('El funcionamiento se muestra en este [Vídeo de Youtube]([Vídeo en Youtube]https://www.youtube.com/watch?v=b_HTQYukm5Q):\n\n[![Click to see the youtube video](http://img.youtube.com/vi/b_HTQYukm5Q/0.jpg)](https://www.youtube.com/watch?v=b_HTQYukm5Q)');
gettext('Sol-27-3');
gettext('**Solución ejercicio 27.3:** (5 Bitpoints). Mensajes de texto animados\n\nDiseñar un circuito digital para mostrar en un **display** de 7 segmentos **dos textos animados**,  \nque se muestran letra a letra. Mediante un **interruptor externo** se selecciona entre el  \n**mensaje 1** ó el **2**. Con otro **interruptor** se selecciona la **velocidad** a la que se muestran  \nlos caracteres: lenta o rápida');
gettext('El funcionamiento se muestra en este [Vídeo de Youtube](https://www.youtube.com/watch?v=Gt_qo6XPkbw):\n\n[![Click to see the youtube video](http://img.youtube.com/vi/Gt_qo6XPkbw/0.jpg)](https://www.youtube.com/watch?v=Gt_qo6XPkbw)');
gettext('Contador para  \nrecorrer las  \ntablas de caracteres');
gettext('**Tabla con mensaje 2**');
gettext('**Tabla con mensaje 1**');
gettext('Selección del  \nmensaje a mostrar');
gettext('Selección de la  \nvelocidad');
gettext('Velocidad  \nLenta');
gettext('Velocidad  \nRápida');
gettext('01-1-Pulsador-LED-on-off');
gettext('Evento:\nBotón pulsado');
gettext('Estado de la luz  \n0: Apagada  \n1: Encendida');
gettext('**Biestable de**  \n**cambio**');
gettext('## Ejemplo 1: Encendiendo y apagando con un pulsador\n\nUsamos un **único pulsador** para encender y apagar un **LED**. La primera vez  \nque se aprieta el LED se enciende. La segunda se apaga. El **biestable**  \n**de cambio** (T) está inicializado a 0. Si queremos que esté encendido  \nal principio, sólo hay que pasarle como parámetro el 1');
gettext('01-2-Pulsador-LED-on-off-ini-1');
gettext('**Biestable de  cambio**');
gettext('## Ejemplo 1-1: Encendiendo y apagando con un pulsador\n\nModificación del ejemplo 1 par que comience con el **LED encendido**.  \nSimplemente se pasa como parámetro al biestable T el valor inicial 1 ');
gettext('01-3-Pulsador-cambio-LED');
gettext('**Pulsador de cambio**  ');
gettext('## Ejemplo 1-3: Encendiendo y apagando con un pulsador\n\nEjemplo 1 modificado usando el **pulsador de cambio**: Incluye el pulsador de tics  \ny un biestable T todo en el mismo bloque, de manera que est más compacto');
gettext('01-4-Pulsador-cambio-LED-INI-1');
gettext('## Ejemplo 1-4: Encendiendo y apagando con un pulsador\n\nEjemplo 1 modificado usando el **pulsador de cambio**: Incluye el pulsador de tics  \ny un biestable T todo en el mismo bloque, de manera que es más compacto. El botón está  \ninicializado a 1, para que empiece \"pulsado\"');
gettext('02-1-Circuit-Scramble-Nivel-1');
gettext('**¡Nivel superado!** :smiley:');
gettext('## Ejemplo 2: Nivel 1 del circuito Scramble\n\nImplementación del **nivel 1 del circuito scramble** para jugar en físico. Cada cable tiene un **LED**, para saber su  \nestado: activado o desactivado. Se sabe que el nivel se ha superado si se enciende el último LED y el servo se activa');
gettext('![](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/raw/master/wiki/Tutorial-28/cs1.png)');
gettext('02-2-Circuit-Scramble-Nivel-1');
gettext('## Ejemplo 2-2: Nivel 1 del circuito Scramble\n\nMismo circuito del ejemplo 2 pero usando bloques co los iconos del circuit scramble :smiley:');
gettext('03-Divisor-frecuencia');
gettext('Parpadea a la mitad de frecuencia\n(Periodo de 500ms)');
gettext('Parpadea con periodo de 1 seg');
gettext('Le damos al pulso 500ms de  \nanchura para poder verlo  \n(ciclo del 50%)');
gettext('Divisor de frecuencia');
gettext('04-Encadenamiento-biestables-cambio');
gettext('**Detector de**  \n**flanco**');
gettext('## Ejemplo 4: Encadenamiento de biestables T\n\nPara poder encadenarlos es necesario usar **detectores de flanco**, de  \nforma que a todos los biestables de cambio les entre un **tic**');
gettext('Frecuencia  \nmitad');
gettext('Frecuencia  \ncuarto del  \ntotal');
gettext('**Biestable**  \n**de cambio**');
gettext('Parpadeo con periodo  \nde 4 segundos');
gettext('Parpadeo con periodo  \nde 1 segundo');
gettext('05-1-Capturando-bit-1');
gettext('## Ejemplo 5-1: Capturando un bit a 1\n\nEjemplo de captura de un bit 1 al recibir un tic del pulsador. Para  \nvolver al estado inicial y repetir la prueba hay que hacer un reset de  \nla FPGA (este biestable no tiene entrada de reset)');
gettext('**Biestable D**');
gettext('Tic de captura');
gettext('05-2-Capturando-bit-0');
gettext('## Ejemplo 5-2: Capturando un bit a 0\n\nEjemplo de captura de un bit 0 al recibir un tic del pulsador. El  \nbiestable tiene el valor 1 cargado inicialmente, por lo que el LED  \nestá encendido al empezar');
gettext('06-Capturando-dato-generico');
gettext('## Ejemplo 6: Capturando un dato genérico\n\nEjemplo de captura de los datos que llegan desde un interruptor  \nexterno. Cada vez que se aprieta el pulsador se captura el dato y  \nse muestra en el LED');
gettext('Dato  \ncapturado');
gettext('Visualizar el  \ndato actual');
gettext('Visualizar el  \ndato capturado');
gettext('07-Capturando-dat-3-bits');
gettext('## Ejemplo 7: Capturando un dato de 3 bits\n\nEjemplo de captura de un dato de 3 bits que llega por los  \ninterruptores externos. Al apretarse el pulsador se cargan los  \n**Biestables D** en paralelo con los bits, y el dato capturado se  \nmuestra en el display de 7 segmentos');
gettext('**Biestables D**  \nEn paralelo');
gettext('**Display 7 seg**');
gettext('08-Desplazamiento-3-bits');
gettext('## Ejemplo 8: Desplazamiento de bits con el pulsador\n\nSe tienen 3 **biestables tipo D** conectados en **serie**. El de la izquierda almacena un 1  \ny el resto 0 inicialmente. Al apretar el pulsador el 1 se desplaza hacia la  \nderecha hasta que desaparece. El biestable de la izquierda se carga con el valor 0  \ncon cada tic en load. Los valores de los biestables son: **100**, **010**, **001** y finalmete **000**  \nEl contenido de los biestables se muestra en 3 **LEDs**');
gettext('Valor para las  \nsiguientes cargas');
gettext('09-Desplazamiento-en-anillo-3bits');
gettext('## Ejemplo 9: Desplazamiento en anillo, de 3 bits\n\nLos mismos biestables del ejemplo 8, pero conectados en anillo, de manera que al apretarse el pulsador  \npor tercer vez el 1 entra de vuelta al biestable de la izqueirda, volviéndose al estado inicial');
gettext('Dato del tercer biestable');
gettext('10-Multiplicacion-por-dos');
gettext('## Ejemplo 10: Multiplicación por dos\n\nEjemplo de una **multiplicación por dos** simple, implementada mediante el **desplazamiento** de bits  \nSe usa un **número de 3 bits**, que se muestra en el **display**. Inicialmente vale **1**. Al apretar el  \npulsador se multiplica por dos, obteniéndose **2**. Si se vuelve a apretar se multiplica otra vez,  \nobteniéndose **4**. Si el valor introduciro en los dos biestables de menor peso es 11 (3), el  \nresultado será 6. La capacidad es muy limitada porque sólo tenemos un display de 7 segmentos para  \nrepresentar la información, pero este método sirve para multiplicar/dividor entre 2 números de  \ncualquier tamaño de bits');
gettext('**Bit 0**');
gettext('**Bit 1**');
gettext('**Bit 2**');
gettext('Pulsador para  \nmultiplicar por 2');
gettext('**Display de 7 segmentos**');
gettext('11-conversor-serie-paralelo');
gettext('## Ejemplo 11: Conversor serie-paralelo\n\nEjemplo de un conversor de datos de serie a paralelo  \nLos bits en serie se indican con el botón 1  \nMediante el botón 2 se hace un desplazamiento. Al cabo de  \n3 pulsaciones se ha recibido el dato  \nAl apretar el botón 3 se cargan los datos en paralelo en  \notros biestables, para almacenarlo para su visualización en  \nel display de 7 segmentos\n');
gettext('**Bit serie de entrada**');
gettext('**Desplazamiento**');
gettext('**Carga**');
gettext('Dato recibido');
gettext('Desplazamiento de los datos recibidos');
gettext('Almacenamiento del dato recibido\n(en paralelo)');
gettext('12-conversor-paralelo-serie');
gettext('Dato cargado');
gettext('**Bit serie**');
gettext('**Dato de entrada**');
gettext('## Ejemplo 12: Conversión a serie de un número de 3 bits\n\nEjemplo de conversión de paralelo a serie. El dato paralelo se introduce por  \nlos interruptores. Al apretar el botón de load se carga en los 6 biestables y  \nse muestra en el display de 7 segmentos. Al apretar el otro botón se desplazan  \nel dato un bit. Al cabo de tres pulsaciones de este botón se han enviado  \ntodos los bits en serie\n');
gettext('**Cargar el dato**');
gettext('**Desplazar el dato**');
gettext('Biestable de almacenamiento del  \nbit serie. Sólo se carga en los  \ndesplazamientos');
gettext('Biestables para mostrar el dato cargado en el display 7 seg');
gettext('Evento: Cargar');
gettext('Evento: desplazar');
gettext('Evento: carga o \ndesplazamiento');
gettext('Ejercicio-28-1');
gettext('**Entregar**:\n\n  -1 Pantallazo del circuito\n  \n  -1 Vídeo del funcionamiento\n  \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube. El vídeo puede estar en youtube o directamente en el tuit/post\n  ');
gettext('**GITHUB**:\n\n  Entrega **obligatoria por Github** (sólo pantallazo, el vídeo\n  no hace falta, para que no ocupe tanto espacio)');
gettext('# Solución ejercicio 28.1: (5 Bitpoints). Caja fuerte con apertura con código de 3 bits\n\nEste es el circuito de la apertura de la **caja fuerte**, que ya conocemos, pero con algunas mejoras. Primero se introduce el **código de 3 bits** por los interruptores externos  \ny se pulsa la **tecla enter** (cargar el dato). Este dato se almacena en **3 biestables D** y se comprueba si es el correcto. El servo se moverá si el código es el **101** (5),  \nsimulando la **apertura de la caja**.  Para cerrar hay que introducir cualquier número diferente de 5 y apretar **enter**\n\nAdemás tiene un **modo de visualización del código**. Por defecto no se muestra el código introducido. Al apretar el pulsador de visualización, el dato guardado en los biestables  \nse muestra en el display. Si se vuelve a apretar el botón se deja de visualizar. Usar un pulsador de cambio');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=1VyIj9DERws) se muestra un ejemplo de funcionamiento.\n\n[![Click to see the youtube video](http://img.youtube.com/vi/1VyIj9DERws/0.jpg)](https://www.youtube.com/watch?v=1VyIj9DERws)');
gettext('Ejercicio-28-2');
gettext('# Ejercicio 28.2: (5 Bitpoints). Mini-calculadora que multiplica un número de 3 bits por 2\n\nDiseñar una **mini-calculadora**, de 3 bits, que realiza una única operación: **multiplicar por dos**. Se introduce el dato de 3 bits mediante **3 pulsadores externos** y  \nse pulsa la **tecla de carga** para itroducirlo. Se muestra en el **display**. A contiuación si se pulsa la **tecla de multiplicación** se multiplicará por dos y se  \nmuestra el resultado en el display. Como se usan pocos bits, **la multiplicación sólo se puede usar 1 veces después de cargar**. Si se aprieta varias veces el  \nbotón de multiplicación sólo tendrá efecto la primera vez. Y no folverá a funcionar hasta realizar una nueva carga.\n\nUtilizar el decodificador de 7 seg **DisplayHex**, que permite visualizar 4 bits en hexadecimal. Así, por ejemplo, si se multiplica 5 * 2 se obtendrá el dígito A (10 en hexa)');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=GNUIOgodDQY) se muestra un ejemplo de funcionamiento. Primero  \nse prueba con el número uno, y el resultado es 2. Luego con 3, y sale 6.  \nDespués con 4, que da 8, luego con 5, y sale A (10) y finalmente  \ncon 7, que sale d (14). Si se aprieta varias veces el botón de multiplicación no tiene efecto\n\n\n[![Click to see the youtube video](http://img.youtube.com/vi/PqVvVQ5D3nc/0.jpg)](https://www.youtube.com/watch?v=PqVvVQ5D3nc)');
gettext('Ejercicio-28-3');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=GNUIOgodDQY) se muestra un ejemplo de funcionamiento. Primero  \nse envía el número 3, y el receptor muestra el dato recibido en el display de 7 segmentos. Luego se quita el cable de  \ntranmisión y se vuelve a enviar. Se recibe 0. Se coloca otra vez el cable de transmisión y se envía el número 5\n\n\n[![Click to see the youtube video](http://img.youtube.com/vi/GNUIOgodDQY/0.jpg)](https://www.youtube.com/watch?v=GNUIOgodDQY)');
gettext('# Ejercicio 28.3: (5 Bitpoints). Transmisión y recepción de un dato de 3 bits en serie\n\nDiseeñar un circuito que simula un sistema de transmisión entre un circuito emisor y uno receptor.  El envío de datos del tranmisor al receptor se hace en serie, bit a bit, a través de un  \ncable externo. Este cable sale por un pin de la FPGA, y vuelve a entrar por otro pin para llegar al receptor. Lo hacemos así para enfatizar el hecho de que los datos se transmiten bit a bit, por  \nun cable.\n\nLos datos que se envían son de 3 bits. Este dato se introduce en el transmisor a través de 3 interruptores externos, y al pulsar el botón de load se captura y se muestra en 3 LEDs. A continuación, \nse desplazan para su envío serie. Cada vez que se aprieta el botón 2 se desplaza un bit.\n\nEl receptor recibe el dato en serie y cuando se aprieta el botón de cargar se guarda el dato en otros 3 Biestables, cuyo contenido se visualiza en el display de 7 segmentos\n\nAsí, para transmitir el número 3, por ejemplo, los pasos serían los siguientes:\n\n* **Paso 1**: Introducir el número 3 en binario en los Switches\n* **Paso 2**: Apretar el botón de load. El número cargado se muestra en binario en los LEDs\n* **Paso 3**: Apretar 3 veces el pulsador de desplazamiento\n* **Paso 4**: Apretar de nuevo el botón de load para mostrar el dato recibido en el Display');
