// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Bits');
gettext('Puertas');
gettext('Varios');
gettext('0');
gettext('Un bit constante a 0');
gettext('1');
gettext('Un bit constante a 1');
gettext('and');
gettext('Puerta AND');
gettext('not');
gettext('Puerta NOT');
gettext('Bombeo');
gettext('Retardo');
gettext('Servos');
gettext('Corazon_10Hz');
gettext('Bombear 1 bit por segundo');
gettext('Corazon_1Hz');
gettext('Corazon_2Hz');
gettext('Corazon_3Hz');
gettext('Corazon_4Hz');
gettext('Corazon_5Hz');
gettext('Corazon_7Hz');
gettext('Tortuga-2');
gettext('Divisor entre dos');
gettext('Biestable T síncrono, inicializado a 0');
gettext('Biestable T síncrono, inicializado por parametro INI');
gettext('Biestable tipo D con entrada de enable, inicializado al parámetro INI');
gettext('Biestable D con inicialización paramétrica');
gettext('Multiplexor 2:1 de 1-bit');
gettext('Puerta OR');
gettext('NAND logic gate');
gettext('Transistor');
gettext('Transistor cmos hecho a partir de semiconductores');
gettext('Cristal de Siicio');
gettext('Atomos de silicio');
gettext('Generar un pulso de reloj al recibir un flanco por la entrada');
gettext('Biestable D inicializado a 0');
gettext('Delay flip-flop');
gettext('Tortuga: Divisor entre 2\n\nImplementado a partir de un\nbiestable T síncrono');
gettext('Hacer que solo responda a los flancos\nde subida de la señal de entrada');
gettext('Mux 2:1 with logic gates');
gettext('Entrada 1');
gettext('Entrada 0');
gettext('Selección');
gettext('Implementación en Verilog');
gettext('Las puertas están construidas a\npartir de transistores');
gettext('Pincha en algún transistor para\nbajar de nivel');
gettext('Nivel 3: Semiconductores');
gettext('Los transistores se crean a \npartir de uniones entre \nsemiconductores, de tipo P y N\nEstán integrados en los dados de\nsilicio en los circuitos integrados');
gettext('Pincha en el bloque para bajar de nivel');
gettext('Nivel 2: MATERIALES');
gettext('Cristal de silicio');
gettext('Los semiconductores se crean a partir de cristales\nde Silicio (Si) que se dopans con impurezas\npara darle las propiedades de semiconductores');
gettext('Pincha en los bloques para bajar de nivel');
gettext('Átomos de Silicio');
gettext('Nivel 1: ATOMOS');
gettext('Los cristales de silicio se forman a \npartir del enlace covalente entre los\nátomos de silicio. Cada uno de ellos \nestá rodeado por 4 átomos de silicio\nformando un tetraedro');
gettext('Emax-ES08A');
gettext('Futaba-3003');
gettext('TowerPro-SG90');
gettext('ServoBit-90');
gettext('ServoBit para microservos EMAX ES08A. Controlador de 1 bit para mover el servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('Valor constante para bus de 8 bits');
gettext('Mux 2:1. Bus de 7 bits. ');
gettext('Mux 2:1. Bus de 4 bits. ');
gettext('Agregador de 4 cables a bus de 4bits');
gettext('Separador de bus de 4bits en 4 cables (1 + 1 + 1 + 1)');
gettext('Separador de bus de 8bits en 2 (4 + 4)');
gettext('Agregador de 2 buses de 4 a bus de 8bits');
gettext('Controlador PWM para posicionar servos de 20ms. Las unidades de pos son de 10usec');
gettext('Posición 0');
gettext('Posición 1');
gettext('<B>Posicion del servo</B>\n\nSe especifica en unidades de 10micro-segundos\nEj. pos = 100 --> Pulso de achura 1ms');
gettext('<B>Generación de una señal PWM para posicionamiento de Servos</B>\nEl periodo es de 20ms\nEl ancho del pulso varía entre 0 - 255 (0 - 2.5ms)');
gettext('Servobit-90');
gettext('ServoBit para Futaba 3003. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('Servobit-90');
gettext('ServoBit para micrservo TowerPro-SG90. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('<B>Servobit</B> para microservos TowerPro SG-90 o compatibles\nLas dos posiciones están distanciadas 90 grados\n\n* Posicion 0: 45 grados\n* Posicion 1: 135 grados');
gettext('0-Soluciones-Tutorial-10');
gettext('1-Ejemplos');
gettext('2-Ejercicios');
gettext('Sol-10-1');
gettext('Movimiento del cuello de Franky');
gettext('Chisporroteo en los ojos de Franky');
gettext('Sol-10-2');
gettext('Sol-10-3');
gettext('01-Pulsadores-AND');
gettext('02-1-rafaga');
gettext('Ejemplo de envío al LED de una \"Ráfaga\"\nde 1s y 0s al apretar el pulsador\n\nLa puerta AND habilita o deshabilitata\nesta ráfaga');
gettext('03-1-rafaga-led-on');
gettext('Ejemplo de las ráfagas. Pero ahora el \nLED 0 está siempre encendido. Al apretar\nel pulsador se envía la ráfaga');
gettext('03-2-rafaga-pulsador-off');
gettext('Ejemplo de las ráfagas. Ahora se están emitiendo constantemente\nhasta que se aprieta el pulsador y se paran. Al soltar el botón\nvuelven a arrancar');
gettext('04-rafagas-periodicas');
gettext('Ejemplo de ráfagas periódicas. Se emite una ráfaga durante \n2 segundos, luego está 2 segundos paradas y así sucesivamente');
gettext('Ejercicio-11-1');
gettext('<B>Ejercicio 11.1</B>: (3 Bitpoints) Hacer un circuito digital que deje el servo en una\nposición. Al apretar los dos pulsadores a la vez, SW1 y SW2, el servo se debe mover a otra \nposición. Si no están apretados a la vez, volverá a la posición inicial');
gettext('Entregar:\n\n  -1 Pantallazo del circuito (1 Bitpoint)\n  -1 Vídeo del funcionamiento (1 Bitpoint)\n  \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube. El vídeo puede estar en youtube o directamente en el tuit/post');
gettext('GITHUB:\n\n  1 Bitpoint adicional si lo entregáis por Github (sólo pantallazo, el vídeo\n  no hace falta, para que no ocupe tanto espacio)');
gettext('Ejercicio-11-2');
gettext('<B>Ejercicio 11.2</B>: (3 Bitpoints) Hacer un circuito digital para controlar un \nlimpiaparabrisas. Inicialmente estará parado. Al apretar el pulsador SW1 se moverá de \nlado a lado a la frecuencia de 1Hz. Al soltar el pulsador se parará');
gettext('Ejercicio-11-3');
gettext('<B>Ejercicio 11.3</B>: (5 Bitpoints) Hacer un circuito digital para que la cabeza de Franky\ngire automáticamente cada 2 segundos de un lado hacia otro. Cuando esté mirando hacia \nuno de los lado, sus ojos deben emitir una ráfaga de 10Hz. Cuando está en la otra \nposición deben permanecer encendidos');
gettext('Entregar:\n\n  -1 Pantallazo del circuito (2 Bitpoint)\n  -1 Vídeo del funcionamiento (2 Bitpoint)\n  \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube. El vídeo puede estar en youtube o directamente en el tuit/post');
