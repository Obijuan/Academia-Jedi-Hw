// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Comb');
gettext('Const');
gettext('Varios');
gettext('Codificadores');
gettext('Decodificadores');
gettext('Demux');
gettext('Mux');
gettext('Puertas');
gettext('Tablas');
gettext('cod-2-1');
gettext('Codificador de 2 a 1. La salida zero se activa cuando ninguna entrada está activada');
gettext('cod-4-2-bus');
gettext('Codificador de 4 a 2, con prioridad. La salida zero se activa cuando ninguna entrada está activad. Entradas y salidas de buses');
gettext('cod-4-2');
gettext('Codificador de 4 a 2, con prioridad. La salida zero se activa cuando ninguna entrada está activad');
gettext('7Seg');
gettext('BCD-ASCII');
gettext('Decodificador de BCD a ASCII');
gettext('Circuito combinacional de 4 entradas y 8 salidas');
gettext('decod-1-2');
gettext('Decodificador de 1 a 2');
gettext('decod-2-4-bus');
gettext('Decodificador de 2 a 4, con salida en bus');
gettext('decod-2-4');
gettext('Decodificador de 2 a 4');
gettext('decod-3-8-bus');
gettext('Decodificador de 3 a 8, con salida en bus');
gettext('decod-3-8');
gettext('Decodificador de 3 a 8');
gettext('Anodo-comun');
gettext('Catodo-comun');
gettext('displayBit');
gettext('DisplayBit. Decodificador de 1 bit a 7 segmentos. Ánodo común');
gettext('displayBit2');
gettext('DisplayBit2. Decodificador de 2 bits a 7 segmentos. Ánodo común');
gettext('displayBit3');
gettext('DisplayBit3. Decodificador de 3 bits a 7 segmentos. Ánodo común');
gettext('displayDEC');
gettext('DisplayDEC. Decodificador BCD a 7 segmentos. Ánodo común');
gettext('displayHEX');
gettext('DisplayHEX. Decodificador de binario a hexadecimal-7 segmentos. Ánodo común');
gettext('displayBit');
gettext('DisplayBit. Decodificador de 1 bit a 7 segmentos. Cátodo común');
gettext('displayBit2');
gettext('DisplayBit2. Decodificador de 2 bits a 7 segmentos. Cátodo común');
gettext('displayBit3');
gettext('DisplayBit3. Decodificador de 3 bits a 7 segmentos. Cátodo común');
gettext('displayDEC');
gettext('DisplayDEC. Decodificador BCD a 7 segmentos. Cátodo común');
gettext('displayHEX');
gettext('DisplayHEX. Decodificador de binario a hexadecimal-7 segmentos. Cátodo común');
gettext('1-Bit');
gettext('Demux-1-2');
gettext('Demultiplexor de 1 bit, de 1 a 2');
gettext('Demux-2-4');
gettext('Demultiplexor de 1 bit, de 2 a 4');
gettext('1-Bit');
gettext('16-bits');
gettext('2-Bits');
gettext('24-Bits');
gettext('3-Bits');
gettext('4-Bits');
gettext('5-Bits');
gettext('7-Bit');
gettext('8-Bit');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1');
gettext('Mux-2-1');
gettext('Mux-4-1-flip');
gettext('Multiplexor de 4 a 1. Implementado en verilog');
gettext('Mux-4-1');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 16 bits');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1 de 2 bits');
gettext('Mux-2-1');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 2 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 24 bits');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1 de 3 bits');
gettext('Mux-2-1');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 3 bits');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1 de 4 bits');
gettext('Mux-2-1');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 4 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 5 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 7 bits');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1 de 8 bits');
gettext('Mux-2-1');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 8 bits');
gettext('04-bits');
gettext('Bus');
gettext('and');
gettext('Puerta AND');
gettext('and3');
gettext('Puerta AND de 3 entradas');
gettext('nand');
gettext('Puerta NAND');
gettext('nor');
gettext('Puerta NOR');
gettext('not');
gettext('Puerta NOT');
gettext('or');
gettext('Puerta OR');
gettext('or3');
gettext('Puerta OR de 3 entradas');
gettext('or4');
gettext('Puerta OR de 4 entradas');
gettext('xnor');
gettext('Puerta XNOR');
gettext('xor');
gettext('Puerta XOR');
gettext('not');
gettext('Puerta NOT para bus de 4 bits');
gettext('tablas_bin');
gettext('tablas_hex');
gettext('1bit_entrada');
gettext('2bit_entrada');
gettext('3bit_entrada');
gettext('4bit_entrada');
gettext('5bit_entrada');
gettext('6bit_entrada');
gettext('7bit_entrada');
gettext('8bit_entrada');
gettext('tabla-bin-1-1');
gettext('Circuito combinacional de 1 entradas y 1 salidas');
gettext('tabla-bin-1-2');
gettext('Circuito combinacional de 1 entradas y 2 salidas');
gettext('tabla-bin-1-3');
gettext('Circuito combinacional de 1 entradas y 3 salidas');
gettext('tabla-bin-1-4');
gettext('Circuito combinacional de 1 entradas y 4 salidas');
gettext('tabla-bin-1-5');
gettext('Circuito combinacional de 1 entradas y 5 salidas');
gettext('tabla-bin-1-6');
gettext('Circuito combinacional de 1 entradas y 6 salidas');
gettext('tabla-bin-1-7');
gettext('Circuito combinacional de 1 entradas y 7 salidas');
gettext('tabla-bin-1-8');
gettext('Circuito combinacional de 1 entradas y 8 salidas');
gettext('tabla-bin-2-1');
gettext('Circuito combinacional de 2 entradas y 1 salidas');
gettext('tabla-bin-2-2');
gettext('Circuito combinacional de 2 entradas y 2 salidas');
gettext('tabla-bin-2-3');
gettext('Circuito combinacional de 2 entradas y 3 salidas');
gettext('tabla-bin-2-4');
gettext('Circuito combinacional de 2 entradas y 4 salidas');
gettext('tabla-bin-2-5');
gettext('Circuito combinacional de 2 entradas y 5 salidas');
gettext('tabla-bin-2-6');
gettext('Circuito combinacional de 2 entradas y 6 salidas');
gettext('tabla-bin-2-7');
gettext('Circuito combinacional de 2 entradas y 7 salidas');
gettext('tabla-bin-2-8');
gettext('Circuito combinacional de 2 entradas y 8 salidas');
gettext('tabla-bin-3-1');
gettext('Circuito combinacional de 3 entradas y 1 salidas');
gettext('tabla-bin-3-2');
gettext('Circuito combinacional de 3 entradas y 2 salidas');
gettext('tabla-bin-3-3');
gettext('Circuito combinacional de 3 entradas y 3 salidas');
gettext('tabla-bin-3-4');
gettext('Circuito combinacional de 3 entradas y 4 salidas');
gettext('tabla-bin-3-5');
gettext('Circuito combinacional de 3 entradas y 5 salidas');
gettext('tabla-bin-3-6');
gettext('Circuito combinacional de 3 entradas y 6 salidas');
gettext('tabla-bin-3-7');
gettext('Circuito combinacional de 3 entradas y 7 salidas');
gettext('tabla-bin-3-8');
gettext('Circuito combinacional de 3 entradas y 8 salidas');
gettext('tabla-bin-4-1');
gettext('Circuito combinacional de 4 entradas y 1 salidas');
gettext('tabla-bin-4-2');
gettext('Circuito combinacional de 4 entradas y 2 salidas');
gettext('tabla-bin-4-3');
gettext('Circuito combinacional de 4 entradas y 3 salidas');
gettext('tabla-bin-4-4');
gettext('Circuito combinacional de 4 entradas y 4 salidas');
gettext('tabla-bin-4-5');
gettext('Circuito combinacional de 4 entradas y 5 salidas');
gettext('tabla-bin-4-6');
gettext('Circuito combinacional de 4 entradas y 6 salidas');
gettext('tabla-bin-4-7');
gettext('Circuito combinacional de 4 entradas y 7 salidas');
gettext('tabla-bin-4-8');
gettext('tabla-bin-5-1');
gettext('Circuito combinacional de 5 entradas y 1 salidas');
gettext('tabla-bin-5-2');
gettext('Circuito combinacional de 5 entradas y 2 salidas');
gettext('tabla-bin-5-3');
gettext('Circuito combinacional de 5 entradas y 3 salidas');
gettext('tabla-bin-5-4');
gettext('Circuito combinacional de 5 entradas y 4 salidas');
gettext('tabla-bin-5-5');
gettext('Circuito combinacional de 5 entradas y 5 salidas');
gettext('tabla-bin-5-6');
gettext('Circuito combinacional de 5 entradas y 6 salidas');
gettext('tabla-bin-5-7');
gettext('Circuito combinacional de 5 entradas y 7 salidas');
gettext('tabla-bin-5-8');
gettext('Circuito combinacional de 5 entradas y 8 salidas');
gettext('tabla-bin-6-1');
gettext('Circuito combinacional de 6 entradas y 1 salidas');
gettext('tabla-bin-6-2');
gettext('Circuito combinacional de 6 entradas y 2 salidas');
gettext('tabla-bin-6-3');
gettext('Circuito combinacional de 6 entradas y 3 salidas');
gettext('tabla-bin-6-4');
gettext('Circuito combinacional de 6 entradas y 4 salidas');
gettext('tabla-bin-6-5');
gettext('Circuito combinacional de 6 entradas y 5 salidas');
gettext('tabla-bin-6-6');
gettext('Circuito combinacional de 6 entradas y 6 salidas');
gettext('tabla-bin-6-7');
gettext('Circuito combinacional de 6 entradas y 7 salidas');
gettext('tabla-bin-6-8');
gettext('Circuito combinacional de 6 entradas y 8 salidas');
gettext('tabla-bin-7-1');
gettext('Circuito combinacional de 7 entradas y 1 salidas');
gettext('tabla-bin-7-2');
gettext('Circuito combinacional de 7 entradas y 2 salidas');
gettext('tabla-bin-7-3');
gettext('Circuito combinacional de 7 entradas y 3 salidas');
gettext('tabla-bin-7-4');
gettext('Circuito combinacional de 7 entradas y 4 salidas');
gettext('tabla-bin-7-5');
gettext('Circuito combinacional de 7 entradas y 5 salidas');
gettext('tabla-bin-7-6');
gettext('Circuito combinacional de 7 entradas y 6 salidas');
gettext('tabla-bin-7-7');
gettext('Circuito combinacional de 7 entradas y 7 salidas');
gettext('tabla-bin-7-8');
gettext('Circuito combinacional de 7 entradas y 8 salidas');
gettext('tabla-bin-8-1');
gettext('Circuito combinacional de 8 entradas y 1 salidas');
gettext('tabla-bin-8-2');
gettext('Circuito combinacional de 8 entradas y 2 salidas');
gettext('tabla-bin-8-3');
gettext('Circuito combinacional de 8 entradas y 3 salidas');
gettext('tabla-bin-8-4');
gettext('Circuito combinacional de 8 entradas y 4 salidas');
gettext('tabla-bin-8-5');
gettext('Circuito combinacional de 8 entradas y 5 salidas');
gettext('tabla-bin-8-6');
gettext('Circuito combinacional de 8 entradas y 6 salidas');
gettext('tabla-bin-8-7');
gettext('Circuito combinacional de 8 entradas y 7 salidas');
gettext('tabla-bin-8-8');
gettext('Circuito combinacional de 8 entradas y 8 salidas');
gettext('1bit_entrada');
gettext('2bit_entrada');
gettext('3bit_entrada');
gettext('4bit_entrada');
gettext('5bit_entrada');
gettext('6bit_entrada');
gettext('7bit_entrada');
gettext('8bit_entrada');
gettext('tabla-hex-1-1');
gettext('tabla-hex-1-2');
gettext('tabla-hex-1-3');
gettext('tabla-hex-1-4');
gettext('tabla-hex-1-5');
gettext('tabla-hex-1-6');
gettext('tabla-hex-1-7');
gettext('tabla-hex-1-8');
gettext('tabla-hex-2-1');
gettext('tabla-hex-2-2');
gettext('tabla-hex-2-3');
gettext('tabla-hex-2-4');
gettext('tabla-hex-2-5');
gettext('tabla-hex-2-6');
gettext('tabla-hex-2-7');
gettext('tabla-hex-2-8');
gettext('tabla-hex-3-1');
gettext('tabla-hex-3-2');
gettext('tabla-hex-3-3');
gettext('tabla-hex-3-4');
gettext('tabla-hex-3-5');
gettext('tabla-hex-3-6');
gettext('tabla-hex-3-7');
gettext('tabla-hex-3-8');
gettext('tabla-hex-4-1');
gettext('tabla-hex-4-2');
gettext('tabla-hex-4-3');
gettext('tabla-hex-4-4');
gettext('tabla-hex-4-5');
gettext('tabla-hex-4-6');
gettext('tabla-hex-4-7');
gettext('tabla-hex-4-8');
gettext('tabla-hex-5-1');
gettext('tabla-hex-5-2');
gettext('tabla-hex-5-3');
gettext('tabla-hex-5-4');
gettext('tabla-hex-5-5');
gettext('tabla-hex-5-6');
gettext('tabla-hex-5-7');
gettext('tabla-hex-5-8');
gettext('tabla-hex-6-1');
gettext('tabla-hex-6-2');
gettext('tabla-hex-6-3');
gettext('tabla-hex-6-4');
gettext('tabla-hex-6-5');
gettext('tabla-hex-6-6');
gettext('tabla-hex-6-7');
gettext('tabla-hex-6-8');
gettext('tabla-hex-7-1');
gettext('tabla-hex-7-2');
gettext('tabla-hex-7-3');
gettext('tabla-hex-7-4');
gettext('tabla-hex-7-5');
gettext('tabla-hex-7-6');
gettext('tabla-hex-7-7');
gettext('tabla-hex-7-8');
gettext('tabla-hex-8-1');
gettext('tabla-hex-8-2');
gettext('tabla-hex-8-3');
gettext('tabla-hex-8-4');
gettext('tabla-hex-8-5');
gettext('tabla-hex-8-6');
gettext('tabla-hex-8-7');
gettext('tabla-hex-8-8');
gettext('7Seg');
gettext('Bits');
gettext('Bus');
gettext('Anodo_comun');
gettext('Catodo_comun');
gettext('Digitos');
gettext('Letras');
gettext('Digitos');
gettext('Letras');
gettext('0');
gettext('Constante de  7 bits para mostrar el dígito 0 en un display de 7 segmentos. Ánodo común');
gettext('Valor genérico constante, de 7 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 0 | 0 | 0 | 0 | 1 |');
gettext('1');
gettext('Constante de  7 bits para mostrar el dígito 1 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 1 | 1 | 1 | 1 |');
gettext('2');
gettext('Constante de  7 bits para mostrar el dígito 2 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 1 | 0 | 0 | 1 | 0 |');
gettext('3');
gettext('Constante de  7 bits para mostrar el dígito 3 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 0 | 1 | 1 | 0 |');
gettext('4');
gettext('Constante de  7 bits para mostrar el dígito 4 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 1 | 1 | 0 | 0 |');
gettext('5');
gettext('Constante de  7 bits para mostrar el dígito 5 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 0 | 0 | 1 | 0 | 0 |');
gettext('6');
gettext('Constante de  7 bits para mostrar el dígito 6 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 0 | 0 | 0 | 0 | 0 |');
gettext('7');
gettext('Constante de  7 bits para mostrar el dígito 7 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 1 | 1 | 1 | 1 |');
gettext('8');
gettext('Constante de  7 bits para mostrar el dígito 8 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 |  0| 0 | 0 | 0 | 0 |');
gettext('9');
gettext('Constante de  7 bits para mostrar el dígito 9 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 |  0| 0 | 1 | 0 | 0 |');
gettext('A');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal A en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 |  0| 1 | 0 | 0 | 0 |');
gettext('B');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal B en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  0| 0 | 0 | 0 | 0 |');
gettext('C');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal C en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 0 | 0 | 0 | 1 |');
gettext('D');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal D en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 0 | 0 | 1 | 0 |');
gettext('E');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal E en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 0 | 0 | 0 | 0 |');
gettext('F');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal F en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 1 | 0 | 0 | 0 |');
gettext('G');
gettext('Constante de  7 bits para mostrar la letral G en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 0 | 0 | 1 | 0 | 0 |');
gettext('H');
gettext('Constante de  7 bits para mostrar la letra H en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 | 0 | 1 | 0 | 0 | 0 |');
gettext('I');
gettext('Constante de  7 bits para mostrar la letra I en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 | 1 | 1 | 0 | 0 | 1 |');
gettext('J');
gettext('Constante de  7 bits para mostrar la letra J en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 0 | 0 | 1 | 1 |');
gettext('L');
gettext('Constante de  7 bits para mostrar la letra L en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 0 | 0 | 0 | 1 |');
gettext('N');
gettext('Constante de  7 bits para mostrar la letra N en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 0 | 1 | 0 | 1 | 0 |');
gettext('NN');
gettext('Constante de  7 bits para mostrar la letra ñ en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 0 | 1 | 0 | 1 | 0 |');
gettext('O');
gettext('Constante de  7 bits para mostrar la letra O en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 0 | 0 | 0 | 1 |');
gettext('P');
gettext('Constante de  7 bits para mostrar la letra P en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 1 | 1 | 0 | 0 | 0 |');
gettext('Q');
gettext('Constante de  7 bits para mostrar la letra Q en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 1 | 1 | 0 | 0 |');
gettext('R');
gettext('Constante de  7 bits para mostrar la letra R en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 1 | 0 | 1 | 0 |');
gettext('S');
gettext('Constante de  7 bits para mostrar la letra S en un display de 7 segmentos. Ánodo común');
gettext('U');
gettext('Constante de  7 bits para mostrar la letra U en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 0 | 0 | 0 | 1 |');
gettext('Y');
gettext('Constante de  7 bits para mostrar la letra Y en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 0 | 1 | 0 | 0 |');
gettext('Digitos');
gettext('Letras');
gettext('0');
gettext('Constante de  7 bits para mostrar el dígito 0 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 1 | 1 | 0 |');
gettext('1');
gettext('Constante de  7 bits para mostrar el dígito 1 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 0 | 0 | 0 | 0 |');
gettext('2');
gettext('Constante de  7 bits para mostrar el dígito 2 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  0| 1 | 1 | 0 | 1 |');
gettext('3');
gettext('Constante de  7 bits para mostrar el dígito 3 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 0 | 0 | 1 |');
gettext('4');
gettext('Constante de  7 bits para mostrar el dígito 4 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 0 | 0 | 1 | 1 |');
gettext('5');
gettext('Constante de  7 bits para mostrar el dígito 5 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  1| 1 | 0 | 1 | 1 |');
gettext('6');
gettext('Constante de  7 bits para mostrar el dígito 6 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  1| 1 | 1 | 1 | 1 |');
gettext('7');
gettext('Constante de  7 bits para mostrar el dígito 7 en un display de 7 segmentos');
gettext('8');
gettext('Constante de  7 bits para mostrar el dígito 8 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 1 | 1 | 1 |');
gettext('9');
gettext('Constante de  7 bits para mostrar el dígito 9 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 0 | 1 | 1 |');
gettext('A');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal A en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 0 | 1 | 1 | 1 |');
gettext('B');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal B en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 |  1| 1 | 1 | 1 | 1 |');
gettext('C');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal C en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 1 | 1 | 1 | 0 |');
gettext('D');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal D en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 1 | 1 | 0 | 1 |');
gettext('E');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal E en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 1 | 1 | 1 | 1 |');
gettext('F');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal F en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 0 | 1 | 1 | 1 |');
gettext('G');
gettext('Constante de  7 bits para mostrar la letral G en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 | 1 | 1 | 0 | 1 | 1 |');
gettext('H');
gettext('Constante de  7 bits para mostrar la letra H en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 | 1 | 0 | 1 | 1 | 1 |');
gettext('I');
gettext('Constante de  7 bits para mostrar la letra I en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 0 | 0 | 1 | 1 | 0 |');
gettext('J');
gettext('Constante de  7 bits para mostrar la letra J en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 1 | 1 | 1 | 0 | 0 |');
gettext('L');
gettext('Constante de  7 bits para mostrar la letra L en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 1 | 1 | 1 | 0 |');
gettext('N');
gettext('Constante de  7 bits para mostrar la letra N en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 1 | 0 | 1 | 0 | 1 |');
gettext('NN');
gettext('Constante de  7 bits para mostrar la letra ñ en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 1 | 0 | 1 | 0 | 1 |');
gettext('O');
gettext('Constante de  7 bits para mostrar la letra O en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 1 | 1 | 1 | 0 |');
gettext('P');
gettext('Constante de  7 bits para mostrar la letra P en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 0 | 0 | 1 | 1 | 1 |');
gettext('Q');
gettext('Constante de  7 bits para mostrar la letra Q en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 0 | 0 | 1 | 1 |');
gettext('R');
gettext('Constante de  7 bits para mostrar la letra R en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 0 | 1 | 0 | 1 |');
gettext('S');
gettext('Constante de  7 bits para mostrar la letra S en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 1 | 1 | 0 | 1 | 1 |');
gettext('U');
gettext('Constante de  7 bits para mostrar la letra U en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 1 | 1 | 1 | 1 | 0 |');
gettext('Y');
gettext('Constante de  7 bits para mostrar la letra Y en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 1 | 1 | 0 | 1 | 1 |');
gettext('0');
gettext('1');
gettext('2');
gettext('3');
gettext('4');
gettext('5');
gettext('6');
gettext('7');
gettext('8');
gettext('9');
gettext('A');
gettext('B');
gettext('C');
gettext('D');
gettext('E');
gettext('F');
gettext('G');
gettext('H');
gettext('I');
gettext('J');
gettext('L');
gettext('N');
gettext('NN');
gettext('O');
gettext('P');
gettext('Q');
gettext('R');
gettext('S');
gettext('U');
gettext('Y');
gettext('0');
gettext('Un bit constante a 0');
gettext('1');
gettext('Un bit constante a 1');
gettext('01_bits');
gettext('02_bits');
gettext('03_bits');
gettext('04_bits');
gettext('05_bits');
gettext('07_bits');
gettext('08_bits');
gettext('10_bits');
gettext('16_bits');
gettext('Generico');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Generico');
gettext('Valor genérico constante, de 2 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_0');
gettext('Valor constante 0 para bus de 2 bits');
gettext('Valor_1');
gettext('Valor constante 1 para bus de 2 bits');
gettext('Valor_2');
gettext('Valor constante 2 para bus de 2 bits');
gettext('Valor_3');
gettext('Valor constante 3 para bus de 2 bits');
gettext('Generico');
gettext('Valor genérico constante, de 3 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Generico');
gettext('Valor genérico constante, de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_00');
gettext('Valor constante 0 para bus de 4 bits');
gettext('Valor_05');
gettext('Valor constante 5 para bus de 4 bits');
gettext('Valor_10');
gettext('Valor constante 10 para bus de 4 bits');
gettext('Valor_15');
gettext('Valor constante 15 para bus de 4 bits');
gettext('Generico');
gettext('Valor genérico constante, de 5 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Generico');
gettext('ASCII');
gettext('Generico');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_000');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Valor_085');
gettext('Valor constante 85 (55h) para bus de 8 bits');
gettext('Valor_170');
gettext('Valor constante 170 (AAh) para bus de 8 bits');
gettext('Valor_255');
gettext('Valor constante 255 para bus de 8 bits');
gettext('Char-A');
gettext('Código ASCII del carácter A');
gettext('Char-J');
gettext('Código ASCII del carácter J');
gettext('Char-L');
gettext('Código ASCII del carácter L');
gettext('Char-LF');
gettext('Código ASCII del carácter LF');
gettext('Generico');
gettext('Valor genérico constante, de 10 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Generico');
gettext('Valor genérico constante, de 16 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Accesorios');
gettext('Biestables');
gettext('Bombeo');
gettext('Bus');
gettext('Comparadores');
gettext('Contadores');
gettext('Flancos');
gettext('IR');
gettext('Input');
gettext('Motor');
gettext('Pegatinas');
gettext('Pulsador');
gettext('Recreo');
gettext('Registros');
gettext('Retardo');
gettext('Serial');
gettext('Servos');
gettext('Timers');
gettext('icebot');
gettext('CircuitScramble');
gettext('Baliza-1');
gettext('Baliza luminosa de 1 led. Parpadea a 2Hz cuando se activa');
gettext('Bombear 2 bits por segundo');
gettext('Corazon genérico para bombear bits a la frecuencia fijada en Hz (por defecto 1Hz)');
gettext('**Baliza luminosa**\n\nParpadeo del LED a 2Hz');
gettext('Creado a partir de un **corazón  \ngenérico**, dando el valor adecuado  \na su parámetro frecuencia');
gettext('Baliza-2');
gettext('Baliza luminosa de 2 leds. Parpadean alternativamente a 2Hz cuando se activa');
gettext('**Baliza luminosa**\n\nParpadeo de los LEDs alternativamente a 2Hz, cuando están habilitados ');
gettext('Beep');
gettext('Emitir un pitido de duración (ms) y frecuencia (hz) indicada en los parámetros, al recibir un tic');
gettext('Temporizador en milisegundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('**Arranque del**  \n**temporizador**');
gettext('**Salida de pulso**');
gettext('**Salida de tic**');
gettext('**Parametro del timer**  \nmilisegundos a esperar');
gettext('Init-tic');
gettext('Emitir un tic inicial al arrancar, y nunca más');
gettext('KITT');
gettext('Secuencia del coche fantástico, con entrada de enable');
gettext('Corazón de bombeo de tics con periodo paramétrico de milisegundos y entrada de enable');
gettext('Contador módulo M, ascendente, de 4 bits, con reset ');
gettext('**Parámetro**: Módulo del contador');
gettext('Sirena');
gettext('Cuando se activa su entrada (por nivel) suena la sirena');
gettext('Bombear 1000 bits por segundo');
gettext('Bombear 4 bits por segundo');
gettext('Bombear 2000 bits por segundo');
gettext('**Sirena acústica**\n\nSe alternan pitidos de 1Khz y 2Khz a la frecuencia de 4Hz');
gettext('Cuando esta señal se pone a 1  \nempieza a sonar la sirena');
gettext('Conectar la salida  \ndirectamente a un  \nzumbador');
gettext('beep-flash');
gettext('Emitir un flash en el LED y un pitido en el zumbador al recibir el tic');
gettext('Emitir un pulso de anchura determinada para encender un LED durante un tiempo. 50ms por defecto');
gettext('flash');
gettext('Button-off');
gettext('Pulsador de cambio con icono de Circuit Scramble. Cada vez que se aprieta cambia de estado');
gettext('Valor inicial del pulsador\n');
gettext('and');
gettext('system');
gettext('Cambio');
gettext('Biestable de cambio (Tipo T). Cuando se recibe un tic cambia de estado');
gettext('Dato');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('Set-Reset');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('Dato');
gettext('Fijos');
gettext('Tics');
gettext('Corazon_Hz');
gettext('Corazon_Seg');
gettext('Bombear 1 bit con el periodo especificado en el parámetro. Por defecto el periodo es de 1 segundos');
gettext('Corazon_10Hz');
gettext('Bombear 10 bits por segundo');
gettext('Corazon_1Hz');
gettext('Bombear 1 bit por segundo');
gettext('Corazon_1KHz');
gettext('Corazon_2Hz');
gettext('Corazon_2KHz');
gettext('Corazon_3Hz');
gettext('Bombear 3 bits por segundo');
gettext('Corazon_4Hz');
gettext('Corazon_5Hz');
gettext('Bombear 5 bits por segundo');
gettext('Corazon_7Hz');
gettext('Bombear 7 bits por segundo');
gettext('Corazon_DO4');
gettext('Bombear bits a la frecuencia del DO de la cuarta octava');
gettext('Corazon_MI4');
gettext('Bombear bits a la frecuencia del MI de la cuarta octava');
gettext('Corazon_RE4');
gettext('Bombear bits a la frecuencia del RE de la cuarta octava');
gettext('Fijos');
gettext('Heart-Hz');
gettext('Corazón de bombeo de tics a un frecuencia parametrica en Hz');
gettext('Heart-Sec-ena');
gettext('Corazón de bombeo de tics con periodo paramétrico de segundos y entrada de enable');
gettext('Heart-Sec');
gettext('Corazón de bombeo de tics a con periodo paramétrico de segundos');
gettext('Heart-baud-rx');
gettext('Corazon de tics para generar velocidades de recepción serie en baudios. La velocidad por defecto es 115200');
gettext('Heart-baud');
gettext('Corazón de tics para generar las velocidades de transmisión serie en baudios (Por defecto emite tics a 11500 baudios)');
gettext('Heart-ms-ena');
gettext('Heart-ms');
gettext('Corazón de bombeo de tics a con periodo paramétrico de milisegundos');
gettext('Heart-tics-ena');
gettext('Corazón de bombeo de tics, cuyo periodo está especificado en tics también');
gettext('Heart-tics-num');
gettext('Corazón  finito de tics. Emitir num tics cuando se recibe un tic de start');
gettext('Contador módulo M, ascendente, de 5 bits, con reset ');
gettext('Heart-tics');
gettext('Heart-us-ena');
gettext('Corazón de bombeo de tics, cuyo periodo está especificado en micro-segundos. Solo se hace el bombeo cuando está habilitado');
gettext('Heart-us');
gettext('Corazón de bombeo de tics a con periodo paramétrico de microsegundos');
gettext('Heart-1Hz');
gettext('Corazón de bombeo de tics a la frecuencia de 1Hz');
gettext('02_bits');
gettext('03_bits');
gettext('04_bits');
gettext('08_bits');
gettext('09_bits');
gettext('10_bits');
gettext('16_bits');
gettext('Agregador');
gettext('Agregador de 2 cables en un bus de 2-bits');
gettext('Separador');
gettext('Separador de bus de 2-bits en dos cables');
gettext('Acoplador-3-8');
gettext('Acoplador de buses de 3 a 8 bits. Se rellena con ceros');
gettext('Agregador');
gettext('Agregador de 3 cables en un bus de 3-bits');
gettext('Separador');
gettext('Separador de bus de 3-bits');
gettext('Agregador');
gettext('Agregador de buses de 2-bits a bus de 4-bits');
gettext('Agregador4');
gettext('Agregador de 4 cables en un bus de 4-bits');
gettext('Separador');
gettext('Separador de bus de 4-bits en buses de 2 bits');
gettext('Separador4');
gettext('Separador de bus de 4-bits en 4 cables');
gettext('Agregador');
gettext('Agregador de 2 buses de 4-bits a bus de 8-bits');
gettext('Separador');
gettext('Separador de bus de 8-bits en buses de 4 bits');
gettext('Join-8-1');
gettext('Agregador de buses de 8 y 2 bits a uno de 9bits');
gettext('split-1-8');
gettext('Separador de bus de 9-bits en uno de 1bit y otro de 8bits');
gettext('Join-8-2');
gettext('Agregador de buses de 8 y 2 bits a uno de 10bits');
gettext('Agregador');
gettext('Agregador de 2 buses de 8-bits a bus de 16-bits');
gettext('Separador');
gettext('Separador de bus de 16-bits en buses de 8 bits');
gettext('1-bit');
gettext('2-bits');
gettext('3-bits');
gettext('4-bits');
gettext('8-bits');
gettext('Comp-1');
gettext('Comparador de igualdad, de un operando de 1 bit');
gettext('Comp-2');
gettext('Comparador de dos operandos de 1 bit');
gettext('Menor-1');
gettext('Comparador menor que, de un operando de 1 bit');
gettext('Menor-2');
gettext('Comparador menor que, de dos operandos de 1 bit');
gettext('Comp-1');
gettext('Comparador de igualdad, de un operando de 2 bits');
gettext('Comp-2');
gettext('Comparador de dos operandos de 2 bits');
gettext('Menor-1');
gettext('Comparador menor que, de un operando de 2 bits');
gettext('Menor-2');
gettext('Comparador menor que, de dos operandos de 2 bits');
gettext('Comp-1');
gettext('Comparador de igualdad, de un operando de 3 bits');
gettext('Comp-2');
gettext('Comparador de dos operandos de 3 bits');
gettext('Menor-1');
gettext('Comparador menor que, de un operando de 3 bits');
gettext('Menor-2');
gettext('Comparador menor que, de dos operandos de 3 bits');
gettext('Comp-1');
gettext('Comparador de un operando de 4 bits. Se compara si el operando es igual al parámetro');
gettext('Comp-2');
gettext('Comparador de dos operandos de 4 bits');
gettext('Menor-1');
gettext('Comparador menor que, de un operando de 4 bits');
gettext('Menor-2');
gettext('Comparador menor que, de dos operandos de 4 bits');
gettext('Comp-1');
gettext('Comparador de un operando de 8 bits. Se compara si el operando es igual al parámetro');
gettext('Comp-2');
gettext('Comparador de dos operandos de 8 bits');
gettext('Menor-1');
gettext('Comparador menor que, de un operando de 8 bits');
gettext('Menor-2');
gettext('Comparador menor que, de dos operandos de 8 bits');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('13-bits');
gettext('cont-up-system');
gettext('Contador del sistema, módulo M, ascendente, de 2 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 2 bits, con reset ');
gettext('cont-up-system');
gettext('Contador del sistema, módulo M, ascendente, de 3 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 3 bits, con reset ');
gettext('cont-up-system');
gettext('Contador del sistema, módulo M, ascendente, de 4 bits, con reset ');
gettext('cont-up');
gettext('cont-up');
gettext('cont-up-system');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 6 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 7 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 8 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 9 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 10 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 11 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 12 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 13 bits, con reset ');
gettext('blocks');
gettext('Bajada');
gettext('Detector de flanco de bajada. Emite un tic cuando detecta un flanco descendente');
gettext('Subida');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('Subida');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco de subida. Versión bloques');
gettext('## Detector de flancos de subida\n\nSe genera un tic cuando llega un flanco de subida por la entrada');
gettext('Señal de  \nentrada');
gettext('Reloj del  \nsistema');
gettext('Señal de entrada  \nactual');
gettext('Estado de la señal  \nen el instante anterior');
gettext('Si señal actual es 1  \nY la señal anterior  \nes 0, es que ha llegado  \nun flanco');
gettext('En el resto de casos  \nla salida siempre es 0');
gettext('**Retraso**: 0  \nEl retraso es cero porque el flanco  \nde subida llega desde la entrada  \na la salida sin pasar por biestables');
gettext('IR-tic-sound');
gettext('Detección de objeto con sensor de infrarrojos (IR). Emite un tic cada vez detecta un objeto, y un sonido');
gettext('Detección de objeto con sensor de infrarrojos (IR). Emite un tic cada vez detecta un objeto');
gettext('**IRr-tic-sound**');
gettext('**IRr-tic**');
gettext('IR-tic');
gettext('Debouncer');
gettext('Remove the rebound on a mechanical switch');
gettext('Tri-state');
gettext('Tri-state logic block');
gettext('sync');
gettext('Sincronizar las entradas de datos con el reloj del sistema');
gettext('SM-S4303R');
gettext('MotorBit');
gettext('Controlador para servo de rotacion continua SprintRC SM-S4303R. Con on=1, el motor avanza. Dir=1 sentido agujas reloj/ 0 el contrario. V1 y V2 son los pulsos para las velocidades horaria y antihoraria (en micro-sec). V0 para que esté parado');
gettext('Mux 2:1. Bus de 7 bits. ');
gettext('Mux 2:1. Bus de 4 bits. ');
gettext('Agregador de 4 cables a bus de 4bits');
gettext('Separador de bus de 4bits en 4 cables (1 + 1 + 1 + 1)');
gettext('Multiplexor 2:1 de 1-bit');
gettext('NAND logic gate');
gettext('Transistor');
gettext('Transistor cmos hecho a partir de semiconductores');
gettext('Cristal de Siicio');
gettext('Atomos de silicio');
gettext('Separador de bus de 8bits en 2 (4 + 4)');
gettext('Agregador de 2 buses de 4 a bus de 8bits');
gettext('Controlador PWM para posicionar servos de 20ms. Las unidades de pos son de 10usec');
gettext('**Velocidad 1**: Velocidad para el  \nsentido de giro horario\n');
gettext('**Velocidad 2**: Velocidad para el \nsentido de giro antirhorario');
gettext('**Entrada on/off**: Motor en  \nmovimiento o parado');
gettext('**Motorbit paramétrico** para los **SM-S4303R** o compatibles\n\nTiene 3 parámetros, especificados en micro-segundos. **V1** y **V2** son las posiciones (ancho del pulso)  \npara las velocidades de giro en sentido horario y antihorario respectivamente\n\n**V0** es la posición en la que el servo está parado (velocidad 0)\n\nPor defecto se asignan los valores para las velocidades máximas, tanto en sentido horario como antihorario\n\n* V1max = 1900\n* V2max = 1100\n* V0 = 1500');
gettext('**Velocidad en sentido horario**\n\n* Si V1 >= 1900, la velocidad es máxima\n* Si 1900 > V1 > 1500, la velocidad estará  \nentre la máxima y 0');
gettext('**Velocidad en sentido antihorario**\n\n* Si V2 <= 1100, la velocidad es máxima\n* Si 1100 < V2 < 1500, la velocidad estará  \nentre la máxima y 0');
gettext('**dir**: Sentido de giro  \n1: horario / 0: antihorario');
gettext('**Velocidad 0**: Posición para que  \nel servo esté parado');
gettext('Mux 2:1 with logic gates');
gettext('Entrada 1');
gettext('Entrada 0');
gettext('Selección');
gettext('Implementación en Verilog');
gettext('Las puertas están construidas a\npartir de transistores');
gettext('Pincha en algún transistor para\nbajar de nivel');
gettext('Nivel 3: Semiconductores');
gettext('Los transistores se crean a \npartir de uniones entre \nsemiconductores, de tipo P y N\nEstán integrados en los dados de\nsilicio en los circuitos integrados');
gettext('Pincha en el bloque para bajar de nivel');
gettext('Nivel 2: MATERIALES');
gettext('Cristal de silicio');
gettext('Los semiconductores se crean a partir de cristales\nde Silicio (Si) que se dopans con impurezas\npara darle las propiedades de semiconductores');
gettext('Pincha en los bloques para bajar de nivel');
gettext('Átomos de Silicio');
gettext('Nivel 1: ATOMOS');
gettext('Los cristales de silicio se forman a \npartir del enlace covalente entre los\nátomos de silicio. Cada uno de ellos \nestá rodeado por 4 átomos de silicio\nformando un tetraedro');
gettext('<B>Posicion del servo</B>\n\nSe especifica en unidades de 10micro-segundos\nEj. pos = 100 --> Pulso de achura 1ms');
gettext('<B>Generación de una señal PWM para posicionamiento de Servos</B>\nEl periodo es de 20ms\nEl ancho del pulso varía entre 0 - 255 (0 - 2.5ms)');
gettext('Academia-Jedi');
gettext('Emojis');
gettext('00-Pre');
gettext('01-Primero');
gettext('02-Segundo');
gettext('03-Tercero');
gettext('00-Observador');
gettext('Rango de Observador. Pre-academia Jedi');
gettext('01-Aspirante-a-Cadete');
gettext('Rango de Aspirante a Cadete. Pre-academia Jedi');
gettext('02-Cadete');
gettext('Rango de Cadete. Primer curso');
gettext('03-Cadete-N1');
gettext('Rango de Cadete Nivel 1. Primer curso');
gettext('04-Cadete-N2');
gettext('Rango de Cadete Nivel 2. Primer curso');
gettext('05-Cadete-N3');
gettext('Rango de Cadete Nivel 3. Primer curso');
gettext('06-Aspirante-Padawan');
gettext('Rango de Aspirante a Padawan. Primer curso');
gettext('07-Aspirante-Padawan-N1');
gettext('Rango de Aspirante a Padawan Nivel 1. Primer curso');
gettext('08-Aspirante-Padawan-N2');
gettext('Rango de Aspirante a Padawan Nivel 2. Primer curso');
gettext('09-Aspirante-Padawan-N3');
gettext('Rango de Aspirante a Padawan Nivel 3. Primer curso');
gettext('10-Padawan');
gettext('Rango de Padawan. Segundo curso');
gettext('11-Padawan-N1');
gettext('Rango de Padawan Nivel 1. Segundo curso');
gettext('12-Padawan-N2');
gettext('Rango de Padawan Nivel 2. Segundo curso');
gettext('13-Padawan-N3');
gettext('Rango de Padawan Nivel 3. Segundo curso');
gettext('14-Aspirante-Jedi');
gettext('Rango de Aspirante a Jedi. Segundo curso');
gettext('15-Aspirante-Jedi-N1');
gettext('Rango de Aspirante a Jedi Nivel 1. Segundo curso');
gettext('16-Aspirante-Jedi-N2');
gettext('Rango de Aspirante a Jedi Nivel 2. Segundo curso');
gettext('17-Aspirante-Jedi-N3');
gettext('Rango de Aspirante a Jedi Nivel 3. Segundo curso');
gettext('18-Jedi');
gettext('Rango de Jedi. Tercer curso');
gettext('19-Jedi-N1');
gettext('Rango de Jedi Nivel 1. Tercer curso');
gettext('20-Jedi-N2');
gettext('Rango de Jedi Nivel 2. Tercer curso');
gettext('21-Jedi-N3');
gettext('Rango de Jedi Nivel 3. Tercer curso');
gettext('Smiley');
gettext('Stickers de Smiley');
gettext('caca');
gettext('Caca sonriente');
gettext('like');
gettext('Like');
gettext('pulsador-cambio');
gettext('Pulsador de cambio. Cada vez que se aprieta cambia de estado');
gettext('pulsador-tic-sound');
gettext('Pulsador de tics con sonido');
gettext('Detección de pulsación. Emite un tic cada vez que se aprieta el pulsador');
gettext('**Pulsador-tic**');
gettext('pulsador-tic');
gettext('comecocos');
gettext('Bloque de prueba para explicar conceptos. No hace nada');
gettext('Bloque de documentación, para explicar los  \nconceptos de puertos, parámeros, pines, cables  \ny buses en el tutorial 21');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('reg');
gettext('Registro de 2 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 2 bits');
gettext('reg');
gettext('Registro de 3 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 3 bits');
gettext('reg');
gettext('Registro de 4 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 4 bits');
gettext('reg');
gettext('Registro de 5 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 5 bits');
gettext('reg');
gettext('Registro de 6 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 6 bits');
gettext('reg');
gettext('Registro de 7 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 7 bits');
gettext('reg');
gettext('Registro de 8 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 8 bits');
gettext('sreg-r-load');
gettext('Registro de desplazamiento (derecha) de 8 bits');
gettext('sreg');
gettext('sreg-r-load');
gettext('Registro de desplazamiento (derecha) de 9 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 10 bits');
gettext('sreg-r-load');
gettext('Registro de desplazamiento (derecha) de 10 bits');
gettext('Tortuga-2');
gettext('Divisor entre dos');
gettext('Biestable T síncrono, inicializado a 0');
gettext('Biestable T síncrono, inicializado por parametro INI');
gettext('Biestable tipo D con entrada de enable, inicializado al parámetro INI');
gettext('Biestable D con inicialización paramétrica');
gettext('Generar un pulso de reloj al recibir un flanco por la entrada');
gettext('Biestable D inicializado a 0');
gettext('Delay flip-flop');
gettext('Tortuga: Divisor entre 2\n\nImplementado a partir de un\nbiestable T síncrono');
gettext('Hacer que solo responda a los flancos\nde subida de la señal de entrada');
gettext('blocks');
gettext('Serial-rx');
gettext('Receptor serie asíncrono. Velocidad por defecto: 115200 baudios');
gettext('Serial-tx');
gettext('Transmisor serie');
gettext('Serial-tx16');
gettext('Transmisor serie de 16 bits');
gettext('## Transmisor de 16 bits\n\nTransmitir un dato de 16 bits por el puerto serie. Primero el byte de mayor peso, y luego el menor  \n');
gettext('**Tic de star**');
gettext('**done**  \n(tic de fin)');
gettext('**BAUDIOS**');
gettext('**Dato**');
gettext('serial-tx-str');
gettext('Envío de una cadena por puerto serie');
gettext('**Transmisor**');
gettext('Serial-tx');
gettext('Transmisor serie (hecho a partir de bloques)');
gettext('Un simple cable pasivo, para organizar las conexiones complicadas');
gettext('Biestable De del sistema que hay que  \nañadir para cumplir las reglas de diseño  \nsíncrono: toda señal sacada al exterior,  \nespecialmente si es un cable de comunicaciones  \nasíncronas, debe pasar por un biestable');
gettext('Este Biestable desde  \nestar inicialmente  \na 1, ya que es el  \nvalor de reposo de la  \nlínea serie');
gettext('**Registro de**\n**Desplazamiento**');
gettext('Conversión de los datos serie a  \nparalelo, mediante un registro  \nde 9 bits. Inicialmente tiene todos  \nsus bits a 1, porque la línea está  \nen reposo');
gettext('**Biestable D**');
gettext('Evento: Comienzo de \ntransmisión');
gettext('Cargar el registro con  \nel dato a enviar en el  \narranque (0 -> 1)');
gettext('**Biestable RS**  \nEstado del transmisor');
gettext('0: Parado. Sin transmitir  \n1: Ocupado. Transmitiendo dato');
gettext('**Generador de**\n**Baudios**');
gettext('Contador de bits  \ntransmitidos');
gettext('El registro de desplazamiento  \nes de 9 bits, para almacenar  \nlos 8 bits de datos y  \nel bit de comienzo (start)');
gettext('Evento: Ultimo  \nbit enviado');
gettext('Al enviarse el último  \nbit, se cambia el estado  \na parado (reset)');
gettext('**Cable pasivo**  \nPara organizar el  \ncableado del reloj');
gettext('**Dato a transmitir**');
gettext('**Bit de Stop**');
gettext('**Bit de start**');
gettext('**Tic de transmisión**  \n¡Que comience la  \ntransmisión!');
gettext('**Línea serie**');
gettext('**Tic de terminación (done)**');
gettext('**Reloj del sistema**');
gettext('**BAUDIOS**\n');
gettext('El tic de terminación está un  \nperiodo de reloj retrasado para  \nque el transmisor pase al estado  \nParado, y que todo se reinicie  \nantes de que se pueda volve a  \nenviar el siguiente caracter');
gettext('El estado del transmisor  \nse saca por la señal  \nbusy');
gettext('Arrancar el generar de baudios  \nal activarse el transmisor');
gettext('Serial-tx16');
gettext('**Estado del transmisor**  \n0: Apagado  \n1: Funcionando');
gettext('Transmistor activado');
gettext('Generar tic  \ninicial');
gettext('**Biestable de**  \n**cambio**');
gettext('Indica qué byte  \nse envía');
gettext('Solo se deja pasar  \nel tic si el transmisor  \nestá habilitado');
gettext('Tic de transmisión');
gettext('Mux de selección  \ndel dato a enviar:  \nel de mayor peso o  \nel de menor');
gettext('**Dato de mayor peso**  \nSe envía el primero\n');
gettext('**Dato de menor peso**  \nSe envía el segundo');
gettext('Tic de siguiente carácter');
gettext('Se ha enviado el byte 2  \nTerminar: apagar el transmisor');
gettext('Al pasar de 0 a 1 es cuando  \nhemos enviado el segundo  \nbyte');
gettext('Enviar dato  \nde 16 bits');
gettext('serial-rx');
gettext('Receptor serie asíncrono. Implementación en bloques');
gettext('Bits series entrantes');
gettext('**Cable**  \nUn simple ccable, para  \norganizar mejor las  \nconexiones del reloj  ');
gettext('**Condición de arranque:**  \nLlega el bit de start  \nque es 0. Detectamos  \nel flanco de bajada');
gettext('**Estado receptor**  \n');
gettext('0: Esperando (apagado)  \n1: Recibiendo dato  ');
gettext('La recepción solo se habilita  \ncuando el receptor está  \nencendido');
gettext('**Generador de baudios**\nSe generan los tics  \npara leer los bits serie  \nque van llegando, a la  \nvelocidad configurada');
gettext('Cuando receptor apagado  \nel contador se deja en 0  ');
gettext('Evento:  \nleer un bit');
gettext('**Registro de desplazamiento**  \nRecibe los 8 bits del dato más  \nel bit de stop final en serie  \ny los saca en paralelo');
gettext('**Conntador de bits recibidos**  \nUna vez que llega el bit de start,  \nque es el que lo inicia todo,  se  \nespera recibir 8 bits de datos +  \nel bit de stop final: 9 bits ');
gettext('Bits a recibir');
gettext('Evento: se han recibido  \nlos 9 bits: FIN');
gettext('**Registro de datos**  \nContiene el dato final  \nrecibido, de 8 bits');
gettext('Capturar el dato  \nfinal');
gettext('Retrar el tic de dato  \nrecibido un periodo,  \npara que la señal de  \nbusy se ponga a 0');
gettext('**Tic de dato recibido**  \nNos indica que ha llegado  \nel dato y lo podemos leer');
gettext('**Dato recibido**');
gettext('**Línea serie**  \nPor aquí llegan los  \ndatos en serie');
gettext('Sincronizador: evitar los  \nproblemas de metaestabilidad');
gettext('Hemos terminado  \nApagar el receptor  \n(volver al estado inicial)');
gettext('serial-tx-srt32');
gettext('Envío de una cadena por puerto serie (max 32 caracteres)');
gettext('Seleccionar siguiente  \nbyte a enviar');
gettext('Tamaño de la  \ncadena');
gettext('Apuntar al siguiente  \ncaracter a enviar');
gettext('Condición de terminación  \nSe ha enviado el último carácter');
gettext('Meter la cadena a enviar,  \nen ASCII hexadecimal');
gettext('Emax-ES08A');
gettext('Futaba-3003');
gettext('TowerPro-SG90');
gettext('blocks');
gettext('ServoPWM-8bits');
gettext('Controlador de servos, de 8 bits. El periodo del PWM por defecto es de 20ms (Futaba 3003)');
gettext('**Salida PWM**');
gettext('Conectar directamente  \nal servo');
gettext('Posición del servo. Indica el  \nancho del pulso en unidades de  \n10 usec. Así, un valor de 60  \nindica una anchura de 600 usec');
gettext('Tic de escritura de  \nuna nueva posición');
gettext('Habilitación del servo');
gettext('ServoBit-90');
gettext('ServoBit para microservos EMAX ES08A. Controlador de 1 bit para mover el servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('ServoBit para microservos EMAX ES08A. Controlador de 1 bit para mover el servo a las 2 posiciones POS0 y POS1');
gettext('**Posición 1**: Posición del servo cuando  \nse introduce un 1\n\nEl valor por defecto es de 135 grados\n');
gettext('**Posición 0**: Posición del servo cuando  \nse introduce un 0\n\nEl valor por defecto es de 45 grados');
gettext('**Entrada**: posición a donde llevar  \nel servo (posición 0 ó 1)');
gettext('**Servobit paramétrico** para los microservos **EMAX-ES08A** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **580 usec**  \n* Extremo izquierdo **2550 usec**\n');
gettext('ServoBit');
gettext('Servobit-90');
gettext('ServoBit para Futaba 3003. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('ServoBit paramétrico para Futaba 3003. Controlador de 1 bit para mover el servo a las 2 posiciones P0 y P1');
gettext('**Servobit** para Servos Futaba 3003 o comaptibles\nLas dos posiciones están distanciadas **90 grados**  \n\n* **Posicion 0**: 45 grados  \n* **Posicion 1**: 135 grados  ');
gettext('**Servobit paramétrico** para los microservos **Futaba 3003** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **380 usec**  \n* Extremo izquierdo **2410 usec**\n');
gettext('Servobit');
gettext('Servobit-90');
gettext('ServoBit para micrservo TowerPro-SG90. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('**Servobit paramétrico** para los microservos **TowerPro SG-90** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **500 usec**  \n* Extremo izquierdo **2350 usec**\n');
gettext('Servobit');
gettext('ServoPWM-8bits');
gettext('Temporizador en unidades de 10 usec');
gettext('Temporizador  \nTiempo en unidades  \nde 10us');
gettext('Genera el ancho del  \npulso según el  \nvalor de delay que  \nindique el usuario');
gettext('**Registro posición**');
gettext('Almacena la posición actual  \ndel servo');
gettext('**Registro de**  \n**estado**');
gettext('0: Servo deshabilitado  \n1: Servo activado');
gettext('**Periodo del PWM**');
gettext('Por cada periodo nuevo se  \ngenera un pulso nuevo, de anchura  \nespecificada por su registro  \nde posición');
gettext('blocks');
gettext('timer-10usec');
gettext('timer-msec');
gettext('timer-sec');
gettext('Temporizador en segundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('**Parametro del timer**  \nSegundos a esperar');
gettext('timer-system');
gettext('Temporizador en tics. La señal p está activa durante los tics indicados. ov se emite un tic al finalizar');
gettext('timer-usec');
gettext('Temporizador en microsegundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('**Parametro del timer**  \nmicroseundos a esperar');
gettext('timer-10usec');
gettext('Almacenar el tiempo  \nde espera al arrancar');
gettext('**Registro de**  \n**espera**');
gettext('**Contador de**  \n**tiempo**');
gettext('Cada unidad de tiempo  \nson 10 usecs');
gettext('Contador en reset  \ncuando apagado');
gettext('¿Han transcurrido el tiempo  \nindicado por el registro  \nde espera?');
gettext('Ha transcurrido el tiempo indicado');
gettext('**Biestable**  \n**de estado**');
gettext('0: Apagado  \n1: Funcionando');
gettext('Icemove4');
gettext('Icemove4: Controlador de 4 movimientos para el Icebot');
gettext('# ICEmove4\n\nControlador para el [robot Icebot](https://github.com/Obijuan/icebot/wiki), que genera **4 movimientos**:  \nParado, giro derecha (arco), giro izquierda (arco) y adelante');
gettext('**Código del movimiento**');
gettext('**Motor de la rueda derecha**');
gettext('**Motor de la rueda izquierda**');
gettext('## Tabla de movimientos\n\n| Código de entrada | Movimiento del Robot   |\n|-------------------|------------------------|\n|  0                |  Parado                |\n|  1                |  Giro derecha (arco)   |\n|  2                |  Giro izquierda (arco) |\n|  3                |  Adelante              |');
gettext('**Entrada de reloj**');
gettext('Icemove9');
gettext('Icemove9: Controlador de 9 movimientos para el Icebot');
gettext('# ICEmove9\n\nControlador de 9 movimientos para el robot Icebot  \n(Entrada de 4 bits)');
gettext('## Tabla de movimientos\n\n| Código de entrada | Movimiento del Robot   |\n|-------------------|------------------------|\n|  0, 1, 2, 3       |  Parado                |\n|  4,6              |  Arco derecha          |\n|  5,7              |  Arco izquierda-atrás  |\n|  8,9              |  Arco derecha-atrás    |\n|  10,11            |  Arco izquierda        |\n|  12               |  Giro derecha          |\n|  13               |  Atrás                 |\n|  14               |  Adelante              |\n|  15               |  Giro izquierda        |');
gettext('0-Soluciones-Tutorial-29');
gettext('1-Ejemplos');
gettext('2-Ejercicios');
gettext('Sol-29-1');
gettext('# Solución ejercicio 29.1: (5 Bitpoints). Cinta trasportadora manual de LEDs \n\nSimulación de un **cinta transportadora** en los 8 LEDs de la placa. El avance de  \nla cinta se hace manualmente, mediante un **spiner**. Cada tic generado por el   \nspiner se usa para que los LEDs avancen una posición. El LED que sale por  \nel más significativo vueve a entrar por el menos significativo, en un bucle  \nespacial. Cada vez que hay un tic de avance se genera un sonido de 10ms  \n\nLa **cinta transportadora** se carga apretando un **pulsador externo**. Se enciende un** LED** para  \nindicar que hay un objeto nuevo que se introducirá en la cinta en el siguiente  \ntic de avance. Al entrar, el LED de carga se **apaga**. El objeto que ha entrado  \nse queda dentro de la cinta todo el rato. Se pueden introducir varios objetos\n\nSi la cinta se **para** durante más de **2 segundos**, se emitirá un tono diferente, de 1 segundo  \nde duración, para avisar de que está detenida');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=hFxit9fbsss) se muestra un ejemplo de funcionamiento.\n\n[![Click to see the youtube video](http://img.youtube.com/vi/hFxit9fbsss/0.jpg)](https://www.youtube.com/watch?v=hFxit9fbsss)');
gettext('**Botón de carga**');
gettext('**Spinner**');
gettext('**LED cargado**');
gettext('**Registro de**  \n**Desplazamiento**');
gettext('Los LEDs que salen vuelve a  \nentrar en la cinta  ');
gettext('tic de avance');
gettext('Sonido del tic de  \navance');
gettext('Detector de  \nparada');
gettext('Estado cinta:  \n0: parada  \n1: En movimiento  ');
gettext('Sonido cinta  \nparada');
gettext('Seleccionar el sonido de  \nla cinta en función de si  \nestá en movimiento o  \ndetenida');
gettext('Sol-29-2');
gettext('# Solución ejercicio 29.2: (5 Bitpoints). Servidor hardware para Arduino\n\nImplementar un circuito que dote a **Arduino** de **3 puertos de salida** de 4 bits.  \nEl **puerto 0** muestra los bits en los LED del 3 al 0. El **puerto 1** en los LEDs  \n7 -4, y el **puerto 2** en un **display de 7 Segmentos**. Estos puertos se  \nimplementarán mediante comunicaciones serie síncronas entre el **Arduino** y la **FPGA**.  \nDesde el Arduino se envían **comandos de 8 bits**, que tienen el siguiente **formato**:  \n\n* Los **4 bits menos significativos** contienen el **valor** a sacar por el puerto especificado  \n* Los **4 bits más significativos** indican el **puerto** por el que sacar la información  \n\n|Bits 7-4  | Comando | Descripción       |\n|----------|---------|-------------------|\n| 0000     |  0      |Acceso al puerto 0 |\n| 0001     |  1      |Acceso al puerto 1 |\n| 0010     |  2      |Acceso al puerto 2 |\n| resto    |  x      | Comando inválido  |\n\nSe usará un LED externo para indicar si el comando recibido es válido o no.  \nEn caso de recibirse uno erróneo, se enciende. Cuando se recibe uno correcto  \nse apaga. Se usa sólo como indicador y no se tomará ninguna acción cuando  \nel comando es erróneo.  \n\nEl **software del Arduino** implementará un **contador de segundos**, mostrando  \nen el display de 7 segmentos (puerto 2) los dígitos 0 - 9, uno cada segundok  \nAl pasar medio segundo, se encienden todos los LEDs del puerto 1, y se  \napagan los del puerto 2. Al trancurrir un segundo completo, se apagan los  \ndel puerto 1, se encienden los del 0 y se actualiza el dígito en el puerto 2  \n\nAntes de comenzar la cuenta, se enviará un **comando erróneo**, para comprobar que  \nel LED indicador se encience. Y se esperará 2 segundos antes de ejecutar el bucle  \nprincipal anterior\n\n\n');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=Gkg30RhCNuw) se muestra un ejemplo de funcionamiento.\n\n[![Click to see the youtube video](http://img.youtube.com/vi/Gkg30RhCNuw/0.jpg)](https://www.youtube.com/watch?v=Gkg30RhCNuw)');
gettext('### Conexiones entre Arduino UNO y Icezum Alhambra\n\n| Pin Arduino  |  Pin Alhambra | Descripción     |\n|--------------|---------------|-----------------|\n|  D12         |   D12         | Reloj           |\n|  D11         |   D11         | Dato <- Arduino |\n|  D10         |   D10         | Control         |\n|  GND         |   GND         | Masa            |');
gettext('## Código para arduino\n\nDescarga: [Sol-29-2.ino](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/raw/master/wiki/Tutorial-29/Arduino/Sol-29-2/Sol-29-2.ino)\n\n\n```c\nconst int LED = 13;  //-- LED de Arduino\nconst int CLK = 12;  //-- Pin de reloj\nconst int DAT = 11;  //-- Pin de Datos\nconst int CTRL = 10; //-- Pin de control\n\nvoid setup() {\n  pinMode(LED, OUTPUT);\n  pinMode(CLK, OUTPUT);\n  pinMode(DAT, OUTPUT);\n  pinMode(CTRL, OUTPUT);\n  digitalWrite(CTRL, LOW);\n  digitalWrite(LED, LOW);\n}\n\nvoid fpga_write(int value) {\n shiftOut(DAT, CLK, MSBFIRST, value);\n digitalWrite(CTRL, HIGH);\n digitalWrite(CTRL, LOW);\n}\n\nvoid fpga_port(byte portn, byte value)\n{\n  char buf[12];\n  byte cmd;\n  \n  //-- Crear el comando a partir del \n  //-- puerto y del valor\n  cmd = portn<<4 | (value&0x0F);\n\n  //-- Enviar el comando a la FPGA\n  fpga_write(cmd); \n  \n}\n\nvoid loop() {\n\n  //-- Enviar comando incorrecto\n  fpga_port(5, 0);\n  delay(2000);\n\n  //-- Bucle principale\n  while(1)\n\n   //-- En cada iteracion sacamos el digito i: 0-9\n   for (byte i=0; i<10; i++) {\n     fpga_port(0, 0xF);\n     fpga_port(1, 0);\n     fpga_port(2, i); //-- Display 7Seg\n     delay(500);\n     fpga_port(0, 0);\n     fpga_port(1, 0xF);\n     delay(500);\n   }\n}\n```');
gettext('**Registro de**  \n**desplazamiento**');
gettext('Entrada de datos');
gettext('evento:  \nbit recibido');
gettext('**Datos serie**  \n**de entrada**');
gettext('**Reloj**  \n**de entrada**');
gettext('**Sincronizador**  ');
gettext('Convertir flancos de  \nsubida a tics');
gettext('**Registro de**  \n**datos**');
gettext('evento:  \ndato recibido');
gettext('**Control: **  \nCaptura del dato');
gettext('Separar el comando en sus dos campos:  \n* Número de puerto  \n* Dato a sacar por el puerto');
gettext('**Display de 7**  \n**segmentos**');
gettext('Numero de  \npuerto');
gettext('Es el puerto 2');
gettext('Recibido comando de  \nescritura en puerto 2');
gettext('**Registro de**  \n**datos del puerto 2** ');
gettext('**Registro de**  \n**datos del puerto 0** ');
gettext('Es el puerto 0');
gettext('Recibido comando de  \nescritura en puerto 0');
gettext('El comando  \nes válido');
gettext('**Estado del comando**  \nrecibido:  \n');
gettext('0: Incorrecto  \n1: Correcto');
gettext('Si el comando es  \nincorrecto se  \nenciende el LED');
gettext('Es el puerto 1');
gettext('Recibido comando de  \nescritura en puerto 1');
gettext('**Registro de**  \n**datos del puerto 1** ');
gettext('Sol-29-3');
gettext('# Solución ejercicio 29.3: (5 Bitpoints). Puerto de entrada y salida en Arduino\n\nImplementar un **puerto de entrada** y de** salida** adicionales para **Arduin**o, mediante **comunicaciones serie síncronas**  \nEl puerto de **entrada** debe estar conectado a un** contador de 8 bits** que cuenta las pasadas que da un **spiner**  \n(las veces que se interrumpe el haz de infrarrojos). Este spiner está simulando un encoder  \nCada vez que el Arduino realice una lectura de este puerto, se le devolverá el valor de este contador  \nEl **puerto de salida** está conectado al **display de 7 segmentos**. Sólo se usarán los **4 bits de menor peso**  \nEl **programa principal de Arduino** deberá leer el **valor del encoder** y mostrar su valor en la **consola serie**.  \nAdemás, deberá sacar por el display de 7 segmentos el dígito decimal (0-9) correspoindinete a la lectura  \ndel enconder. Así, si la cuenta del encoder va por 157, en el display se muestra el dígito 7  \n(Esto hay que hacerlo mediante código en Arduino. Es fácil de hacer con la instrucción sprintf y formato %03d  \n(que almacena un número rellenando con 0s los digitos no usados de mayor peso. Así el dígito de menor peso  \nesta siempre en la posicion 2 del array: cad[2])');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=uGArKWjpHUk) se muestra un ejemplo de funcionamiento.\n\n[![Click to see the youtube video](http://img.youtube.com/vi/uGArKWjpHUk/0.jpg)](https://www.youtube.com/watch?v=uGArKWjpHUk)');
gettext('evento:  \ncapturar dato');
gettext('evento:  \nenviar bit');
gettext('### Conexiones entre Arduino UNO y Icezum Alhambra\n\n| Pin Arduino  |  Pin Alhambra | Descripción     |\n|--------------|---------------|-----------------|\n|  D12         |   D12         | Reloj           |\n|  D11         |   D11         | Dato <- Arduino |\n|  D10         |   D10         | Control         |\n|  D9          |   D9          | Dato -> Arduino |\n|  GND         |   GND         | Masa            |');
gettext('**Sonido spiner**');
gettext('**Contador spiner**  ');
gettext('**Puerto de Entrada**  \ndel Arduino');
gettext('**Datos **  \nSalida del arduino');
gettext('**Puerto de Salida**  del Arduino');
gettext('**Registro de datos**');
gettext('## Código para arduino\n\nDescarga: [Sol-29-3.ino](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/raw/master/wiki/Tutorial-29/Arduino/Sol-29-3/Sol-29-3.ino)\n\n\n```c\nconst int LED = 13;\nconst int CLK = 12;    //-- Pin de reloj\nconst int DATout = 11; //-- Pin de Datos serie de salida\nconst int DATin = 9;   //-- Pin de Datos serie de entrada\nconst int CTRL = 10;   //-- Pin de control\n\nvoid setup() {\n  pinMode(LED, OUTPUT);\n  pinMode(CLK, OUTPUT);\n  pinMode(DATin, INPUT);\n  pinMode(DATout, OUTPUT);\n  pinMode(CTRL, OUTPUT);\n  digitalWrite(CTRL, LOW);\n  digitalWrite(CLK, LOW);\n  digitalWrite(LED,LOW);\n  Serial.begin(9600);\n}\n\nbyte fpga_read() {\n  byte c;\n\n  //-- Indicar a la FPGA que capture el dato\n  digitalWrite(CTRL, HIGH);\n  digitalWrite(CTRL, LOW);\n\n  //-- Recibir el dato\n  c =  shiftIn(DATin, CLK, MSBFIRST);\n  return c;\n}\n\nvoid fpga_write(int value) {\n shiftOut(DATout, CLK, MSBFIRST, value);\n digitalWrite(CTRL, HIGH);\n digitalWrite(CTRL, LOW);\n}\n\nvoid loop() {\n  byte dat;\n  byte old = 0xff;\n  char buf[10];\n\n  //-- Leer el puerto constantemente\n  while(1) {\n\n    //-- Leer dato de la FPGA\n    dat = fpga_read();\n\n    //-- Si ha habido un cambio desde la última\n    //-- lectura, mostrarlo en la consola\n    if (dat != old) {\n      Serial.print(dat);\n      Serial.print(\"\\n\");\n    }  \n\n    //-- Almacenar dato leido para saber\n    //-- si hay cambios\n    old = dat;  \n\n    //-- Sacar el dato por el display de 7 segmentos del puerto\n    //-- de salida\n    sprintf(buf, \"%03d\\n\", dat);\n    fpga_write(buf[2]);\n  }\n}\n\n```');
gettext('01-transmisor');
gettext('02-receptor');
gettext('03-Aplicaciones');
gettext('01-Comprobacion-senales');
gettext('**Hacer eco a nivel físico**  \nSe tira un cable para unir RX  \ncon TX, de manera que todo lo  \nrecibido se envía de vuelta  \nsin procesarlo');
gettext('**Señales de control de entrada**  \nSe sacan por los LEDS');
gettext('**Señales de control de salida**  \nAl apretar los pusladores SW1 y SW2  \nse activan las señales de control  :\n\n* **SW2**: DCD\n* **SW1**: DSR\n* **SW1** y **SW2**: CTS');
gettext('**Decodificador**  \n**de 2 a 4**');
gettext('## Ejemplo 1: Comprobación de señales a nivel físico\n\nComprobar que todas las señales, de datos y control están operativas  \nAbrir un terminal de comunicaciones. Cualquier dato enviado  \nse obtendrá de vuelta (eco). Al apretar los pulsadores veremos  \nque las señales CTS, DCD y DSR cambian. Al modificar las señales  \nDTR y RTS desde el terminal los LEDs 7 y 0 se modificarán');
gettext('02-tx-char');
gettext('## Ejemplo 2: Enviando un carácter al apretar un botón\n\nCada vez que se aprieta el **pulsador SW1** se **envía** el carácter **\"A\"** por  \nel **puerto serie**, a la velocidad de **115200 baudios**.  Además, se  \ngenera un **pulso de 100ms** de anchura para **encender** el **LED0** cada vez  \nque se haya enviado el carácter');
gettext('**Carácter a enviar**');
gettext('**Pulsador de envío**');
gettext('tic de  \ntransmisión');
gettext('Línea serie que llega al \nPC por su pin RX');
gettext('Tic de dato  \nenviado');
gettext('Emitir un pulso de 100ms  \npara encender el led  \ncada vez que se ha enviado  \nun dato');
gettext('Temporizador');
gettext('03-tx-number');
gettext('## Ejemplo 3: Enviando un número en binario\n\nSe introduce un número en binario de **3 bits** por los interruptores  \nexternos. Al apretar la **tecla \"ENTER\"** este número se captura en un  \n**registro** para mostrarse en un **display de 7 segmentos** y se envía al PC  \npor el **puerto serie**\n');
gettext('Tecla \"ENTER\"');
gettext('**Registro de \n3 bits**');
gettext('**Número a**  \n**enviar**');
gettext('Rellenar los 5 bits más  \nsignificativos con 0s');
gettext('04-TX-BCD-ASCII');
gettext('## Ejemplo 4: Conversión de BCD a ASCII\n\nContar las veces que atraviesa el spiner el sensor  \nde IR. Mostrarlo en el display de 7 segmentos y  \nenviar el valor del dígito menos significativo como  \nun carácter ASCII, para que se pueda ver en los  \nterminales serie de caracteres (como el de Arduino)');
gettext('Emitir un flash en el LED  \ncada vez que se ha enviado  \nun carácter por el puerto  \nserie');
gettext('Retrasar el tic, para que no  \nse envíe el 0 la primera vez');
gettext('Conversor de numero binario  \nde 4 bits a dígito ASCII,  \npara visualizarlo en un  \nterminal serie de texto');
gettext('Movimiento brazo  \ndel spiner');
gettext('05-1-Transmisor-16bits');
gettext('## Ejemplo 5-1: Transmisor de 16 bits\n\nPara transmitir un dato de 16 bits, hay que hacerlo en **dos envíos de 8 bits**. En este ejemplo enviamos  \ndos caracteres, la **J** y **A**.  Primero enviamos el byte más significativo, y luego el menor  \nCada vez que se apriete el botón se envían los dos caracteres');
gettext('Pulsador de tics  \ncon sonido');
gettext('05-2-Transmisor-16bits');
gettext('## Ejemplo 5-2: Transmisor de 16 bits\n\nEjemplo de uso del bloque transmisor de 16 bits  \nMediante un switch se selecciona el dato a enviar  \nCada dato son 2 caracteres. En una posición se envía  \nel valor 0x2D3E, que se corresponde con ->  \ny en la otra posición se envía una A y una línea nueva');
gettext('Selección del dato de  \n16 bits a enviar');
gettext('**Dato 0**');
gettext('**Dato 1**');
gettext('06-1-Tx-string');
gettext('## Ejemplo 6-1: Transmisión de una cadena de caracteres\n\ncircuito que envía la cadena \"HOLA:)\\n\" por el puerto serie  \nLa cadena se almacena en la tabla y es necesario indicar su  \ntamaño en el parámetro del contador\n');
gettext('Tic de envío  \nde cadena');
gettext('06-2-Tx-string-bloque');
gettext('## Ejemplo 6-2: Transmisión de una cadena de caracteres\n\nEjemplo de uso del bloque **serial-tx-str**, para enviar una cadena por el puerto serie  \nLa cadena que se envía es de 35 bytes: \"Las FPGAs libres molan mucho!! :-)\"  \nSe envía cada vez que se aprieta el pulsador. Se emite un flash en el LED al  \nfinalizar\n');
gettext('Tic de cadena  \nenviada');
gettext('Emitir un flash en el LED  \ncada vez que se ha enviado  \nla cadena');
gettext('06-3-Tx-string-fichero');
gettext('**Parámetro**  \nFichero con los datos de  \nla cadena a enviar');
gettext('Otras formas de introducir la cadena en  \nla memoria, para su envío. Son equivalentes');
gettext('## Ejemplo 6-3: Transmisión de una cadena de caracteres definida en un fichero\n\nMismo ejemplo que el 6-2, pero ahora la cadena se carga del **fichero \"cad.list\"**  \nque debe estar en el mismo directorio que el circuito de icestudio (.ice)  \nSe han añadido bloques con las otras posibles formas de introducir las cadenas\n');
gettext('07-tx-medicion');
gettext('## Ejemplo 7: Midiendo la transmisión\n\nPara comprobar que el transmisor funciona correctamente, y que todas  \nlas señales se comportan como deben, usamos un analizador lógico  \npara visualizar 4 señales: txmit, TX, busy y done, que se conectan a los  \ncanales del 1 al 4 del analizador');
gettext('**Analizador**');
gettext('08-rx-leds-7seg');
gettext('Tic de dato  \nrecibido');
gettext('Emitir un **flash** en el LED al recibir un dato');
gettext('Emitir un **pitido** al recibir un dato');
gettext('Quedarse con los 4 bits de  \nmenor peso para mostrar en  \nel display');
gettext('Mostrar el dato recibido  \nen los LEDs, en binario');
gettext('## Ejemplo 8: Recibiendo datos del PC\n\nCircuito que recibe datos serie del PC. Cada vez que  \nllega uno lo muestra en binario en los LEDs, y los  \n4 bits menos significativos los muestra en hexadecimal  \nen un display de 7 segmentos\n\nAdemás, con cada dato recibido se emite un flash en  \nel LED y un pitido en el zumbador');
gettext('**Receptor**  \n**serie**');
gettext('**Línea serie**  \n**de entrada**');
gettext('09-rx-contador');
gettext('Emitir un **flash** y un    \npitido al recibir un dato');
gettext('## Ejemplo 9: Contador de datos recibidos\n\nCada vez que se **recibe un dato** por el puerto serie, se  \n**incrementa un contador** módulo 10, que se muestra su  \nvalor en decimal en un **display de 7 segmentos**.  Cuenta,  \npor tanto, de 0 a 9 y vuelve a comenzar  \nCuando se recibe el **carácter \"r\"** (minúscula), se hace  \nun **reset del contador**');
gettext('**Contador de 0-9**');
gettext('Comando de Reset');
gettext('Contador de caracteres  \nrecibidos');
gettext('¿Es el comando  \nde reset?');
gettext('10-rx-servobit');
gettext('## Ejemplo 10: Control de un servo con dos teclas\n\nUn servo Futaba 3003 se mueve a una posición al apretarse la  \ntecla 1, y a otra al pulsar la tecla 2');
gettext('Tecla pulsada');
gettext('¿Es la tecla 1?');
gettext('¿Es la tecla 2?');
gettext('Estado del servo:  \nen una posición o en otra  ');
gettext('Servo a  \nposición 1');
gettext('Servo a  \nposición 0');
gettext('11-rx-servo');
gettext('## Ejemplo 11: Control de un servo a cualquier posición\n\nDesde el PC se envían las posiciones de 8 bits a las que mover  \nel servo. Adicionalmente, con el comando \"d\" se deshabilita  \nel servo, y con el comando \"e\" se habilita');
gettext('Posición del servo');
gettext('**Controlador**  \n**del servo**');
gettext('tic de posición  \nrecibida');
gettext('**Comando enable**  \nHabilitar servo');
gettext('**Comando disable**  \nDeshabilitar servo');
gettext('Comando  \ndetectado');
gettext('Si es un comando  \nno se escribe en  \nel servo');
gettext('Estado del servo:  \n0: Deshabilitado  \n1: Habilitado');
gettext('Mostrar el estado  \ndel servo en un LED');
gettext('Es comando de  \ndisable');
gettext('Es comando de  \nenable');
gettext('12-rx-medicion');
gettext('## Ejemplo 12: Midiendo el receptor\n\nUsamos el analizador lógico para comprobar  \nque las señales de receptor se comportan  \ncomo se espera');
gettext('13-rx-tx-eco');
gettext('**Receptor serie**');
gettext('El dato recibido se  \nmuestra por los LEDS  ');
gettext('**Transmisor serie**');
gettext('El mismo dato recibido se  \nvuelve a enviar al transmisor');
gettext('Evento: Dato recibido');
gettext('## Ejemplo 13: Eco\n\nTodos los caracteres recibidos se vuelven  \na enviar. Además se sacan por los LEDs, y  \nse emite un parpadeo en el LED y un pitido  \nen el zumbador');
gettext('14-rx-tx-mini-cifrador');
gettext('## Ejemplo 14: Mini-cifrador\n\nSegún el estado del interruptor externo,  \nlos datos recibidos por el puerto serie  \nse cifran, o no, y se vuelve a enviar  \nde vuelta al PC. El cifrado usado es  \nmuy básico: se intercambian los bits 0 y 1,  \ny los 2 y 3\n');
gettext('Cifrar: Cambiar las posiciones de los 4 bits  \nmenos significativos');
gettext('Carácter sin cifrar');
gettext('Se envía el dato cifrado  \no no, según la posición  \ndel interruptor externo');
gettext('15-FPGA-Arduino');
gettext('## Ejemplo 15: Conexión Arduino-FPGA\n\nAplicación 1 del puerto serie: Conexión entre Arduino y FPGA  \nEste \"servidor\" hardware implementa dos servicios:\n\n* Incremento del contador: comando \"i\"\n* Lectura del interruptor: Comando \"r\"\n\nCuando se recibe el comando i se incrementa el contador, se  \nemite un pitido y un flash en el LED. El valor del contador  \nse muestra en el display de 7 segmentos\n\nCuando se recibe el comando \"r\" se envían los dígitos '0' ó '1'  \n(ASCII) según el estado del interruptor');
gettext('Interruptor a leer  \nmediante el comando \"r\"');
gettext('Mostrar el estado del  \ninterruptor en el LED');
gettext('Convertir el valor del interruptor a su  \ndígito ASCII: '0' ó '1'. Simplemente se  \ncoloca el interruptor en el bit 0, se  \nañade el dígito 3 en los 4 bits superior  \ny el resto de bits se ponen a 0');
gettext('**Trasmisor serie**');
gettext('Enviar la respuesta al  \nArduino');
gettext('Comando \"r\"  \nrecibido');
gettext('Emitir pitido en  \nzumbador y flash  \nen LED');
gettext('Comando 'i'  \nrecibido');
gettext('¿Es el comando r?');
gettext('¿Es el comando i?');
gettext('18-bluetooth-eco');
gettext('## Ejemplo 18: Eco\n\nEjemplo del Eco adaptado al módulo HC-05');
gettext('Datos que llegan del pin TX  \ndel módulo HC-05');
gettext('Datos que van al pin RX  \ndel módulo HC-05');
gettext('19-bluetooth-servo-blueterm');
gettext('## Ejemplo 19: Control de un servo a cualquier posición\n\nMismo ejemplo que el 11, pero adaptado para enviar los caracteres desde el móvil  \ncon BlueTerm. Se usa el módulo HC-05 (bluetooth-serie)');
gettext('20-bluetooth-servobit-app');
gettext('## Ejemplo 20: Control de un servo con dos teclas\n\nCuando se envía el dígito '1' el servo va a un posición, y con  \n'0' a otra. Así se puede controlar desde la APP:  \nArduino-Bluetooth-Basic');
gettext('¿Es el dígito 1?');
gettext('¿Es el digito 0?');
gettext('Ejercicio-30-1');
gettext('**Entregar**:\n\n  -1 Pantallazo del circuito\n  \n  -1 Vídeo del funcionamiento\n  \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube. El vídeo puede estar en youtube o directamente en el tuit/post\n  ');
gettext('**GITHUB**:\n\n  Entrega **obligatoria por Github** (sólo pantallazo, el vídeo\n  no hace falta, para que no ocupe tanto espacio)');
gettext('## Ejercicio 30.1: (5 Bitpoints). Transmisión de dos cadenas\n\nDiseñar un circuito digital que transmita **dos cadenas** por el **puerto serie** en función  \nde un **interruptor de selección**. El final de las cadenas se determina por el **número 0**  \n(0x00), en vez de por su tamaño (como hemos hecho en los ejemplos). Es decir, que el  \ncircuito envía caracteres por el puerto serie hasta que detecta un 0. En ese momento  \npara\n\nLas dos cadenas deben estar almacenadas en **dos ficheros**: **msg0.list** y **msg1.list**.  La  \n**logitud máxima** de estas cadenas es de **64 bytes** (necesario para dimensionar las  \ntablas)\n\nLa cadena se envía cuando se aprieta un **pulsador**. Además se emite un **parpadeo** en un  \n**LED** cuando se haya terminado de enviar la cadena\n\n**Sugerencia**. Para implementar este circuito se propone lo siguiente:\n\n1. Basarse en el [ejemplo 6-1](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/wiki/V%C3%ADdeo-30:-Puerto-serie#ejemplo-6-1-enviando-una-cadena)\n2. Hacer primero un circuito que imprima una cadena acabada en 0  \n3. Modificar el circuito para enviar 2 cadenas, cada una en una memoria, en  \nfunción del selecctor\n4. Hacer la lectura desde fichero');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=7mN4jco22rE) se muestra un ejemplo de funcionamiento.\n\n[![Click to see the youtube video](http://img.youtube.com/vi/7mN4jco22rE/0.jpg)](https://www.youtube.com/watch?v=7mN4jco22rE)');
gettext('Ejercicio-30-2');
gettext('## Ejercicio 30.2: (5 Bitpoints). Contador de pasadas del spiner\n\n\nDiseñar un circuito para **contar** las pasadas que da un **spiner**  \nsobre un **sensor de infrarrojos** y enviar el valor del **contador**  \npor el puerto serie.  La cuenta será de **00 a 99**, y cuando  \nalcance el final volverá a comenzar. Con cada paso de un  \nbrazo del spiner por el IR se envía el valor\n\nEl dato enviado consta de los **dos dígitos** (unidades y decenas)  \ny un **fin de linea** (\\n)\n\n**Sugerencia**. Basarse en el [ejemplo 6-1](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/wiki/V%C3%ADdeo-30:-Puerto-serie#ejemplo-6-1-enviando-una-cadena). Por cada tic  \ndel IR hay que enviar 3 caracteres: Las decenas, las unidades y el fin de línea.  \nEn vez de almacenar la información en la memoria, los datos a enviar provienen de  \nun multiplexor, conectado a los contadores de unidades y decenas y a la constalte  \nde salto de línea\n');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=WtYEhqFWQLo) se muestra un ejemplo de funcionamiento.\n\n[![Click to see the youtube video](http://img.youtube.com/vi/WtYEhqFWQLo/0.jpg)](https://www.youtube.com/watch?v=WtYEhqFWQLo)');
gettext('Ejercicio-30-3');
gettext('## Ejercicio 30.3: (5 Bitpoints). Control de franky por puerto serie\n\nDiseñar un circuito para controlar a **Franky** a través del puerto serie. Hay tres  \ncomandos de posición: **q**,**w** y **e** que hacen que los ojos de franky apunten en tres  \ndirecciones: izquierda, centro y derecha (Para servos futaba estas posiciones son 0x3C,  \n0xE1 y 0x80)\n\nMediante la **barra espaciadora** activamos el **modo de disparo**, haciendo parpadear sus  \nojos a la frecuencia de **10Hz** y emitiendo pitidos cortos de **1Khz** con una cadencia  \nde **10Hz**. Si mientras está disparando apretamos nuevamente la barra espaciadora dejará de  \nhacerlo.  \n\nAdicionalmente, cada vez que se reciba un **comando correcto** (q,w,e ó espcio) enviará la  \ncadena **OK** seguida del carácter de fin de línea (\\n) por el puerto serie\n');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=5q0N9-9sqp4) se muestra un ejemplo de funcionamiento.\n\n[![Click to see the youtube video](http://img.youtube.com/vi/5q0N9-9sqp4/0.jpg)](https://www.youtube.com/watch?v=5q0N9-9sqp4)');
