// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Comb');
gettext('Const');
gettext('Varios');
gettext('Codificadores');
gettext('Decodificadores');
gettext('Demux');
gettext('Mux');
gettext('Puertas');
gettext('Tablas');
gettext('cod-2-1');
gettext('Codificador de 2 a 1. La salida zero se activa cuando ninguna entrada está activada');
gettext('cod-4-2-bus');
gettext('Codificador de 4 a 2, con prioridad. La salida zero se activa cuando ninguna entrada está activad. Entradas y salidas de buses');
gettext('cod-4-2');
gettext('Codificador de 4 a 2, con prioridad. La salida zero se activa cuando ninguna entrada está activad');
gettext('7Seg');
gettext('decod-1-2');
gettext('Decodificador de 1 a 2');
gettext('decod-2-4-bus');
gettext('Decodificador de 2 a 4, con salida en bus');
gettext('decod-2-4');
gettext('Decodificador de 2 a 4');
gettext('decod-3-8');
gettext('Decodificador de 3 a 8');
gettext('Anodo-comun');
gettext('Catodo-comun');
gettext('displayBit');
gettext('DisplayBit. Decodificador de 1 bit a 7 segmentos. Ánodo común');
gettext('displayBit2');
gettext('DisplayBit2. Decodificador de 2 bits a 7 segmentos. Ánodo común');
gettext('displayBit3');
gettext('DisplayBit3. Decodificador de 3 bits a 7 segmentos. Ánodo común');
gettext('displayDEC');
gettext('DisplayDEC. Decodificador BCD a 7 segmentos. Ánodo común');
gettext('displayHEX');
gettext('DisplayHEX. Decodificador de binario a hexadecimal-7 segmentos. Ánodo común');
gettext('displayBit');
gettext('DisplayBit. Decodificador de 1 bit a 7 segmentos. Cátodo común');
gettext('displayBit2');
gettext('DisplayBit2. Decodificador de 2 bits a 7 segmentos. Cátodo común');
gettext('displayBit3');
gettext('DisplayBit3. Decodificador de 3 bits a 7 segmentos. Cátodo común');
gettext('displayDEC');
gettext('DisplayDEC. Decodificador BCD a 7 segmentos. Cátodo común');
gettext('displayHEX');
gettext('DisplayHEX. Decodificador de binario a hexadecimal-7 segmentos. Cátodo común');
gettext('1-Bit');
gettext('Demux-1-2');
gettext('Demultiplexor de 1 bit, de 1 a 2');
gettext('Demux-2-4');
gettext('Demultiplexor de 1 bit, de 2 a 4');
gettext('1-Bit');
gettext('2-Bits');
gettext('24-Bits');
gettext('3-Bits');
gettext('4-Bits');
gettext('5-Bits');
gettext('7-Bit');
gettext('8-Bit');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1');
gettext('Mux-2-1');
gettext('Mux-4-1-flip');
gettext('Multiplexor de 4 a 1. Implementado en verilog');
gettext('Mux-4-1');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1 de 2 bits');
gettext('Mux-2-1');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 2 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 24 bits');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1 de 3 bits');
gettext('Mux-2-1');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 3 bits');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1 de 4 bits');
gettext('Mux-2-1');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 4 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 5 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 7 bits');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1 de 8 bits');
gettext('Mux-2-1');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 8 bits');
gettext('04-bits');
gettext('Bus');
gettext('and');
gettext('Puerta AND');
gettext('and3');
gettext('Puerta AND de 3 entradas');
gettext('nand');
gettext('Puerta NAND');
gettext('nor');
gettext('Puerta NOR');
gettext('not');
gettext('Puerta NOT');
gettext('or');
gettext('Puerta OR');
gettext('or4');
gettext('Puerta OR de 4 entradas');
gettext('xnor');
gettext('Puerta XNOR');
gettext('xor');
gettext('Puerta XOR');
gettext('not');
gettext('Puerta NOT para bus de 4 bits');
gettext('tablas_bin');
gettext('tablas_hex');
gettext('1bit_entrada');
gettext('2bit_entrada');
gettext('3bit_entrada');
gettext('4bit_entrada');
gettext('5bit_entrada');
gettext('6bit_entrada');
gettext('7bit_entrada');
gettext('8bit_entrada');
gettext('tabla-bin-1-1');
gettext('Circuito combinacional de 1 entradas y 1 salidas');
gettext('tabla-bin-1-2');
gettext('Circuito combinacional de 1 entradas y 2 salidas');
gettext('tabla-bin-1-3');
gettext('Circuito combinacional de 1 entradas y 3 salidas');
gettext('tabla-bin-1-4');
gettext('Circuito combinacional de 1 entradas y 4 salidas');
gettext('tabla-bin-1-5');
gettext('Circuito combinacional de 1 entradas y 5 salidas');
gettext('tabla-bin-1-6');
gettext('Circuito combinacional de 1 entradas y 6 salidas');
gettext('tabla-bin-1-7');
gettext('Circuito combinacional de 1 entradas y 7 salidas');
gettext('tabla-bin-1-8');
gettext('Circuito combinacional de 1 entradas y 8 salidas');
gettext('tabla-bin-2-1');
gettext('Circuito combinacional de 2 entradas y 1 salidas');
gettext('tabla-bin-2-2');
gettext('Circuito combinacional de 2 entradas y 2 salidas');
gettext('tabla-bin-2-3');
gettext('Circuito combinacional de 2 entradas y 3 salidas');
gettext('tabla-bin-2-4');
gettext('Circuito combinacional de 2 entradas y 4 salidas');
gettext('tabla-bin-2-5');
gettext('Circuito combinacional de 2 entradas y 5 salidas');
gettext('tabla-bin-2-6');
gettext('Circuito combinacional de 2 entradas y 6 salidas');
gettext('tabla-bin-2-7');
gettext('Circuito combinacional de 2 entradas y 7 salidas');
gettext('tabla-bin-2-8');
gettext('Circuito combinacional de 2 entradas y 8 salidas');
gettext('tabla-bin-3-1');
gettext('Circuito combinacional de 3 entradas y 1 salidas');
gettext('tabla-bin-3-2');
gettext('Circuito combinacional de 3 entradas y 2 salidas');
gettext('tabla-bin-3-3');
gettext('Circuito combinacional de 3 entradas y 3 salidas');
gettext('tabla-bin-3-4');
gettext('Circuito combinacional de 3 entradas y 4 salidas');
gettext('tabla-bin-3-5');
gettext('Circuito combinacional de 3 entradas y 5 salidas');
gettext('tabla-bin-3-6');
gettext('Circuito combinacional de 3 entradas y 6 salidas');
gettext('tabla-bin-3-7');
gettext('Circuito combinacional de 3 entradas y 7 salidas');
gettext('tabla-bin-3-8');
gettext('Circuito combinacional de 3 entradas y 8 salidas');
gettext('tabla-bin-4-1');
gettext('Circuito combinacional de 4 entradas y 1 salidas');
gettext('tabla-bin-4-2');
gettext('Circuito combinacional de 4 entradas y 2 salidas');
gettext('tabla-bin-4-3');
gettext('Circuito combinacional de 4 entradas y 3 salidas');
gettext('tabla-bin-4-4');
gettext('Circuito combinacional de 4 entradas y 4 salidas');
gettext('tabla-bin-4-5');
gettext('Circuito combinacional de 4 entradas y 5 salidas');
gettext('tabla-bin-4-6');
gettext('Circuito combinacional de 4 entradas y 6 salidas');
gettext('tabla-bin-4-7');
gettext('Circuito combinacional de 4 entradas y 7 salidas');
gettext('tabla-bin-4-8');
gettext('Circuito combinacional de 4 entradas y 8 salidas');
gettext('tabla-bin-5-1');
gettext('Circuito combinacional de 5 entradas y 1 salidas');
gettext('tabla-bin-5-2');
gettext('Circuito combinacional de 5 entradas y 2 salidas');
gettext('tabla-bin-5-3');
gettext('Circuito combinacional de 5 entradas y 3 salidas');
gettext('tabla-bin-5-4');
gettext('Circuito combinacional de 5 entradas y 4 salidas');
gettext('tabla-bin-5-5');
gettext('Circuito combinacional de 5 entradas y 5 salidas');
gettext('tabla-bin-5-6');
gettext('Circuito combinacional de 5 entradas y 6 salidas');
gettext('tabla-bin-5-7');
gettext('Circuito combinacional de 5 entradas y 7 salidas');
gettext('tabla-bin-5-8');
gettext('Circuito combinacional de 5 entradas y 8 salidas');
gettext('tabla-bin-6-1');
gettext('Circuito combinacional de 6 entradas y 1 salidas');
gettext('tabla-bin-6-2');
gettext('Circuito combinacional de 6 entradas y 2 salidas');
gettext('tabla-bin-6-3');
gettext('Circuito combinacional de 6 entradas y 3 salidas');
gettext('tabla-bin-6-4');
gettext('Circuito combinacional de 6 entradas y 4 salidas');
gettext('tabla-bin-6-5');
gettext('Circuito combinacional de 6 entradas y 5 salidas');
gettext('tabla-bin-6-6');
gettext('Circuito combinacional de 6 entradas y 6 salidas');
gettext('tabla-bin-6-7');
gettext('Circuito combinacional de 6 entradas y 7 salidas');
gettext('tabla-bin-6-8');
gettext('Circuito combinacional de 6 entradas y 8 salidas');
gettext('tabla-bin-7-1');
gettext('Circuito combinacional de 7 entradas y 1 salidas');
gettext('tabla-bin-7-2');
gettext('Circuito combinacional de 7 entradas y 2 salidas');
gettext('tabla-bin-7-3');
gettext('Circuito combinacional de 7 entradas y 3 salidas');
gettext('tabla-bin-7-4');
gettext('Circuito combinacional de 7 entradas y 4 salidas');
gettext('tabla-bin-7-5');
gettext('Circuito combinacional de 7 entradas y 5 salidas');
gettext('tabla-bin-7-6');
gettext('Circuito combinacional de 7 entradas y 6 salidas');
gettext('tabla-bin-7-7');
gettext('Circuito combinacional de 7 entradas y 7 salidas');
gettext('tabla-bin-7-8');
gettext('Circuito combinacional de 7 entradas y 8 salidas');
gettext('tabla-bin-8-1');
gettext('Circuito combinacional de 8 entradas y 1 salidas');
gettext('tabla-bin-8-2');
gettext('Circuito combinacional de 8 entradas y 2 salidas');
gettext('tabla-bin-8-3');
gettext('Circuito combinacional de 8 entradas y 3 salidas');
gettext('tabla-bin-8-4');
gettext('Circuito combinacional de 8 entradas y 4 salidas');
gettext('tabla-bin-8-5');
gettext('Circuito combinacional de 8 entradas y 5 salidas');
gettext('tabla-bin-8-6');
gettext('Circuito combinacional de 8 entradas y 6 salidas');
gettext('tabla-bin-8-7');
gettext('Circuito combinacional de 8 entradas y 7 salidas');
gettext('tabla-bin-8-8');
gettext('Circuito combinacional de 8 entradas y 8 salidas');
gettext('1bit_entrada');
gettext('2bit_entrada');
gettext('3bit_entrada');
gettext('4bit_entrada');
gettext('5bit_entrada');
gettext('6bit_entrada');
gettext('7bit_entrada');
gettext('8bit_entrada');
gettext('tabla-hex-1-1');
gettext('tabla-hex-1-2');
gettext('tabla-hex-1-3');
gettext('tabla-hex-1-4');
gettext('tabla-hex-1-5');
gettext('tabla-hex-1-6');
gettext('tabla-hex-1-7');
gettext('tabla-hex-1-8');
gettext('tabla-hex-2-1');
gettext('tabla-hex-2-2');
gettext('tabla-hex-2-3');
gettext('tabla-hex-2-4');
gettext('tabla-hex-2-5');
gettext('tabla-hex-2-6');
gettext('tabla-hex-2-7');
gettext('tabla-hex-2-8');
gettext('tabla-hex-3-1');
gettext('tabla-hex-3-2');
gettext('tabla-hex-3-3');
gettext('tabla-hex-3-4');
gettext('tabla-hex-3-5');
gettext('tabla-hex-3-6');
gettext('tabla-hex-3-7');
gettext('tabla-hex-3-8');
gettext('tabla-hex-4-1');
gettext('tabla-hex-4-2');
gettext('tabla-hex-4-3');
gettext('tabla-hex-4-4');
gettext('tabla-hex-4-5');
gettext('tabla-hex-4-6');
gettext('tabla-hex-4-7');
gettext('tabla-hex-4-8');
gettext('tabla-hex-5-1');
gettext('tabla-hex-5-2');
gettext('tabla-hex-5-3');
gettext('tabla-hex-5-4');
gettext('tabla-hex-5-5');
gettext('tabla-hex-5-6');
gettext('tabla-hex-5-7');
gettext('tabla-hex-5-8');
gettext('tabla-hex-6-1');
gettext('tabla-hex-6-2');
gettext('tabla-hex-6-3');
gettext('tabla-hex-6-4');
gettext('tabla-hex-6-5');
gettext('tabla-hex-6-6');
gettext('tabla-hex-6-7');
gettext('tabla-hex-6-8');
gettext('tabla-hex-7-1');
gettext('tabla-hex-7-2');
gettext('tabla-hex-7-3');
gettext('tabla-hex-7-4');
gettext('tabla-hex-7-5');
gettext('tabla-hex-7-6');
gettext('tabla-hex-7-7');
gettext('tabla-hex-7-8');
gettext('tabla-hex-8-1');
gettext('tabla-hex-8-2');
gettext('tabla-hex-8-3');
gettext('tabla-hex-8-4');
gettext('tabla-hex-8-5');
gettext('tabla-hex-8-6');
gettext('tabla-hex-8-7');
gettext('tabla-hex-8-8');
gettext('7Seg');
gettext('Bits');
gettext('Bus');
gettext('Anodo_comun');
gettext('Catodo_comun');
gettext('Digitos');
gettext('Letras');
gettext('Digitos');
gettext('Letras');
gettext('0');
gettext('Constante de  7 bits para mostrar el dígito 0 en un display de 7 segmentos. Ánodo común');
gettext('Valor genérico constante, de 7 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 0 | 0 | 0 | 0 | 1 |');
gettext('1');
gettext('Constante de  7 bits para mostrar el dígito 1 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 1 | 1 | 1 | 1 |');
gettext('2');
gettext('Constante de  7 bits para mostrar el dígito 2 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 1 | 0 | 0 | 1 | 0 |');
gettext('3');
gettext('Constante de  7 bits para mostrar el dígito 3 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 0 | 1 | 1 | 0 |');
gettext('4');
gettext('Constante de  7 bits para mostrar el dígito 4 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 1 | 1 | 0 | 0 |');
gettext('5');
gettext('Constante de  7 bits para mostrar el dígito 5 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 0 | 0 | 1 | 0 | 0 |');
gettext('6');
gettext('Constante de  7 bits para mostrar el dígito 6 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 0 | 0 | 0 | 0 | 0 |');
gettext('7');
gettext('Constante de  7 bits para mostrar el dígito 7 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 1 | 1 | 1 | 1 |');
gettext('8');
gettext('Constante de  7 bits para mostrar el dígito 8 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 |  0| 0 | 0 | 0 | 0 |');
gettext('9');
gettext('Constante de  7 bits para mostrar el dígito 9 en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 |  0| 0 | 1 | 0 | 0 |');
gettext('A');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal A en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 |  0| 1 | 0 | 0 | 0 |');
gettext('B');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal B en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  0| 0 | 0 | 0 | 0 |');
gettext('C');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal C en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 0 | 0 | 0 | 1 |');
gettext('D');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal D en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 0 | 0 | 1 | 0 |');
gettext('E');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal E en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 0 | 0 | 0 | 0 |');
gettext('F');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal F en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 1 | 0 | 0 | 0 |');
gettext('G');
gettext('Constante de  7 bits para mostrar la letral G en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 0 | 0 | 1 | 0 | 0 |');
gettext('H');
gettext('Constante de  7 bits para mostrar la letra H en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 | 0 | 1 | 0 | 0 | 0 |');
gettext('I');
gettext('Constante de  7 bits para mostrar la letra I en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 | 1 | 1 | 0 | 0 | 1 |');
gettext('J');
gettext('Constante de  7 bits para mostrar la letra J en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 0 | 0 | 1 | 1 |');
gettext('L');
gettext('Constante de  7 bits para mostrar la letra L en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 0 | 0 | 0 | 1 |');
gettext('N');
gettext('Constante de  7 bits para mostrar la letra N en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 0 | 1 | 0 | 1 | 0 |');
gettext('NN');
gettext('Constante de  7 bits para mostrar la letra ñ en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 0 | 1 | 0 | 1 | 0 |');
gettext('O');
gettext('Constante de  7 bits para mostrar la letra O en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 0 | 0 | 0 | 1 |');
gettext('P');
gettext('Constante de  7 bits para mostrar la letra P en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 1 | 1 | 0 | 0 | 0 |');
gettext('Q');
gettext('Constante de  7 bits para mostrar la letra Q en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 1 | 1 | 0 | 0 |');
gettext('R');
gettext('Constante de  7 bits para mostrar la letra R en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 1 | 0 | 1 | 0 |');
gettext('S');
gettext('Constante de  7 bits para mostrar la letra S en un display de 7 segmentos. Ánodo común');
gettext('U');
gettext('Constante de  7 bits para mostrar la letra U en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 0 | 0 | 0 | 1 |');
gettext('Y');
gettext('Constante de  7 bits para mostrar la letra Y en un display de 7 segmentos. Ánodo común');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 0 | 0 | 1 | 0 | 0 |');
gettext('Digitos');
gettext('Letras');
gettext('0');
gettext('Constante de  7 bits para mostrar el dígito 0 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 1 | 1 | 0 |');
gettext('1');
gettext('Constante de  7 bits para mostrar el dígito 1 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 0 | 0 | 0 | 0 |');
gettext('2');
gettext('Constante de  7 bits para mostrar el dígito 2 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  0| 1 | 1 | 0 | 1 |');
gettext('3');
gettext('Constante de  7 bits para mostrar el dígito 3 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 0 | 0 | 1 |');
gettext('4');
gettext('Constante de  7 bits para mostrar el dígito 4 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 0 | 0 | 1 | 1 |');
gettext('5');
gettext('Constante de  7 bits para mostrar el dígito 5 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  1| 1 | 0 | 1 | 1 |');
gettext('6');
gettext('Constante de  7 bits para mostrar el dígito 6 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  1| 1 | 1 | 1 | 1 |');
gettext('7');
gettext('Constante de  7 bits para mostrar el dígito 7 en un display de 7 segmentos');
gettext('8');
gettext('Constante de  7 bits para mostrar el dígito 8 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 1 | 1 | 1 |');
gettext('9');
gettext('Constante de  7 bits para mostrar el dígito 9 en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 1 | 0 | 1 | 1 |');
gettext('A');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal A en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 |  1| 0 | 1 | 1 | 1 |');
gettext('B');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal B en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 |  1| 1 | 1 | 1 | 1 |');
gettext('C');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal C en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 1 | 1 | 1 | 0 |');
gettext('D');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal D en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 |  1| 1 | 1 | 0 | 1 |');
gettext('E');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal E en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 1 | 1 | 1 | 1 |');
gettext('F');
gettext('Constante de  7 bits para mostrar el dígito hexadecimal F en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 0 |  0| 0 | 1 | 1 | 1 |');
gettext('G');
gettext('Constante de  7 bits para mostrar la letral G en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|1  | 1 | 1 | 1 | 0 | 1 | 1 |');
gettext('H');
gettext('Constante de  7 bits para mostrar la letra H en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 1 | 1 | 0 | 1 | 1 | 1 |');
gettext('I');
gettext('Constante de  7 bits para mostrar la letra I en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n|0  | 0 | 0 | 0 | 1 | 1 | 0 |');
gettext('J');
gettext('Constante de  7 bits para mostrar la letra J en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 1 | 1 | 1 | 0 | 0 |');
gettext('L');
gettext('Constante de  7 bits para mostrar la letra L en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 1 | 1 | 1 | 0 |');
gettext('N');
gettext('Constante de  7 bits para mostrar la letra N en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 1 | 0 | 1 | 0 | 1 |');
gettext('NN');
gettext('Constante de  7 bits para mostrar la letra ñ en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 1 | 0 | 1 | 0 | 1 |');
gettext('O');
gettext('Constante de  7 bits para mostrar la letra O en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 1 | 1 | 1 | 0 |');
gettext('P');
gettext('Constante de  7 bits para mostrar la letra P en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 0 | 0 | 1 | 1 | 1 |');
gettext('Q');
gettext('Constante de  7 bits para mostrar la letra Q en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 0 | 0 | 1 | 1 |');
gettext('R');
gettext('Constante de  7 bits para mostrar la letra R en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 0 | 0 | 0 | 1 | 0 | 1 |');
gettext('S');
gettext('Constante de  7 bits para mostrar la letra S en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 1 | 0 | 1 | 1 | 0 | 1 | 1 |');
gettext('U');
gettext('Constante de  7 bits para mostrar la letra U en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 1 | 1 | 1 | 1 | 0 |');
gettext('Y');
gettext('Constante de  7 bits para mostrar la letra Y en un display de 7 segmentos');
gettext('**Segmentos**\n\n| a | b | c | d | e | f | g |\n|---|---|---|---|---|---|---|\n| 0 | 1 | 1 | 1 | 0 | 1 | 1 |');
gettext('0');
gettext('1');
gettext('2');
gettext('3');
gettext('4');
gettext('5');
gettext('6');
gettext('7');
gettext('8');
gettext('9');
gettext('A');
gettext('B');
gettext('C');
gettext('D');
gettext('E');
gettext('F');
gettext('G');
gettext('H');
gettext('I');
gettext('J');
gettext('L');
gettext('N');
gettext('NN');
gettext('O');
gettext('P');
gettext('Q');
gettext('R');
gettext('S');
gettext('U');
gettext('Y');
gettext('0');
gettext('Un bit constante a 0');
gettext('1');
gettext('Un bit constante a 1');
gettext('01_bits');
gettext('02_bits');
gettext('04_bits');
gettext('05_bits');
gettext('07_bits');
gettext('08_bits');
gettext('Generico');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Generico');
gettext('Valor genérico constante, de 2 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_0');
gettext('Valor constante 0 para bus de 2 bits');
gettext('Valor_1');
gettext('Valor constante 1 para bus de 2 bits');
gettext('Valor_2');
gettext('Valor constante 2 para bus de 2 bits');
gettext('Valor_3');
gettext('Valor constante 3 para bus de 2 bits');
gettext('Generico');
gettext('Valor genérico constante, de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_00');
gettext('Valor constante 0 para bus de 4 bits');
gettext('Valor_05');
gettext('Valor constante 5 para bus de 4 bits');
gettext('Valor_10');
gettext('Valor constante 10 para bus de 4 bits');
gettext('Valor_15');
gettext('Valor constante 15 para bus de 4 bits');
gettext('Generico');
gettext('Valor genérico constante, de 5 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Generico');
gettext('Generico');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_000');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Valor_085');
gettext('Valor constante 85 (55h) para bus de 8 bits');
gettext('Valor_170');
gettext('Valor constante 170 (AAh) para bus de 8 bits');
gettext('Valor_255');
gettext('Valor constante 255 para bus de 8 bits');
gettext('Accesorios');
gettext('Biestables');
gettext('Bombeo');
gettext('Bus');
gettext('Comparadores');
gettext('Contadores');
gettext('Flancos');
gettext('IR');
gettext('Input');
gettext('Motor');
gettext('Pegatinas');
gettext('Pulsador');
gettext('Recreo');
gettext('Registros');
gettext('Retardo');
gettext('Servos');
gettext('Timers');
gettext('icebot');
gettext('CircuitScramble');
gettext('Baliza-1');
gettext('Baliza luminosa de 1 led. Parpadea a 2Hz cuando se activa');
gettext('Bombear 2 bits por segundo');
gettext('Corazon genérico para bombear bits a la frecuencia fijada en Hz (por defecto 1Hz)');
gettext('**Baliza luminosa**\n\nParpadeo del LED a 2Hz');
gettext('Creado a partir de un **corazón  \ngenérico**, dando el valor adecuado  \na su parámetro frecuencia');
gettext('Baliza-2');
gettext('Baliza luminosa de 2 leds. Parpadean alternativamente a 2Hz cuando se activa');
gettext('**Baliza luminosa**\n\nParpadeo de los LEDs alternativamente a 2Hz, cuando están habilitados ');
gettext('Beep');
gettext('Emitir un pitido de duración (ms) y frecuencia (hz) indicada en los parámetros, al recibir un tic');
gettext('Temporizador en milisegundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('**Arranque del**  \n**temporizador**');
gettext('**Salida de pulso**');
gettext('**Salida de tic**');
gettext('**Parametro del timer**  \nmilisegundos a esperar');
gettext('Init-tic');
gettext('Emitir un tic inicial al arrancar, y nunca más');
gettext('KITT');
gettext('Secuencia del coche fantástico, con entrada de enable');
gettext('Corazón de bombeo de tics con periodo paramétrico de milisegundos y entrada de enable');
gettext('Contador módulo M, ascendente, de 4 bits, con reset ');
gettext('**Parámetro**: Módulo del contador');
gettext('Sirena');
gettext('Cuando se activa su entrada (por nivel) suena la sirena');
gettext('Bombear 1000 bits por segundo');
gettext('Bombear 4 bits por segundo');
gettext('Bombear 2000 bits por segundo');
gettext('**Sirena acústica**\n\nSe alternan pitidos de 1Khz y 2Khz a la frecuencia de 4Hz');
gettext('Cuando esta señal se pone a 1  \nempieza a sonar la sirena');
gettext('Conectar la salida  \ndirectamente a un  \nzumbador');
gettext('Button-off');
gettext('Pulsador de cambio con icono de Circuit Scramble. Cada vez que se aprieta cambia de estado');
gettext('Valor inicial del pulsador\n');
gettext('and');
gettext('system');
gettext('Cambio');
gettext('Biestable de cambio (Tipo T). Cuando se recibe un tic cambia de estado');
gettext('Dato');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('Set-Reset');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('Dato');
gettext('Fijos');
gettext('Tics');
gettext('Corazon_Hz');
gettext('Corazon_Seg');
gettext('Bombear 1 bit con el periodo especificado en el parámetro. Por defecto el periodo es de 1 segundos');
gettext('Corazon_10Hz');
gettext('Bombear 10 bits por segundo');
gettext('Corazon_1Hz');
gettext('Bombear 1 bit por segundo');
gettext('Corazon_1KHz');
gettext('Corazon_2Hz');
gettext('Corazon_2KHz');
gettext('Corazon_3Hz');
gettext('Bombear 3 bits por segundo');
gettext('Corazon_4Hz');
gettext('Corazon_5Hz');
gettext('Bombear 5 bits por segundo');
gettext('Corazon_7Hz');
gettext('Bombear 7 bits por segundo');
gettext('Corazon_DO4');
gettext('Bombear bits a la frecuencia del DO de la cuarta octava');
gettext('Corazon_MI4');
gettext('Bombear bits a la frecuencia del MI de la cuarta octava');
gettext('Corazon_RE4');
gettext('Bombear bits a la frecuencia del RE de la cuarta octava');
gettext('Fijos');
gettext('Heart-Hz');
gettext('Corazón de bombeo de tics a un frecuencia parametrica en Hz');
gettext('Heart-Sec-ena');
gettext('Corazón de bombeo de tics con periodo paramétrico de segundos y entrada de enable');
gettext('Heart-Sec');
gettext('Corazón de bombeo de tics a con periodo paramétrico de segundos');
gettext('Heart-ms-ena');
gettext('Heart-ms');
gettext('Corazón de bombeo de tics a con periodo paramétrico de milisegundos');
gettext('Heart-tics-ena');
gettext('Corazón de bombeo de tics, cuyo periodo está especificado en tics también');
gettext('Heart-tics-num');
gettext('Corazón  finito de tics. Emitir num tics cuando se recibe un tic de start');
gettext('Contador módulo M, ascendente, de 5 bits, con reset ');
gettext('Heart-tics');
gettext('Heart-us-ena');
gettext('Corazón de bombeo de tics, cuyo periodo está especificado en micro-segundos. Solo se hace el bombeo cuando está habilitado');
gettext('Heart-us');
gettext('Corazón de bombeo de tics a con periodo paramétrico de microsegundos');
gettext('Heart-1Hz');
gettext('Corazón de bombeo de tics a la frecuencia de 1Hz');
gettext('02_bits');
gettext('03_bits');
gettext('04_bits');
gettext('08_bits');
gettext('Agregador');
gettext('Agregador de 2 cables en un bus de 2-bits');
gettext('Separador');
gettext('Separador de bus de 2-bits en dos cables');
gettext('Acoplador-3-8');
gettext('Acoplador de buses de 3 a 8 bits. Se rellena con ceros');
gettext('Agregador');
gettext('Agregador de 3 cables en un bus de 3-bits');
gettext('Separador');
gettext('Separador de bus de 3-bits');
gettext('Agregador');
gettext('Agregador de buses de 2-bits a bus de 4-bits');
gettext('Agregador4');
gettext('Agregador de 4 cables en un bus de 4-bits');
gettext('Separador');
gettext('Separador de bus de 4-bits en buses de 2 bits');
gettext('Separador4');
gettext('Separador de bus de 4-bits en 4 cables');
gettext('Agregador');
gettext('Agregador de 2 buses de 4-bits a bus de 8-bits');
gettext('Separador');
gettext('Separador de bus de 8-bits en buses de 4 bits');
gettext('1-bit');
gettext('2-bits');
gettext('3-bits');
gettext('4-bits');
gettext('8-bits');
gettext('Comp-1');
gettext('Comparador de igualdad, de un operando de 1 bit');
gettext('Comp-2');
gettext('Comparador de dos operandos de 1 bit');
gettext('Menor-1');
gettext('Comparador menor que, de un operando de 1 bit');
gettext('Menor-2');
gettext('Comparador menor que, de dos operandos de 1 bit');
gettext('Comp-1');
gettext('Comparador de igualdad, de un operando de 2 bits');
gettext('Comp-2');
gettext('Comparador de dos operandos de 2 bits');
gettext('Menor-1');
gettext('Comparador menor que, de un operando de 2 bits');
gettext('Menor-2');
gettext('Comparador menor que, de dos operandos de 2 bits');
gettext('Comp-1');
gettext('Comparador de igualdad, de un operando de 3 bits');
gettext('Comp-2');
gettext('Comparador de dos operandos de 3 bits');
gettext('Menor-1');
gettext('Comparador menor que, de un operando de 3 bits');
gettext('Menor-2');
gettext('Comparador menor que, de dos operandos de 3 bits');
gettext('Comp-1');
gettext('Comparador de un operando de 4 bits. Se compara si el operando es igual al parámetro');
gettext('Comp-2');
gettext('Comparador de dos operandos de 4 bits');
gettext('Menor-1');
gettext('Comparador menor que, de un operando de 4 bits');
gettext('Menor-2');
gettext('Comparador menor que, de dos operandos de 4 bits');
gettext('Comp-1');
gettext('Comparador de un operando de 8 bits. Se compara si el operando es igual al parámetro');
gettext('Comp-2');
gettext('Comparador de dos operandos de 8 bits');
gettext('Menor-1');
gettext('Comparador menor que, de un operando de 8 bits');
gettext('Menor-2');
gettext('Comparador menor que, de dos operandos de 8 bits');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('13-bits');
gettext('cont-up-system');
gettext('Contador del sistema, módulo M, ascendente, de 2 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 2 bits, con reset ');
gettext('cont-up-system');
gettext('Contador del sistema, módulo M, ascendente, de 3 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 3 bits, con reset ');
gettext('cont-up-system');
gettext('Contador del sistema, módulo M, ascendente, de 4 bits, con reset ');
gettext('cont-up');
gettext('cont-up');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 6 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 7 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 8 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 9 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 10 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 11 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 12 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 13 bits, con reset ');
gettext('Bajada');
gettext('Detector de flanco de bajada. Emite un tic cuando detecta un flanco descendente');
gettext('Subida');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('IR-tic');
gettext('Detección de objeto con sensor de infrarrojos (IR). Emite un tic cada vez detecta un objeto');
gettext('**IRr-tic**');
gettext('Debouncer');
gettext('Remove the rebound on a mechanical switch');
gettext('Tri-state');
gettext('Tri-state logic block');
gettext('sync');
gettext('Sincronizar las entradas de datos con el reloj del sistema');
gettext('SM-S4303R');
gettext('MotorBit');
gettext('Controlador para servo de rotacion continua SprintRC SM-S4303R. Con on=1, el motor avanza. Dir=1 sentido agujas reloj/ 0 el contrario. V1 y V2 son los pulsos para las velocidades horaria y antihoraria (en micro-sec). V0 para que esté parado');
gettext('Mux 2:1. Bus de 7 bits. ');
gettext('Mux 2:1. Bus de 4 bits. ');
gettext('Agregador de 4 cables a bus de 4bits');
gettext('Separador de bus de 4bits en 4 cables (1 + 1 + 1 + 1)');
gettext('Multiplexor 2:1 de 1-bit');
gettext('NAND logic gate');
gettext('Transistor');
gettext('Transistor cmos hecho a partir de semiconductores');
gettext('Cristal de Siicio');
gettext('Atomos de silicio');
gettext('Separador de bus de 8bits en 2 (4 + 4)');
gettext('Agregador de 2 buses de 4 a bus de 8bits');
gettext('Controlador PWM para posicionar servos de 20ms. Las unidades de pos son de 10usec');
gettext('**Velocidad 1**: Velocidad para el  \nsentido de giro horario\n');
gettext('**Velocidad 2**: Velocidad para el \nsentido de giro antirhorario');
gettext('**Entrada on/off**: Motor en  \nmovimiento o parado');
gettext('**Motorbit paramétrico** para los **SM-S4303R** o compatibles\n\nTiene 3 parámetros, especificados en micro-segundos. **V1** y **V2** son las posiciones (ancho del pulso)  \npara las velocidades de giro en sentido horario y antihorario respectivamente\n\n**V0** es la posición en la que el servo está parado (velocidad 0)\n\nPor defecto se asignan los valores para las velocidades máximas, tanto en sentido horario como antihorario\n\n* V1max = 1900\n* V2max = 1100\n* V0 = 1500');
gettext('**Velocidad en sentido horario**\n\n* Si V1 >= 1900, la velocidad es máxima\n* Si 1900 > V1 > 1500, la velocidad estará  \nentre la máxima y 0');
gettext('**Velocidad en sentido antihorario**\n\n* Si V2 <= 1100, la velocidad es máxima\n* Si 1100 < V2 < 1500, la velocidad estará  \nentre la máxima y 0');
gettext('**dir**: Sentido de giro  \n1: horario / 0: antihorario');
gettext('**Velocidad 0**: Posición para que  \nel servo esté parado');
gettext('Mux 2:1 with logic gates');
gettext('Entrada 1');
gettext('Entrada 0');
gettext('Selección');
gettext('Implementación en Verilog');
gettext('Las puertas están construidas a\npartir de transistores');
gettext('Pincha en algún transistor para\nbajar de nivel');
gettext('Nivel 3: Semiconductores');
gettext('Los transistores se crean a \npartir de uniones entre \nsemiconductores, de tipo P y N\nEstán integrados en los dados de\nsilicio en los circuitos integrados');
gettext('Pincha en el bloque para bajar de nivel');
gettext('Nivel 2: MATERIALES');
gettext('Cristal de silicio');
gettext('Los semiconductores se crean a partir de cristales\nde Silicio (Si) que se dopans con impurezas\npara darle las propiedades de semiconductores');
gettext('Pincha en los bloques para bajar de nivel');
gettext('Átomos de Silicio');
gettext('Nivel 1: ATOMOS');
gettext('Los cristales de silicio se forman a \npartir del enlace covalente entre los\nátomos de silicio. Cada uno de ellos \nestá rodeado por 4 átomos de silicio\nformando un tetraedro');
gettext('<B>Posicion del servo</B>\n\nSe especifica en unidades de 10micro-segundos\nEj. pos = 100 --> Pulso de achura 1ms');
gettext('<B>Generación de una señal PWM para posicionamiento de Servos</B>\nEl periodo es de 20ms\nEl ancho del pulso varía entre 0 - 255 (0 - 2.5ms)');
gettext('Academia-Jedi');
gettext('Emojis');
gettext('00-Pre');
gettext('01-Primero');
gettext('02-Segundo');
gettext('03-Tercero');
gettext('00-Observador');
gettext('Rango de Observador. Pre-academia Jedi');
gettext('01-Aspirante-a-Cadete');
gettext('Rango de Aspirante a Cadete. Pre-academia Jedi');
gettext('02-Cadete');
gettext('Rango de Cadete. Primer curso');
gettext('03-Cadete-N1');
gettext('Rango de Cadete Nivel 1. Primer curso');
gettext('04-Cadete-N2');
gettext('Rango de Cadete Nivel 2. Primer curso');
gettext('05-Cadete-N3');
gettext('Rango de Cadete Nivel 3. Primer curso');
gettext('06-Aspirante-Padawan');
gettext('Rango de Aspirante a Padawan. Primer curso');
gettext('07-Aspirante-Padawan-N1');
gettext('Rango de Aspirante a Padawan Nivel 1. Primer curso');
gettext('08-Aspirante-Padawan-N2');
gettext('Rango de Aspirante a Padawan Nivel 2. Primer curso');
gettext('09-Aspirante-Padawan-N3');
gettext('Rango de Aspirante a Padawan Nivel 3. Primer curso');
gettext('10-Padawan');
gettext('Rango de Padawan. Segundo curso');
gettext('11-Padawan-N1');
gettext('Rango de Padawan Nivel 1. Segundo curso');
gettext('12-Padawan-N2');
gettext('Rango de Padawan Nivel 2. Segundo curso');
gettext('13-Padawan-N3');
gettext('Rango de Padawan Nivel 3. Segundo curso');
gettext('14-Aspirante-Jedi');
gettext('Rango de Aspirante a Jedi. Segundo curso');
gettext('15-Aspirante-Jedi-N1');
gettext('Rango de Aspirante a Jedi Nivel 1. Segundo curso');
gettext('16-Aspirante-Jedi-N2');
gettext('Rango de Aspirante a Jedi Nivel 2. Segundo curso');
gettext('17-Aspirante-Jedi-N3');
gettext('Rango de Aspirante a Jedi Nivel 3. Segundo curso');
gettext('18-Jedi');
gettext('Rango de Jedi. Tercer curso');
gettext('19-Jedi-N1');
gettext('Rango de Jedi Nivel 1. Tercer curso');
gettext('20-Jedi-N2');
gettext('Rango de Jedi Nivel 2. Tercer curso');
gettext('21-Jedi-N3');
gettext('Rango de Jedi Nivel 3. Tercer curso');
gettext('Smiley');
gettext('Stickers de Smiley');
gettext('caca');
gettext('Caca sonriente');
gettext('like');
gettext('Like');
gettext('pulsador-cambio');
gettext('Pulsador de cambio. Cada vez que se aprieta cambia de estado');
gettext('pulsador-tic');
gettext('Detección de pulsación. Emite un tic cada vez que se aprieta el pulsador');
gettext('**Pulsador-tic**');
gettext('comecocos');
gettext('Bloque de prueba para explicar conceptos. No hace nada');
gettext('Bloque de documentación, para explicar los  \nconceptos de puertos, parámeros, pines, cables  \ny buses en el tutorial 21');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('reg');
gettext('Registro de 2 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 2 bits');
gettext('reg');
gettext('Registro de 3 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 3 bits');
gettext('reg');
gettext('Registro de 4 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 4 bits');
gettext('reg');
gettext('Registro de 5 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 5 bits');
gettext('reg');
gettext('Registro de 6 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 6 bits');
gettext('reg');
gettext('Registro de 7 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 7 bits');
gettext('reg');
gettext('Registro de 8 bits');
gettext('sreg-load');
gettext('Registro de desplazamiento (izquierda) de 8 bits');
gettext('sreg');
gettext('Tortuga-2');
gettext('Divisor entre dos');
gettext('Biestable T síncrono, inicializado a 0');
gettext('Biestable T síncrono, inicializado por parametro INI');
gettext('Biestable tipo D con entrada de enable, inicializado al parámetro INI');
gettext('Biestable D con inicialización paramétrica');
gettext('Generar un pulso de reloj al recibir un flanco por la entrada');
gettext('Biestable D inicializado a 0');
gettext('Delay flip-flop');
gettext('Tortuga: Divisor entre 2\n\nImplementado a partir de un\nbiestable T síncrono');
gettext('Hacer que solo responda a los flancos\nde subida de la señal de entrada');
gettext('Emax-ES08A');
gettext('Futaba-3003');
gettext('TowerPro-SG90');
gettext('ServoBit-90');
gettext('ServoBit para microservos EMAX ES08A. Controlador de 1 bit para mover el servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('ServoBit para microservos EMAX ES08A. Controlador de 1 bit para mover el servo a las 2 posiciones POS0 y POS1');
gettext('**Posición 1**: Posición del servo cuando  \nse introduce un 1\n\nEl valor por defecto es de 135 grados\n');
gettext('**Posición 0**: Posición del servo cuando  \nse introduce un 0\n\nEl valor por defecto es de 45 grados');
gettext('**Entrada**: posición a donde llevar  \nel servo (posición 0 ó 1)');
gettext('**Servobit paramétrico** para los microservos **EMAX-ES08A** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **580 usec**  \n* Extremo izquierdo **2550 usec**\n');
gettext('ServoBit');
gettext('Servobit-90');
gettext('ServoBit para Futaba 3003. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('ServoBit paramétrico para Futaba 3003. Controlador de 1 bit para mover el servo a las 2 posiciones P0 y P1');
gettext('**Servobit** para Servos Futaba 3003 o comaptibles\nLas dos posiciones están distanciadas **90 grados**  \n\n* **Posicion 0**: 45 grados  \n* **Posicion 1**: 135 grados  ');
gettext('**Servobit paramétrico** para los microservos **Futaba 3003** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **380 usec**  \n* Extremo izquierdo **2410 usec**\n');
gettext('Servobit');
gettext('Servobit-90');
gettext('ServoBit para micrservo TowerPro-SG90. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('**Servobit paramétrico** para los microservos **TowerPro SG-90** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **500 usec**  \n* Extremo izquierdo **2350 usec**\n');
gettext('Servobit');
gettext('timer-msec');
gettext('timer-sec');
gettext('Temporizador en segundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('**Parametro del timer**  \nSegundos a esperar');
gettext('timer-system');
gettext('Temporizador en tics. La señal p está activa durante los tics indicados. ov se emite un tic al finalizar');
gettext('timer-usec');
gettext('Temporizador en microsegundos. La señal p está activa durante el tiempo indicado. Por tic se emite un tic al finalizar');
gettext('**Parametro del timer**  \nmicroseundos a esperar');
gettext('Icemove4');
gettext('Icemove4: Controlador de 4 movimientos para el Icebot');
gettext('# ICEmove4\n\nControlador para el [robot Icebot](https://github.com/Obijuan/icebot/wiki), que genera **4 movimientos**:  \nParado, giro derecha (arco), giro izquierda (arco) y adelante');
gettext('**Código del movimiento**');
gettext('**Motor de la rueda derecha**');
gettext('**Motor de la rueda izquierda**');
gettext('## Tabla de movimientos\n\n| Código de entrada | Movimiento del Robot   |\n|-------------------|------------------------|\n|  0                |  Parado                |\n|  1                |  Giro derecha (arco)   |\n|  2                |  Giro izquierda (arco) |\n|  3                |  Adelante              |');
gettext('**Entrada de reloj**');
gettext('Icemove9');
gettext('Icemove9: Controlador de 9 movimientos para el Icebot');
gettext('# ICEmove9\n\nControlador de 9 movimientos para el robot Icebot  \n(Entrada de 4 bits)');
gettext('## Tabla de movimientos\n\n| Código de entrada | Movimiento del Robot   |\n|-------------------|------------------------|\n|  0, 1, 2, 3       |  Parado                |\n|  4,6              |  Arco derecha          |\n|  5,7              |  Arco izquierda-atrás  |\n|  8,9              |  Arco derecha-atrás    |\n|  10,11            |  Arco izquierda        |\n|  12               |  Giro derecha          |\n|  13               |  Atrás                 |\n|  14               |  Adelante              |\n|  15               |  Giro izquierda        |');
gettext('0-Soluciones-Tutorial-28');
gettext('1-Ejemplos');
gettext('2-Ejercicios');
gettext('Sol-28-1');
gettext('**Código**');
gettext('**Cargar el dato**');
gettext('**Display de 7 segmentos**');
gettext('**Visualizar código**: SI/NO');
gettext('# Solución ejercicio 28.1: (5 Bitpoints). Caja fuerte con apertura con código de 3 bits\n\nEste es el circuito de la apertura de la caja fuerte, que ya conocemos, pero con algunas mejoras. Primero se introduce el código de 3 bits y se pulsa la tecla enter (cargar el dato)  \nEste dato se almacena en 3 biestables y se comprueba si es el correcto. El servo se moverá si el código es el 101 (5), simulando la apertura de la caja.  Para cerrar hay que  \nintroducir cualquier número diferente de 5 y apretar enter\n\nAdemás tiene un modo de visualización del código. Por defecto no se muestra el código introducido. Al apretar el pulsador de visualización, el dato guardado en los biestables  \nse muestra en el display. Si se vuelve a apretar el botón se deja de visualizar');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=1VyIj9DERws) se muestra un ejemplo de funcionamiento.\n\n[![Click to see the youtube video](http://img.youtube.com/vi/1VyIj9DERws/0.jpg)](https://www.youtube.com/watch?v=1VyIj9DERws)');
gettext('Sol-28-2');
gettext('# Solución ejercicio 28.2: (5 Bitpoints). Mini-calculadora que multiplica un número de 3 bits por 2\n\nDiseñar una **mini-calculadora**, de 3 bits, que realiza una única operación: **multiplicar por dos**. Se introduce el dato de 3 bits mediante **3 pulsadores externos** y  \nse pulsa la **tecla de carga** para itroducirlo. Se muestra en el **display**. A contiuación si se pulsa la **tecla de multiplicación** se multiplicará por dos y se  \nmuestra el resultado en el display. Como se usan pocos bits, **la multiplicación sólo se puede usar 1 veces después de cargar**. Si se aprieta varias veces el  \nbotón de multiplicación sólo tendrá efecto la primera vez. Y no folverá a funcionar hasta realizar una nueva carga.\n\nUtilizar el decodificador de 7 seg **DisplayHex**, que permite visualizar 4 bits en hexadecimal. Así, por ejemplo, si se multiplica 5 * 2 se obtendrá el dígito A (10 en hexa)');
gettext('**Bit 0**');
gettext('**Bit 1**');
gettext('**Bit 2**');
gettext('**Dato**');
gettext('Evento: Cargar');
gettext('Evento: Cargar o multiplicar');
gettext('Multiplicacion ya hecha:  \n0: NO  \n1: SI  ');
gettext('Evento:  \nMultiplicar');
gettext('Evento: Se permite  \nmultiplicar');
gettext('Evento: Botón de multiplicar apretado');
gettext('**Botón de multiplicar**  \n**por dos**');
gettext('**Bit 3**');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=GNUIOgodDQY) se muestra un ejemplo de funcionamiento. Primero  \nse prueba con el número uno, y el resultado es 2. Luego con 3, y sale 6. Después con 4, que da 8, luego con 5, y sale A (10) y finalmente  \ncon 7, que sale d (14). Si se aprieta varias veces el botón de multiplicación no tiene efecto\n\n\n[![Click to see the youtube video](http://img.youtube.com/vi/PqVvVQ5D3nc/0.jpg)](https://www.youtube.com/watch?v=PqVvVQ5D3nc)');
gettext('Sol-28-3');
gettext('Dato Recibido');
gettext('**Dato de entrada**');
gettext('**Desplazar el dato**');
gettext('Evento: cargar  \ndato recibido');
gettext('Evento: carga o \ndesplazamiento');
gettext('Envío de los bits serie por un  \ncable externo');
gettext('Recepción de los bits  \nserie, del cable externo');
gettext('## Unidad de transmisión serie');
gettext('## Unidad de recepción serie');
gettext('Evento: desplazar');
gettext('# Solución ejercicio 28.3: (5 Bitpoints). Transmisión y recepción de un dato de 3 bits en serie\n\nDiseeñar un circuito que simula un sistema de transmisión entre un circuito emisor y uno receptor.  El envío de datos del tranmisor al receptor se hace en serie, bit a bit, a través de un  \ncable externo. Este cable sale por un pin de la FPGA, y vuelve a entrar por otro pin para llegar al receptor. Lo hacemos así para enfatizar el hecho de que los datos se transmiten bit a bit, por  \nun cable.\n\nLos datos que se envían son de 3 bits. Este dato se introduce en el transmisor a través de 3 interruptores externos, y al pulsar el botón de load se captura y se muestra en 3 LEDs. A continuación, \nse desplazan para su envío serie. Cada vez que se aprieta el botón 2 se desplaza un bit.\n\nEl receptor recibe el dato en serie y cuando se aprieta el botón de cargar se guarda el dato en otros 3 Biestables, cuyo contenido se visualiza en el display de 7 segmentos\n\nAsí, para transmitir el número 3, por ejemplo, los pasos serían los siguientes:\n\n* **Paso 1**: Introducir el número 3 en binario en los Switches\n* **Paso 2**: Apretar el botón de load. El número cargado se muestra en binario en los LEDs\n* **Paso 3**: Apretar 3 veces el pulsador de desplazamiento\n* **Paso 4**: Apretar de nuevo el botón de load para mostrar el dato recibido en el Display');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=GNUIOgodDQY) se muestra un ejemplo de funcionamiento. Primero  \nse envía el número 3, y el receptor muestra el dato recibido en el display de 7 segmentos. Luego se quita el cable de  \ntranmisión y se vuelve a enviar. Se recibe 0. Se coloca otra vez el cable de transmisión y se envía el número 5\n\n\n[![Click to see the youtube video](http://img.youtube.com/vi/GNUIOgodDQY/0.jpg)](https://www.youtube.com/watch?v=GNUIOgodDQY)');
gettext('01-Reg-dato-3bits');
gettext('## Ejemplo 1: Almacenamiento de un número de 3 bits\n\nPor los **3 interruptores externos** se introduce un **número de 3 bits** en binario. Al apretar  \nla **tecla ENTER** se captura el dato en el **registro de 3 bits**, y se muestra en decimal  \nen el **display de 7 segmentos**');
gettext('Tecla \"ENTER\"');
gettext('**Registro de \n3 bits**');
gettext('**Número a introducir**');
gettext('**Display de 7**  \n**segmentos**');
gettext('02-Shift-Reg-3bits');
gettext('Tecla \"Desplazar\"');
gettext('Mostrar número en **decimal**');
gettext('Mostrar número  \nen **Binario**');
gettext('## Ejemplo 2: Carga y desplazamiento de un número de 3 bits\n\nPor los **3 interruptores externos** se introduce un **número de 3 bits** en binario. Al apretar  \nla **tecla ENTER** se captura el dato en el **registro de 3 bits**, y se muestra en decimal  \nen el **display de 7 segmentos** y en binario en los LEDs. Al apretar el botón de **Desplazar**  \nel dato se desplaza **1 bit hacia la izquierda**');
gettext('03-Shift-reg-arcade');
gettext('**Pulsador de disparo**');
gettext('**Sonido del disparo**');
gettext('Velocidad del  \ndisparo');
gettext('Biestable de carga  \ndel disparo');
gettext('Al apretar el pulsador  \nse carga con un 1  \nAl desplazarse la bala se  \ncarga con 0');
gettext('**Registro de**  \n**Desplazamiento**');
gettext('Evento: Desplazar la bala  \nuna posición');
gettext('Se desplazan los bits-balas  \ncon cada tic del corazón');
gettext('Mostrar las balas  \nen los LEDs');
gettext('## Ejemplo 3: Disparo arcade\n\nUso de un **registro de desplazamiento** para generar  \n**disparos** de un juego arcade. Cada bit es una bala.  \nCon el **pulsador** se introduce una nueva bala por su  \nentrada serie. Con cada **tic** del corazón se  \ndesplaza el registro, generando el movimiento  \nde las balas, que se visualiza en los **LEDs**  \nAl apretar el botón, además, se emite un  \n**sonido corto**\n');
gettext('04-Comparacion-3bits');
gettext('## Ejemplo 4: Comparando números de 3 bits\n\nPor tres interruptores externos se introduce un número de 3 bits   \ny se pulsa la tecla \"Enter\" para capturarlo en el registro  \nSe compara con el valor de un contador, que se puede incrementar  \ncon un pulsador.  Por un LED se muestra el resultado de la comparación  \nde igualdad, y por el otro de la de menor que');
gettext('**Contador**  ');
gettext('**Menor que** ');
gettext('**Iguales** ');
gettext('**Operando a**');
gettext('**Operando b**');
gettext('05-Codigo-caja-fuerte');
gettext('## Ejemplo 5: Caja fuerte con código\n\nPor los interruptores externos se introduce el **código**  \n**de apertura** de la caja fuerte, y se pulsa el botón  \nde Enter para capturarlo. El código introducido se  \nmuestra en el display de 7 segmentos. Si el código es  \ncorrecto se abre la caja (Servo) y se activa el LED verde  \n\nEl código se cambia modificando la constante del  \ncomparador de igualdad. Por defecto es 5\n');
gettext('**Introducción del código**');
gettext('¿Es el código correcto?  \n0: NO  \n1: SI');
gettext('Mostrar el código  \nintroducido');
gettext('Apertura de la caja  \ncuando el código es  \ncorrecto');
gettext('LED de código OK  \nSe encience cuando  \nel código es correcto');
gettext('06-Ruleta');
gettext('**Introducción del número**');
gettext('**Número elegido**');
gettext('Botón de tirar');
gettext('**Modo actual**  \n0: modo selección  \n1: modo ruleta');
gettext('**Spiner**');
gettext('Indicador modo Ruleta');
gettext('Indicador modo Selección');
gettext('Evento: modo selección  \ny tecla enter pulsada');
gettext('Evento: modo ruleta  \ny ruleta en movimiento');
gettext('Emitir pulso corto  \npara habilitar  \nsonido ruleta');
gettext('Sonido ruleta');
gettext('**Contador**');
gettext('Numero actual  \nen la ruleta');
gettext('La información que se muestra por el  \ndisplay depende del modo:  \n* Modo selección: Número elegido  \n* Modo ruleta: Número actual');
gettext('**Comparador**');
gettext('El Número elegido es  \nigual al número actual  \nde la ruleta');
gettext('Modo actual');
gettext('Evento: Ruleta  \nparada');
gettext('Se considera que la ruleta está  \nparada si han transcurrido al  \nmenos 2 segundos sin recibirse  \ntic de movimiento');
gettext('tic de movimiento');
gettext('**Estado Ruleta**  \n0: en movimiento  \n1: Parada  ');
gettext('**Evento: Acierto!**');
gettext('Hay acierto cuando  \nla ruleta está parada  \ny el numero elegido  \nes igual al de la ruleta');
gettext('**Sirena luminosa**  \n¡¡Acierto!!');
gettext('**Sirena acústica**  \n¡¡Acierto!!');
gettext('El Número elegido es  \nDISTINTO al de la ruleta');
gettext('**Evento: Fallo!**');
gettext('Hay fallo cuando  \nla ruleta está parada  \ny el numero elegido  \nes distinto al de la ruleta');
gettext('Sonido de fallo');
gettext('Selección del tono a  \nemitir: Acierto o fallo');
gettext('Etado ruleta');
gettext('Selecciónar qué tocar según el  \nestado de la ruleta  \nSi en movimiento: tics de movimiento  \nSi parada: Tono de error o fallo');
gettext('Tiempo de reset  \nTras 3 segundos de  \nestar la ruleta parada  \nse vuelve al inicio');
gettext('Evento: Reset. Volvemos a comenzar');
gettext('Reset Manual:  \nAbortar!');
gettext('Evento: Volver a comenzar');
gettext('Sonido tics de la  \nruleta');
gettext('# Ejemplo 6: Juego de la Ruleta\n\nCómo jugar:\n* Introduce el número a jugar y pulsa el botón de enter  \n* Puedes cambiar el número antes de empezar, las veces que quieras  \n* Pulsa el botón de tirar\n* Tira la ruleta\n* Espera hasta que se detenga l ruleta\n* Si has ganado sonará una alarma acústica y luminosa\n* Si pierdes, sonará un tono grave\n* El circuito vuelve automáticamente al estado inicial tras 3 segundos  \nal acabar la jugada');
gettext('07-Control-comandos');
gettext('## Ejemplo 7: Control por comandos\n\nSe tienen 3 dispositivos: Una alarma luminosa, una puerta accionada por un Servo, y  \nun motor. Para controlar los dispositivos dispoinemos de una consola formada  \npor 3 interruptores de entrada, una pulsador de Enter y un display de 7 segmentos  \nPor esta consola se introducen los código de los comandos a realizar y al  \npulsar ENTER se ejecutan: abrir la puerta, activar la alarma, mover el motor, etc...');
gettext('**Introducción del comando**');
gettext('Mostrar el comando  \nintroducido');
gettext('**Dispositivo 1: Alarma**');
gettext('**Dispositivo 2: Puerta**');
gettext('**Dispositivo 3: Motor**');
gettext('| Comando | Código | Descripción |\n|---------|--------|-------------|\n| RESET   | 0      | Apagar todos los dispositivos (volver al estado inicial) |\n| AlarmON | 1      | Activar Alarma luminosa |\n| AlarmOFF| 2      | Desactivar Alarma luminosa |\n| OPEN    | 3      | Abrir la puerta (Se mueve el servo) |\n| CLOSE   | 4      | Cerrar la puerta (Se mueve el servo) |\n| MotorON | 5      | Encender el motor |\n| MotorOFF| 6      | Apagar motor      |\n| MotorDIR| 7      | Cambiar el sentido de la marcha del motor |');
gettext('**Tabla de comandos y sus códigos**');
gettext('**CONSOLA DE CONTROL**');
gettext('Comando actual');
gettext('08-Arduino-puerto-salida');
gettext('**Registro de**  \n**desplazamiento**');
gettext('Entrada de datos');
gettext('evento:  \nbit recibido');
gettext('**Datos serie**  \n**de entrada**');
gettext('**Reloj**  \n**de entrada**');
gettext('### Conexiones entre Arduino UNO y Icezum Alhambra\n\n| Pin Arduino  |  Pin Alhambra | Descripción  |\n|--------------|---------------|--------------|\n|  D12         |   D12         | Reloj        |\n|  D11         |   D11         | Datos        |\n|  D10         |   D10         | Control      |\n|  GND         |   GND         | Masa         |');
gettext('El dato recibido se muestra en LEDs de  \nla Icezum Alhambra');
gettext('**Sincronizador**  ');
gettext('Convertir flancos de  \nsubida a tics');
gettext('**Registro de**  \n**datos**');
gettext('evento:  \ndato recibido');
gettext('**Control: **  \nCaptura del dato');
gettext('## Ejemplo 8: Puerto de salida adicional para Arduino\n\nEjemplo de comunicación entre **Arduino** (Máster) y la FPGA (esclava). Este circuito  \nimplementa un **puerto de salida** adicional para Arduino. El dato recibido  \nse muestra por los **8 leds** de la **Icezum Alhambra**');
gettext('09-Arduino-puerto-entrada');
gettext('Interruptores de entrada  \nde datos');
gettext('Tecla ENTER');
gettext('**Display de 7 segmentos**  \nMostrar el dato del  \nregistro de datos');
gettext('Acoplador de bus de 3 a 8  \nSe rellenan con 0s los  \nbits más significativos');
gettext('**Registro de**   \ndesplazamiento');
gettext('**Datos serie**  \n**de salida**');
gettext('Registrar la señal  \nde salida');
gettext('evento:  \ncapturar dato');
gettext('evento:  \nenviar bit');
gettext('## Ejemplo 9: Puerto de entrada adicional para Arduino\n\nEjemplo de comunicación entre **Arduino** (Máster) y la FPGA (esclava). Este circuito  \nimplementa un **puerto de entrada** adicional para Arduino. Se introduce un número de  \n3 bits por los interruptores, que se almacena en el registro de datos al apretar  \nla tecla \"ENTER\". El arduino lee este registro de datos periódicamente para saber  \nqué dato se ha introducido');
gettext('### Conexiones entre Arduino UNO y Icezum Alhambra\n\n| Pin Arduino  |  Pin Alhambra | Descripción  |\n|--------------|---------------|--------------|\n|  D12         |   D12         | Reloj        |\n|  D10         |   D10         | Control      |\n|  D9          |   D9          | Datos        |\n|  GND         |   GND         | Masa         |');
gettext('Ejercicio-29-1');
gettext('**Entregar**:\n\n  -1 Pantallazo del circuito\n  \n  -1 Vídeo del funcionamiento\n  \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube. El vídeo puede estar en youtube o directamente en el tuit/post\n  ');
gettext('**GITHUB**:\n\n  Entrega **obligatoria por Github** (sólo pantallazo, el vídeo\n  no hace falta, para que no ocupe tanto espacio)');
gettext('# Ejercicio 29.1: (5 Bitpoints). Cinta trasportadora manual de LEDs \n\nSimulación de un **cinta transportadora** en los 8 LEDs de la placa. El avance de  \nla cinta se hace manualmente, mediante un **spiner**. Cada tic generado por el   \nspiner se usa para que los LEDs avancen una posición. El LED que sale por  \nel más significativo vueve a entrar por el menos significativo, en un bucle  \nespacial. Cada vez que hay un tic de avance se genera un sonido de 10ms  \n\nLa **cinta transportadora** se carga apretando un **pulsador externo**. Se enciende un** LED** para  \nindicar que hay un objeto nuevo que se introducirá en la cinta en el siguiente  \ntic de avance. Al entrar, el LED de carga se **apaga**. El objeto que ha entrado  \nse queda dentro de la cinta todo el rato. Se pueden introducir varios objetos\n\nSi la cinta se **para** durante más de **2 segundos**, se emitirá un tono diferente, de 1 segundo  \nde duración, para avisar de que está detenida');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=hFxit9fbsss) se muestra un ejemplo de funcionamiento.\n\n[![Click to see the youtube video](http://img.youtube.com/vi/hFxit9fbsss/0.jpg)](https://www.youtube.com/watch?v=hFxit9fbsss)');
gettext('Ejercicio-29-2');
gettext('# Ejercicio 29.2: (5 Bitpoints). Servidor hardware para Arduino\n\nImplementar un circuito que dote a **Arduino** de **3 puertos de salida** de 4 bits.  \nEl **puerto 0** muestra los bits en los LED del 3 al 0. El **puerto 1** en los LEDs  \n7 -4, y el **puerto 2** en un **display de 7 Segmentos**. Estos puertos se  \nimplementarán mediante comunicaciones serie síncronas entre el **Arduino** y la **FPGA**.  \nDesde el Arduino se envían **comandos de 8 bits**, que tienen el siguiente **formato**:  \n\n* Los **4 bits menos significativos** contienen el **valor** a sacar por el puerto especificado  \n* Los **4 bits más significativos** indican el **puerto** por el que sacar la información  \n\n|Bits 7-4  | Comando | Descripción       |\n|----------|---------|-------------------|\n| 0000     |  0      |Acceso al puerto 0 |\n| 0001     |  1      |Acceso al puerto 1 |\n| 0010     |  2      |Acceso al puerto 2 |\n| resto    |  x      | Comando inválido  |\n\nSe usará un LED externo para indicar si el comando recibido es válido o no.  \nEn caso de recibirse uno erróneo, se enciende. Cuando se recibe uno correcto  \nse apaga. Se usa sólo como indicador y no se tomará ninguna acción cuando  \nel comando es erróneo.  \n\nEl **software del Arduino** implementará un **contador de segundos**, mostrando  \nen el display de 7 segmentos (puerto 2) los dígitos 0 - 9, uno cada segundok  \nAl pasar medio segundo, se encienden todos los LEDs del puerto 1, y se  \napagan los del puerto 2. Al trancurrir un segundo completo, se apagan los  \ndel puerto 1, se encienden los del 0 y se actualiza el dígito en el puerto 2  \n\nAntes de comenzar la cuenta, se enviará un **comando erróneo**, para comprobar que  \nel LED indicador se encience. Y se esperará 2 segundos antes de ejecutar el bucle  \nprincipal anterior\n\n\n');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=Gkg30RhCNuw) se muestra un ejemplo de funcionamiento.\n\n[![Click to see the youtube video](http://img.youtube.com/vi/Gkg30RhCNuw/0.jpg)](https://www.youtube.com/watch?v=Gkg30RhCNuw)');
gettext('Ejercicio-29-3');
gettext('\nEn este [Vídeo de Youtube](https://www.youtube.com/watch?v=uGArKWjpHUk) se muestra un ejemplo de funcionamiento.\n\n[![Click to see the youtube video](http://img.youtube.com/vi/uGArKWjpHUk/0.jpg)](https://www.youtube.com/watch?v=uGArKWjpHUk)');
gettext('# Ejercicio 29.3: (5 Bitpoints). Puerto de entrada y salida en Arduino\n\nImplementar un **puerto de entrada** y de** salida** adicionales para **Arduin**o, mediante **comunicaciones serie síncronas**  \nEl puerto de **entrada** debe estar conectado a un** contador de 8 bits** que cuenta las pasadas que da un **spiner**  \n(las veces que se interrumpe el haz de infrarrojos). Este spiner está simulando un encoder  \nCada vez que el Arduino realice una lectura de este puerto, se le devolverá el valor de este contador  \nEl **puerto de salida** está conectado al **display de 7 segmentos**. Sólo se usarán los **4 bits de menor peso**  \nEl **programa principal de Arduino** deberá leer el **valor del encoder** y mostrar su valor en la **consola serie**.  \nAdemás, deberá sacar por el display de 7 segmentos el dígito decimal (0-9) correspoindinete a la lectura  \ndel enconder. Así, si la cuenta del encoder va por 157, en el display se muestra el dígito 7  \n(Esto hay que hacerlo mediante código en Arduino. Es fácil de hacer con la instrucción sprintf y formato %03d  \n(que almacena un número rellenando con 0s los digitos no usados de mayor peso. Así el dígito de menor peso  \nesta siempre en la posicion 2 del array: cad[2])');
