// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Bits');
gettext('Puertas');
gettext('Varios');
gettext('0');
gettext('Un bit constante a 0');
gettext('1');
gettext('Un bit constante a 1');
gettext('and');
gettext('Puerta AND');
gettext('not');
gettext('Puerta NOT');
gettext('Bombeo');
gettext('Motor');
gettext('Mux');
gettext('Retardo');
gettext('Servos');
gettext('Corazon_10Hz');
gettext('Bombear 10 bits por segundo');
gettext('Corazon_1Hz');
gettext('Bombear 1 bit por segundo');
gettext('Corazon_1KHz');
gettext('Bombear 1000 bits por segundo');
gettext('Corazon_2Hz');
gettext('Bombear 2 bits por segundo');
gettext('Corazon_2KHz');
gettext('Bombear 2000 bits por segundo');
gettext('Corazon_3Hz');
gettext('Bombear 3 bits por segundo');
gettext('Corazon_4Hz');
gettext('Bombear 4 bits por segundo');
gettext('Corazon_5Hz');
gettext('Bombear 5 bits por segundo');
gettext('Corazon_7Hz');
gettext('Bombear 7 bits por segundo');
gettext('Corazon_DO4');
gettext('Bombear bits a la frecuencia del DO de la cuarta octava');
gettext('Corazon_MI4');
gettext('Bombear bits a la frecuencia del MI de la cuarta octava');
gettext('Corazon_RE4');
gettext('Bombear bits a la frecuencia del RE de la cuarta octava');
gettext('SM-S4303R');
gettext('MotorBit');
gettext('Controlador para servo de rotacion continua SprintRC SM-S4303R. Con on=1, el motor avanza. Dir=1 sentido agujas reloj/ 0 el contrario');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1');
gettext('Mux-2-1');
gettext('Mux-4-1-flip');
gettext('Multiplexor de 4 a 1. Implementado en verilog');
gettext('Mux-4-1');
gettext('Tortuga-2');
gettext('Divisor entre dos');
gettext('Biestable T síncrono, inicializado a 0');
gettext('Biestable T síncrono, inicializado por parametro INI');
gettext('Biestable tipo D con entrada de enable, inicializado al parámetro INI');
gettext('Biestable D con inicialización paramétrica');
gettext('Multiplexor 2:1 de 1-bit');
gettext('Puerta OR');
gettext('NAND logic gate');
gettext('Transistor');
gettext('Transistor cmos hecho a partir de semiconductores');
gettext('Cristal de Siicio');
gettext('Atomos de silicio');
gettext('Generar un pulso de reloj al recibir un flanco por la entrada');
gettext('Biestable D inicializado a 0');
gettext('Delay flip-flop');
gettext('Tortuga: Divisor entre 2\n\nImplementado a partir de un\nbiestable T síncrono');
gettext('Hacer que solo responda a los flancos\nde subida de la señal de entrada');
gettext('Mux 2:1 with logic gates');
gettext('Entrada 1');
gettext('Entrada 0');
gettext('Selección');
gettext('Implementación en Verilog');
gettext('Las puertas están construidas a\npartir de transistores');
gettext('Pincha en algún transistor para\nbajar de nivel');
gettext('Nivel 3: Semiconductores');
gettext('Los transistores se crean a \npartir de uniones entre \nsemiconductores, de tipo P y N\nEstán integrados en los dados de\nsilicio en los circuitos integrados');
gettext('Pincha en el bloque para bajar de nivel');
gettext('Nivel 2: MATERIALES');
gettext('Cristal de silicio');
gettext('Los semiconductores se crean a partir de cristales\nde Silicio (Si) que se dopans con impurezas\npara darle las propiedades de semiconductores');
gettext('Pincha en los bloques para bajar de nivel');
gettext('Átomos de Silicio');
gettext('Nivel 1: ATOMOS');
gettext('Los cristales de silicio se forman a \npartir del enlace covalente entre los\nátomos de silicio. Cada uno de ellos \nestá rodeado por 4 átomos de silicio\nformando un tetraedro');
gettext('Emax-ES08A');
gettext('Futaba-3003');
gettext('TowerPro-SG90');
gettext('ServoBit-90');
gettext('ServoBit para microservos EMAX ES08A. Controlador de 1 bit para mover el servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('Valor constante para bus de 8 bits');
gettext('Mux 2:1. Bus de 7 bits. ');
gettext('Mux 2:1. Bus de 4 bits. ');
gettext('Agregador de 4 cables a bus de 4bits');
gettext('Separador de bus de 4bits en 4 cables (1 + 1 + 1 + 1)');
gettext('Separador de bus de 8bits en 2 (4 + 4)');
gettext('Agregador de 2 buses de 4 a bus de 8bits');
gettext('Controlador PWM para posicionar servos de 20ms. Las unidades de pos son de 10usec');
gettext('Posición 0');
gettext('Posición 1');
gettext('<B>Posicion del servo</B>\n\nSe especifica en unidades de 10micro-segundos\nEj. pos = 100 --> Pulso de achura 1ms');
gettext('<B>Generación de una señal PWM para posicionamiento de Servos</B>\nEl periodo es de 20ms\nEl ancho del pulso varía entre 0 - 255 (0 - 2.5ms)');
gettext('Servobit-90');
gettext('ServoBit para Futaba 3003. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('Servobit-90');
gettext('ServoBit para micrservo TowerPro-SG90. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('<B>Servobit</B> para microservos TowerPro SG-90 o compatibles\nLas dos posiciones están distanciadas 90 grados\n\n* Posicion 0: 45 grados\n* Posicion 1: 135 grados');
gettext('0-Soluciones-Tutorial-14');
gettext('1-Ejemplos');
gettext('2-Ejercicios');
gettext('Sol-14-1');
gettext('**Limpiaparabrisas a dos velocidades**');
gettext('Velocidad rapida');
gettext('Velocidad lenta');
gettext('Sol-14-2');
gettext('# Sirena configurable');
gettext('**Sirena 1**');
gettext('**Sirena 2**');
gettext('Interruptor de \nselección');
gettext('Selección de la \nsirena a escuchar');
gettext('Pulsador de activación  \nde la sirena');
gettext('Sol-14-3');
gettext('# Franky en modo Automático y Manual');
gettext('**cuello manual**');
gettext('Cuello');
gettext('**Selección del modo**');
gettext('**Ojos manual**');
gettext('Ojos');
gettext('**Canal 1**: Manual  \n**Canal 0**: Automático');
gettext('Parpadeo ojos');
gettext('Sonido láser');
gettext('Tiempo para modo automático');
gettext('2 seg');
gettext('Encendido/apagado del  \nsonido láser');
gettext('Encendido/apagado de   \nlos ojos');
gettext('1-Motor-pulsadores');
gettext('2-Dos-motores');
gettext('3-Icebot-adelante');
gettext('**Rueda izquierda**');
gettext('**Rueda Derecha**');
gettext('Ejemplo para que el Icebot avance');
gettext('4-Icebot-adelante-stop');
gettext('Ejemplo para que el Icebot siga\nesta secuencia cíclica: 1 segundo avanzando y\n1 segundo parado');
gettext('5-Icebot-pulsador');
gettext('**Motor Izquierdo**');
gettext('**Motor Derecho**');
gettext('LED de Test');
gettext('Ejercicio-15-1');
gettext('**Ejercicio 15.1**: (3 Bitpoints). **Motor en 4 estados**\n\nHacer que un servo de **rotación continua** realice la siguiente **secuencia** de \nmovimientos, que se repiten **cícliclamente**:  \n\nParado - Giro en sentido horario - Parado - Giro en sentido Antihorario\n\nCada estado debe durar **2 segundos**. Así, estará 2 segundos parado, dos segundos \ngirando en sentido horario, 2 segundos parado, 2 en sentido antihorario... \n(y se vuelve a comenzar)\n\nUsar sólo los componentes que hemos aprendido hasta ahora, y que son los que \nestán en esta colección\n\n**Consejo**: Fijarse en los valores que deben tomar los dos bits de control del servo \nen los diferentes estados y usar corazones y tortugas para reproducir la secuencia\n');
gettext('**Entregar**:\n\n  -1 Pantallazo del circuito (1 Bitpoints)\n  \n  -1 Vídeo del funcionamiento (1 Bitpoints)\n  \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube. El vídeo puede estar en youtube o directamente en el tuit/post\n  ');
gettext('**GITHUB**:\n\n  1 Bitpoint adicional si lo entregáis por Github (sólo pantallazo, el vídeo\n  no hace falta, para que no ocupe tanto espacio)');
gettext('Ejercicio-15-2');
gettext('**Ejercicio 15.2**: (5 Bitpoints). **Dos Motores en 4 estados, alternativamente**\n\nModificar el ejercicio 15.1 para que la misma secencia se reproduzca en **dos\nservos**, alternativamente. Primero el **servo 1** debe realizar la secuencia:\nparado, giro horario, parado, giro antihorario y después el **servo 2**. \nEsta secuencia se repite **indefinidamente**\n\n**Consejo**:  Usar un  **multplexor 2:1** para cada entrada **on**\nde los controladores de los servos. ');
gettext('**Entregar**:\n\n  -1 Pantallazo del circuito (2 Bitpoints)\n  \n  -1 Vídeo del funcionamiento (2 Bitpoints)\n  \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube. El vídeo puede estar en youtube o directamente en el tuit/post\n  ');
gettext('Ejercicio-15-3');
gettext('**Ejercicio 15.3**: (10 Bitpoints). **Icebot: Adelante - Giro derecha**\n\nConstruir el **icebot 0.1**. Hacer que avance durante 2 segundos, y gira  \nhacia la derecha durante 2 segundos (con movimiento en arco). Esto se  \nrepite indefinidamente\n\n**Consejo**: En esta secuencia, el motor izquiero siempre está activado y girando en \nel mismo sentido');
gettext('**Entregar**:\n\n * 1 Pantallazo del circuito (3 Bitpoints)  \n * 1 Foto del icebot (3 Bitpoints)  \n * 1 Vídeo del funcionamiento (3 Bitpoints)  \n  \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube. El vídeo puede estar en youtube o directamente en el tuit/post\n  ');
gettext('**GITHUB**:\n\n  1 Bitpoint adicional si lo entregáis por Github (sólo fotos, el vídeo\n  no hace falta, para que no ocupe tanto espacio)');
