// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Bits');
gettext('Puertas');
gettext('Varios');
gettext('0');
gettext('Un bit constante a 0');
gettext('1');
gettext('Un bit constante a 1');
gettext('and');
gettext('Puerta AND');
gettext('not');
gettext('Puerta NOT');
gettext('Bombeo');
gettext('Mux');
gettext('Retardo');
gettext('Servos');
gettext('Corazon_10Hz');
gettext('Bombear 10 bits por segundo');
gettext('Corazon_1Hz');
gettext('Bombear 1 bit por segundo');
gettext('Corazon_1KHz');
gettext('Bombear 1000 bits por segundo');
gettext('Corazon_2Hz');
gettext('Bombear 2 bits por segundo');
gettext('Corazon_2KHz');
gettext('Bombear 2000 bits por segundo');
gettext('Corazon_3Hz');
gettext('Bombear 3 bits por segundo');
gettext('Corazon_4Hz');
gettext('Bombear 4 bits por segundo');
gettext('Corazon_5Hz');
gettext('Bombear 5 bits por segundo');
gettext('Corazon_7Hz');
gettext('Bombear 7 bits por segundo');
gettext('Corazon_DO4');
gettext('Bombear bits a la frecuencia del DO de la cuarta octava');
gettext('Corazon_MI4');
gettext('Bombear bits a la frecuencia del MI de la cuarta octava');
gettext('Corazon_RE4');
gettext('Bombear bits a la frecuencia del RE de la cuarta octava');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1');
gettext('Mux-2-1');
gettext('Mux-4-1-flip');
gettext('Multiplexor de 4 a 1. Implementado en verilog');
gettext('Mux-4-1');
gettext('Tortuga-2');
gettext('Divisor entre dos');
gettext('Biestable T síncrono, inicializado a 0');
gettext('Biestable T síncrono, inicializado por parametro INI');
gettext('Biestable tipo D con entrada de enable, inicializado al parámetro INI');
gettext('Biestable D con inicialización paramétrica');
gettext('Multiplexor 2:1 de 1-bit');
gettext('Puerta OR');
gettext('NAND logic gate');
gettext('Transistor');
gettext('Transistor cmos hecho a partir de semiconductores');
gettext('Cristal de Siicio');
gettext('Atomos de silicio');
gettext('Generar un pulso de reloj al recibir un flanco por la entrada');
gettext('Biestable D inicializado a 0');
gettext('Delay flip-flop');
gettext('Tortuga: Divisor entre 2\n\nImplementado a partir de un\nbiestable T síncrono');
gettext('Hacer que solo responda a los flancos\nde subida de la señal de entrada');
gettext('Mux 2:1 with logic gates');
gettext('Entrada 1');
gettext('Entrada 0');
gettext('Selección');
gettext('Implementación en Verilog');
gettext('Las puertas están construidas a\npartir de transistores');
gettext('Pincha en algún transistor para\nbajar de nivel');
gettext('Nivel 3: Semiconductores');
gettext('Los transistores se crean a \npartir de uniones entre \nsemiconductores, de tipo P y N\nEstán integrados en los dados de\nsilicio en los circuitos integrados');
gettext('Pincha en el bloque para bajar de nivel');
gettext('Nivel 2: MATERIALES');
gettext('Cristal de silicio');
gettext('Los semiconductores se crean a partir de cristales\nde Silicio (Si) que se dopans con impurezas\npara darle las propiedades de semiconductores');
gettext('Pincha en los bloques para bajar de nivel');
gettext('Átomos de Silicio');
gettext('Nivel 1: ATOMOS');
gettext('Los cristales de silicio se forman a \npartir del enlace covalente entre los\nátomos de silicio. Cada uno de ellos \nestá rodeado por 4 átomos de silicio\nformando un tetraedro');
gettext('Emax-ES08A');
gettext('Futaba-3003');
gettext('TowerPro-SG90');
gettext('ServoBit-90');
gettext('ServoBit para microservos EMAX ES08A. Controlador de 1 bit para mover el servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('Valor constante para bus de 8 bits');
gettext('Mux 2:1. Bus de 7 bits. ');
gettext('Mux 2:1. Bus de 4 bits. ');
gettext('Agregador de 4 cables a bus de 4bits');
gettext('Separador de bus de 4bits en 4 cables (1 + 1 + 1 + 1)');
gettext('Separador de bus de 8bits en 2 (4 + 4)');
gettext('Agregador de 2 buses de 4 a bus de 8bits');
gettext('Controlador PWM para posicionar servos de 20ms. Las unidades de pos son de 10usec');
gettext('Posición 0');
gettext('Posición 1');
gettext('<B>Posicion del servo</B>\n\nSe especifica en unidades de 10micro-segundos\nEj. pos = 100 --> Pulso de achura 1ms');
gettext('<B>Generación de una señal PWM para posicionamiento de Servos</B>\nEl periodo es de 20ms\nEl ancho del pulso varía entre 0 - 255 (0 - 2.5ms)');
gettext('Servobit-90');
gettext('ServoBit para Futaba 3003. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('Servobit-90');
gettext('ServoBit para micrservo TowerPro-SG90. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('<B>Servobit</B> para microservos TowerPro SG-90 o compatibles\nLas dos posiciones están distanciadas 90 grados\n\n* Posicion 0: 45 grados\n* Posicion 1: 135 grados');
gettext('0-Soluciones-Tutorial-13');
gettext('1-Ejemplos');
gettext('2-Ejercicios');
gettext('Sol-13-1');
gettext('**Movimiento del cuello de Franky**');
gettext('**Sonido de los rayos láser**');
gettext('**Ráfagas luminosas de los rayos láser**');
gettext('Pulsador activación rayos láser');
gettext('Sol-13-2');
gettext('**Generación de señal cuadrada de 8 segundos\nde periodo**');
gettext('**La barrera está 4 seg. arriba y 4 abajo**');
gettext('4 puertass AND de habilitacion de la salida\nCuando barrerá está bajada (0) se activan las\nsalidas hacia los zumbadores y LEDs externos');
gettext('**Sirena Luminosa**');
gettext('**Sirena Acústica**');
gettext('Tanto la sirena luminosa como la acústica\ncambian a la frec. de 2Hz');
gettext('Sol-13-3');
gettext('1-LED-Parpadeo-dos-freq');
gettext('# Parpadeo a dos frecuencias');
gettext('2-Sirena');
gettext('# Sirena');
gettext('Conmutación cada medio segundo');
gettext('**Sirena luminosa**');
gettext('3-LED-4-modos');
gettext('# LED en 4 modos');
gettext('**Apagado**');
gettext('\n**Encendido**');
gettext('**Parpadeo lento**');
gettext('**Parpadeo rápido**');
gettext('4-Notas-zumbador');
gettext('# Reproductor de 3 notas');
gettext('Mostrar en los LEDs el canal\nseleccionado en cada momento');
gettext('Se tocan consecutivamente las notas:\n\nSilencio - DO - RE - MI');
gettext('Ejercicio-14-1');
gettext('**Ejercicio 14.1**: (3 Bitpoints). **Limpiaparabrisas a dos velocidades**\n\nUsar un servo para simular un limpiaparabrisas de un coche, que se mueva a dos \nvelocidades: **lenta** y **rápida**, determinadas por un **interruptor externo**. \nEn el modo lento el servo permanecerá **2 segundos** en cada posición, y en el \nmodo rápido **medio segundo** (Freq. de 1Hz)\n');
gettext('**Entregar**:\n\n  -1 Pantallazo del circuito (1 Bitpoints)\n  \n  -1 Vídeo del funcionamiento (1 Bitpoints)\n  \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube. El vídeo puede estar en youtube o directamente en el tuit/post\n  ');
gettext('**GITHUB**:\n\n  1 Bitpoint adicional si lo entregáis por Github (sólo pantallazo, el vídeo\n  no hace falta, para que no ocupe tanto espacio)');
gettext('Ejercicio-14-2');
gettext('**Ejercicio 14.2**: (3 Bitpoints). **Sirena configurable**\n\nSirena que funciona en **dos modos**, según la posición de un **interruptor externo**, \nusando un **único zumbador**. Además, tiene un **pulsador externo**, que al apretarlo \ndebe sonar la sirena, y al soltarlo se apaga. En el **modo 1** se emiten alternativamente\ntonos de **1Khz** y **2Khz**, cada uno durante medio segundo.  En el **modo 2** se emiten\nalternativamente las notas **DO** y **Mi**, con duraciones de **250ms**  cada una\n');
gettext('Ejercicio-14-3');
gettext('**Ejercicio 14.3**: (5 Bitpoints). **Franky en modo automático y manual**\n\nEste es un ejercicio de **COMPLEJIDAD MEDIA**. Hay que entender bien los detalles del enunciado para \nimplementarlo\n\nFranky tiene los **siguientes elementos** que podemos controlar:\n* Un **servo** que le permite mirar hacia un lado u otro\n* **Dos leds externos** para emitir los \"rayos lásers\" (sus ojos)\n* Un **zumbador** para el sonido de los rayos lásers\n\nPara la **emisión de los rayos láser**, ambos LEDs parpadean a una frecuencia de **10Hz**. \nEl **sonido de los lásers** es un **tono de 1Khz** activado a una frecuencia de **10Hz**\n\n**Franky** debe funcionar en **dos modos**, según la posición del **interruptor externo 1**.  \nEn el **modo automático**, franky gira su cabeza de lado a lado, estando **2 segundos** en cada\nlado. En uno de los dos lados (el que se quiera), emitirá una ráfaga de rayos láser\npor sus ojos, y emitirá el sonido correspondiente (descrito arriba)\n\nEn el **modo manual**, la posición del cuello está controlada por el **interruptor externo 2**, y \ncada vez que se apriete un **pulsador externo**, se emitirán las ráfagas de los lásers y \nsu correspondiente sonido\n\nCuando Franky está en modo automático, **NO HARÁ** caso de los controles manuales: Pulsador e interruptor 2\n\nEl funcionamiento se puede ver en este vídeo en Youtube: [https://www.youtube.com/watch?v=SWdSmQsTVTk](https://www.youtube.com/watch?v=SWdSmQsTVTk)');
gettext('**Entregar**:\n\n  -1 Pantallazo del circuito (2 Bitpoints)\n  \n  -1 Vídeo del funcionamiento (2 Bitpoints)\n  \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube. El vídeo puede estar en youtube o directamente en el tuit/post\n  ');
