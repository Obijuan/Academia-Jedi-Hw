// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Comb');
gettext('Const');
gettext('Varios');
gettext('Mux');
gettext('Puertas');
gettext('Tablas');
gettext('1-Bit');
gettext('2-Bits');
gettext('4-Bits');
gettext('8-Bit');
gettext('Mux-2-1-flip');
gettext('Multiplexor de 2 a 1');
gettext('Mux-2-1');
gettext('Mux-4-1-flip');
gettext('Multiplexor de 4 a 1. Implementado en verilog');
gettext('Mux-4-1');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 2 bits');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 2 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 4 bits');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 4 bits');
gettext('Mux-2-1');
gettext('Multiplexor de 2 a 1 de 8 bits');
gettext('Mux-4-1');
gettext('Multiplexor de 4 a 1 de 8 bits');
gettext('and');
gettext('Puerta AND');
gettext('and3');
gettext('Puerta AND de 3 entradas');
gettext('nand');
gettext('Puerta NAND');
gettext('nor');
gettext('Puerta NOR');
gettext('not');
gettext('Puerta NOT');
gettext('or');
gettext('Puerta OR');
gettext('xnor');
gettext('Puerta XNOR');
gettext('xor');
gettext('Puerta XOR');
gettext('Tablas-1-input');
gettext('Tablas-2-inputs');
gettext('Tablas-3-inputs');
gettext('tabla-4-1');
gettext('Circuito combinacional de 4 entradas y 1 salida');
gettext('tabla-1-1');
gettext('Circuito combinacional de 1 entrada y 1 salida');
gettext('tabla-1-2');
gettext('Circuito combinacional de 1 entradas y 2 salidas');
gettext('tabla-1-4');
gettext('Circuito combinacional de 1 entradas y 4 salidas');
gettext('tabla-1-8');
gettext('Circuito combinacional de 1 entradas y 8 salidas');
gettext('tabla-2-1');
gettext('Circuito combinacional de 2 entradas y 1 salida');
gettext('tabla-2-2');
gettext('Circuito combinacional de 2 entradas y 2 salidas');
gettext('tabla-2-4');
gettext('Circuito combinacional de 2 entradas y 4 salidas');
gettext('tabla-2-8');
gettext('Circuito combinacional de 2 entradas y 8 salidas');
gettext('tabla-3-1');
gettext('Circuito combinacional de 3 entradas y 1 salida');
gettext('tabla-3-8');
gettext('Circuito combinacional de 3 entradas y 8 salidas');
gettext('Bits');
gettext('Bus');
gettext('0');
gettext('Un bit constante a 0');
gettext('1');
gettext('Un bit constante a 1');
gettext('02_bits');
gettext('04_bits');
gettext('08_bits');
gettext('Generico');
gettext('Valor genérico constante, de 2 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_0');
gettext('Valor constante 0 para bus de 2 bits');
gettext('Valor_1');
gettext('Valor constante 1 para bus de 2 bits');
gettext('Valor_2');
gettext('Valor constante 2 para bus de 2 bits');
gettext('Valor_3');
gettext('Valor constante 3 para bus de 2 bits');
gettext('Generico');
gettext('Valor genérico constante, de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_00');
gettext('Valor constante 0 para bus de 4 bits');
gettext('Valor_05');
gettext('Valor constante 5 para bus de 4 bits');
gettext('Valor_10');
gettext('Valor constante 10 para bus de 4 bits');
gettext('Valor_15');
gettext('Valor constante 15 para bus de 4 bits');
gettext('Generico');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Valor_000');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Valor_085');
gettext('Valor constante 85 (55h) para bus de 8 bits');
gettext('Valor_170');
gettext('Valor constante 170 (AAh) para bus de 8 bits');
gettext('Valor_255');
gettext('Valor constante 255 para bus de 8 bits');
gettext('Bombeo');
gettext('Bus');
gettext('Motor');
gettext('Pegatinas');
gettext('Recreo');
gettext('Retardo');
gettext('Servos');
gettext('icebot');
gettext('Fijos');
gettext('Corazon_Hz');
gettext('Corazon genérico para bombear bits a la frecuencia fijada en Hz (por defecto 1Hz)');
gettext('Corazon_Seg');
gettext('Bombear 1 bit con el periodo especificado en el parámetro. Por defecto el periodo es de 1 segundos');
gettext('Corazon_10Hz');
gettext('Bombear 10 bits por segundo');
gettext('Creado a partir de un **corazón  \ngenérico**, dando el valor adecuado  \na su parámetro frecuencia');
gettext('Corazon_1Hz');
gettext('Bombear 1 bit por segundo');
gettext('Corazon_1KHz');
gettext('Bombear 1000 bits por segundo');
gettext('Corazon_2Hz');
gettext('Bombear 2 bits por segundo');
gettext('Corazon_2KHz');
gettext('Bombear 2000 bits por segundo');
gettext('Corazon_3Hz');
gettext('Bombear 3 bits por segundo');
gettext('Corazon_4Hz');
gettext('Bombear 4 bits por segundo');
gettext('Corazon_5Hz');
gettext('Bombear 5 bits por segundo');
gettext('Corazon_7Hz');
gettext('Bombear 7 bits por segundo');
gettext('Corazon_DO4');
gettext('Bombear bits a la frecuencia del DO de la cuarta octava');
gettext('Corazon_MI4');
gettext('Bombear bits a la frecuencia del MI de la cuarta octava');
gettext('Corazon_RE4');
gettext('Bombear bits a la frecuencia del RE de la cuarta octava');
gettext('02_bits');
gettext('04_bits');
gettext('08_bits');
gettext('Agregador');
gettext('Agregador de 2 cables en un bus de 2-bits');
gettext('Separador');
gettext('Separador de bus de 2-bits en dos cables');
gettext('Agregador');
gettext('Agregador de buses de 2-bits a bus de 4-bits');
gettext('Separador');
gettext('Separador de bus de 4-bits en buses de 2 bits');
gettext('Separador4');
gettext('Separador de bus de 4-bits en 4 cables');
gettext('Agregador');
gettext('Agregador de 2 buses de 4-bits a bus de 8-bits');
gettext('Separador');
gettext('Separador de bus de 8-bits en buses de 4 bits');
gettext('SM-S4303R');
gettext('MotorBit');
gettext('Controlador para servo de rotacion continua SprintRC SM-S4303R. Con on=1, el motor avanza. Dir=1 sentido agujas reloj/ 0 el contrario. V1 y V2 son los pulsos para las velocidades horaria y antihoraria (en micro-sec). V0 para que esté parado');
gettext('Mux 2:1. Bus de 7 bits. ');
gettext('Mux 2:1. Bus de 4 bits. ');
gettext('Agregador de 4 cables a bus de 4bits');
gettext('Separador de bus de 4bits en 4 cables (1 + 1 + 1 + 1)');
gettext('Multiplexor 2:1 de 1-bit');
gettext('NAND logic gate');
gettext('Transistor');
gettext('Transistor cmos hecho a partir de semiconductores');
gettext('Cristal de Siicio');
gettext('Atomos de silicio');
gettext('Separador de bus de 8bits en 2 (4 + 4)');
gettext('Agregador de 2 buses de 4 a bus de 8bits');
gettext('Controlador PWM para posicionar servos de 20ms. Las unidades de pos son de 10usec');
gettext('**Velocidad 1**: Velocidad para el  \nsentido de giro horario\n');
gettext('**Velocidad 2**: Velocidad para el \nsentido de giro antirhorario');
gettext('**Entrada on/off**: Motor en  \nmovimiento o parado');
gettext('**Motorbit paramétrico** para los **SM-S4303R** o compatibles\n\nTiene 3 parámetros, especificados en micro-segundos. **V1** y **V2** son las posiciones (ancho del pulso)  \npara las velocidades de giro en sentido horario y antihorario respectivamente\n\n**V0** es la posición en la que el servo está parado (velocidad 0)\n\nPor defecto se asignan los valores para las velocidades máximas, tanto en sentido horario como antihorario\n\n* V1max = 1900\n* V2max = 1100\n* V0 = 1500');
gettext('**Velocidad en sentido horario**\n\n* Si V1 >= 1900, la velocidad es máxima\n* Si 1900 > V1 > 1500, la velocidad estará  \nentre la máxima y 0');
gettext('**Velocidad en sentido antihorario**\n\n* Si V2 <= 1100, la velocidad es máxima\n* Si 1100 < V2 < 1500, la velocidad estará  \nentre la máxima y 0');
gettext('**dir**: Sentido de giro  \n1: horario / 0: antihorario');
gettext('**Velocidad 0**: Posición para que  \nel servo esté parado');
gettext('Mux 2:1 with logic gates');
gettext('Entrada 1');
gettext('Entrada 0');
gettext('Selección');
gettext('Implementación en Verilog');
gettext('Las puertas están construidas a\npartir de transistores');
gettext('Pincha en algún transistor para\nbajar de nivel');
gettext('Nivel 3: Semiconductores');
gettext('Los transistores se crean a \npartir de uniones entre \nsemiconductores, de tipo P y N\nEstán integrados en los dados de\nsilicio en los circuitos integrados');
gettext('Pincha en el bloque para bajar de nivel');
gettext('Nivel 2: MATERIALES');
gettext('Cristal de silicio');
gettext('Los semiconductores se crean a partir de cristales\nde Silicio (Si) que se dopans con impurezas\npara darle las propiedades de semiconductores');
gettext('Pincha en los bloques para bajar de nivel');
gettext('Átomos de Silicio');
gettext('Nivel 1: ATOMOS');
gettext('Los cristales de silicio se forman a \npartir del enlace covalente entre los\nátomos de silicio. Cada uno de ellos \nestá rodeado por 4 átomos de silicio\nformando un tetraedro');
gettext('<B>Posicion del servo</B>\n\nSe especifica en unidades de 10micro-segundos\nEj. pos = 100 --> Pulso de achura 1ms');
gettext('<B>Generación de una señal PWM para posicionamiento de Servos</B>\nEl periodo es de 20ms\nEl ancho del pulso varía entre 0 - 255 (0 - 2.5ms)');
gettext('Academia-Jedi');
gettext('Emojis');
gettext('Rusia-2018');
gettext('00-Pre');
gettext('01-Primero');
gettext('02-Segundo');
gettext('00-Observador');
gettext('Rango de Observador. Pre-academia Jedi');
gettext('01-Aspirante-a-Cadete');
gettext('Rango de Aspirante a Cadete. Pre-academia Jedi');
gettext('02-Cadete');
gettext('Rango de Cadete. Primer curso');
gettext('03-Cadete-N1');
gettext('Rango de Cadete Nivel 1. Primer curso');
gettext('04-Cadete-N2');
gettext('Rango de Cadete Nivel 2. Primer curso');
gettext('05-Cadete-N3');
gettext('Rango de Cadete Nivel 3. Primer curso');
gettext('06-Aspirante-Padawan');
gettext('Rango de Aspirante a Padawan. Primer curso');
gettext('07-Aspirante-Padawan-N1');
gettext('Rango de Aspirante a Padawan Nivel 1. Primer curso');
gettext('08-Aspirante-Padawan-N2');
gettext('Rango de Aspirante a Padawan Nivel 2. Primer curso');
gettext('09-Aspirante-Padawan-N3');
gettext('Rango de Aspirante a Padawan Nivel 3. Primer curso');
gettext('10-Padawan');
gettext('Rango de Padawan. Segundo curso');
gettext('11-Padawan-N1');
gettext('Rango de Padawan Nivel 1. Segundo curso');
gettext('12-Padawan-N2');
gettext('Rango de Padawan Nivel 2. Segundo curso');
gettext('13-Padawan-N3');
gettext('Rango de Padawan Nivel 3. Segundo curso');
gettext('14-Aspirante-Jedi');
gettext('Rango de Aspirante a Jedi. Segundo curso');
gettext('15-Aspirante-Jedi-N1');
gettext('Rango de Aspirante a Jedi Nivel 1. Segundo curso');
gettext('16-Aspirante-Jedi-N2');
gettext('Rango de Aspirante a Jedi Nivel 2. Segundo curso');
gettext('Smiley');
gettext('Stickers de Smiley');
gettext('caca');
gettext('Caca sonriente');
gettext('like');
gettext('Like');
gettext('Rusia-2018-Balon');
gettext('Balón del Mundial de Rusia 2018');
gettext('Rusia-2018-equipos');
gettext('Equipos participanetes en el Mundial de Rusia 2018');
gettext('Rusia-2018-logo-1');
gettext('Mundial de Rusia 2018');
gettext('Rusia-2018-logo-2');
gettext('Rusia-2018-spain-1');
gettext('La roja en el Mundial de Rusia 2018');
gettext('Rusia-2018-spain-2');
gettext('Escudo de la selección Española');
gettext('Rusia-2018-spain-3');
gettext('Camiseta de la selección Española');
gettext('comecocos');
gettext('Bloque de prueba para explicar conceptos. No hace nada');
gettext('Bloque de documentación, para explicar los  \nconceptos de puertos, parámeros, pines, cables  \ny buses en el tutorial 21');
gettext('Tortuga-2');
gettext('Divisor entre dos');
gettext('Biestable T síncrono, inicializado a 0');
gettext('Biestable T síncrono, inicializado por parametro INI');
gettext('Biestable tipo D con entrada de enable, inicializado al parámetro INI');
gettext('Biestable D con inicialización paramétrica');
gettext('Generar un pulso de reloj al recibir un flanco por la entrada');
gettext('Biestable D inicializado a 0');
gettext('Delay flip-flop');
gettext('Tortuga: Divisor entre 2\n\nImplementado a partir de un\nbiestable T síncrono');
gettext('Hacer que solo responda a los flancos\nde subida de la señal de entrada');
gettext('Emax-ES08A');
gettext('Futaba-3003');
gettext('TowerPro-SG90');
gettext('ServoBit-90');
gettext('ServoBit para microservos EMAX ES08A. Controlador de 1 bit para mover el servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('ServoBit para microservos EMAX ES08A. Controlador de 1 bit para mover el servo a las 2 posiciones POS0 y POS1');
gettext('**Posición 1**: Posición del servo cuando  \nse introduce un 1\n\nEl valor por defecto es de 135 grados\n');
gettext('**Posición 0**: Posición del servo cuando  \nse introduce un 0\n\nEl valor por defecto es de 45 grados');
gettext('**Entrada**: posición a donde llevar  \nel servo (posición 0 ó 1)');
gettext('**Servobit paramétrico** para los microservos **EMAX-ES08A** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **580 usec**  \n* Extremo izquierdo **2550 usec**\n');
gettext('ServoBit');
gettext('Servobit-90');
gettext('ServoBit para Futaba 3003. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('ServoBit paramétrico para Futaba 3003. Controlador de 1 bit para mover el servo a las 2 posiciones P0 y P1');
gettext('**Servobit** para Servos Futaba 3003 o comaptibles\nLas dos posiciones están distanciadas **90 grados**  \n\n* **Posicion 0**: 45 grados  \n* **Posicion 1**: 135 grados  ');
gettext('**Servobit paramétrico** para los microservos **Futaba 3003** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **380 usec**  \n* Extremo izquierdo **2410 usec**\n');
gettext('Servobit');
gettext('Servobit-90');
gettext('ServoBit para micrservo TowerPro-SG90. Controlador de 1 bit para mover un servo a 2 posiciones. El ángulo entre una posición y otra es de 90 grados');
gettext('**Servobit paramétrico** para los microservos **TowerPro SG-90** o compatibles\n\nLos parámetros **P1** y **P0** son las posiciones asociadas a un valor de la entrada de 1 ó 0  \nEstán expresados en **micro-segundos** (usec). Este tiempo es el ancho del pulso\n\nSus **valores** deben estar comprendidos en este rango: \n\n* Extremo derecho: **500 usec**  \n* Extremo izquierdo **2350 usec**\n');
gettext('Servobit');
gettext('Icemove4');
gettext('Icemove4: Controlador de 4 movimientos para el Icebot');
gettext('# ICEmove4\n\nControlador para el [robot Icebot](https://github.com/Obijuan/icebot/wiki), que genera **4 movimientos**:  \nParado, giro derecha (arco), giro izquierda (arco) y adelante');
gettext('**Código del movimiento**');
gettext('**Motor de la rueda derecha**');
gettext('**Motor de la rueda izquierda**');
gettext('## Tabla de movimientos\n\n| Código de entrada | Movimiento del Robot   |\n|-------------------|------------------------|\n|  0                |  Parado                |\n|  1                |  Giro derecha (arco)   |\n|  2                |  Giro izquierda (arco) |\n|  3                |  Adelante              |');
gettext('**Entrada de reloj**');
gettext('Icemove9');
gettext('Icemove9: Controlador de 9 movimientos para el Icebot');
gettext('# ICEmove9\n\nControlador de 9 movimientos para el robot Icebot  \n(Entrada de 4 bits)');
gettext('## Tabla de movimientos\n\n| Código de entrada | Movimiento del Robot   |\n|-------------------|------------------------|\n|  0, 1, 2, 3       |  Parado                |\n|  4,6              |  Arco derecha          |\n|  5,7              |  Arco izquierda-atrás  |\n|  8,9              |  Arco derecha-atrás    |\n|  10,11            |  Arco izquierda        |\n|  12               |  Giro derecha          |\n|  13               |  Atrás                 |\n|  14               |  Adelante              |\n|  15               |  Giro izquierda        |');
gettext('0-Soluciones-Tutorial-22');
gettext('1-Ejemplos');
gettext('2-Ejercicios');
gettext('Sol-22-1');
gettext('**Solución ejercicio 22.1:** (5 Bitpoints) Secuencia de 4 estados en los LEDs\n\nHacer un circuito que muestre por los LEDs una **secuencia de 4 estados** en la  \nque primero se encienden los LEDS 0,1 y 2. Despúes los 3 y 4, luego los  \n5,6,7 y por último nuevamente los LEDs 3 y 4. El proceso se repite a una  \nfrecuencia de 2Hz\n\nLa secuencia resultante tiene que ser como la mostrada en  \n[Este vídeo de Youtube](https://www.youtube.com/watch?v=klusAMMd7Ac)');
gettext('[![Click to see the youtube video](http://img.youtube.com/vi/klusAMMd7Ac/0.jpg)](https://www.youtube.com/watch?v=klusAMMd7Ac)');
gettext('Sol-22-2');
gettext('**Solución ejercicio 22.2:** (5 Bitpoints) Icebot San Fermín\n\nHacer un circuito que implemente el comportamiento reactivo de **embestir** en el Icebot  \nSe conectan dos sensores de **Infrarrojos** para detectar el objeto delante del icebot  \nEl comportamiento de embestir se define mediante la siguiente **tabla de verdad**:\n\n| IR izquierdo | IR derecho  | Movimiento del icebot  |\n|--------------|-------------|------------------------|\n| No detecta  |  No detecta  |  Parado                |\n| No detecta  |  Detecta     |  Giro izquierda (Arco) |\n| Detecta     |  No detecta  |  Giro derecha (arco)   |\n| Detecta     |  Detecta     |  Adelante              |\n\nLos valores a introducir en la tabla dependen de los sensores IR utilizados. Algunos  \ndevuelven 1 al detectar un objeto delante y 0 cuando NO. Otros se comportan al  \nrevés (lógica negativa)\n\nUtilizar el controlador **Icemove4**. Y un **circuito combinacional de 2 entradas y 2 salidas**  ');
gettext('Los valores de la tabla dependen del  \ntipo de sensores IR que se estén  \nusando. Pueden ser de lógica positiva o  \nnegativa');
gettext('El **comportamiento** del icebot se muestra en  \n[Este vídeo de Youtube](https://www.youtube.com/watch?v=Wr5cy3I2vWA)');
gettext('[![Click to see the youtube video](http://img.youtube.com/vi/Wr5cy3I2vWA/0.jpg)](https://www.youtube.com/watch?v=Wr5cy3I2vWA)');
gettext('Sol-22-3');
gettext('Circuito combinacional de 3 entradas y 4 salidas');
gettext('**Solución ejercicio 22.3:** (5 Bitpoints) Control manual del Icebot\n\nDiseñar un circuito de control de Icebot, que tenga **3 entradas**: una  \nserá un **interruptor**, y las otras **dos pulsadores**. El interruptor  \nselecciona el **modo** de movimiento del icebot: Directo e inverso.  \n\nEn el **modo directo** controlamos el icebot con los dos pulsadores. Con uno  \n**gira a la derecha**, con otro a la **izquierda**, y si se aprietan ambos se  \nmueve hacia **adelante**\n\nEn el **modo inverso** los pulsadores se usan con otro propósito. Con uno  \nel robot hará un **arco atrás-izquierda**, con el otro un **arco atrás-derecha**  \ny cuando se pulsan los dos irá hacia **atrás**\n\nHay que usar un circuito combinacional con **3 entradas y 4 salidas**, y el  \ncontrolador **icemove9**. La **tabl**a no está en la colección por lo que habrá que  \ngenerarla en la **IceFactory**');
gettext('El **comportamiento** del icebot se muestra en  \n[Este vídeo de Youtube](https://www.youtube.com/watch?v=mT3gG4sRomU)');
gettext('[![Click to see the youtube video](http://img.youtube.com/vi/mT3gG4sRomU/0.jpg)](https://www.youtube.com/watch?v=mT3gG4sRomU)');
gettext('**Mando de control**\n\nInterruptor, Botón izdo, Botón derecho');
gettext('**icemove9**');
gettext('NO-HAY');
gettext('Ejercicio-23-1');
gettext('**Entregar**:\n\n  -1 Pantallazo donde se muestre Icestudio con el menú **Mis_bloques** desplegado y  \n     con los 3 bloques colocados (Ver ejemplo adjunto)\n \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube\n  ');
gettext('**GITHUB**:\n\n  Entrega obligatoria por Github');
gettext('**Ejercicio 23.1:** (5 Bitpoints). Colección con mis bloques\n\nCrear una colección desde 0 (usando la plantilla [Coleccion-zero.zip](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/raw/master/wiki/Tutorial-23/Collections/Coleccion-zero.zip)),  \nque se llame como tu apodo (en mi caso sería la colección Obijuan).  \nEsta colección la iremos ampliando y modificando  \nen los siguientes ejercicios. En este primero tendrás que crear un menú que  \nse llame **Mis_bloques** y en él situar los **3 bloques** que creaste como  \nejercicios del **tutorial 21**');
gettext('![](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/raw/master/wiki/Tutorial-23/Soluciones/sol-23.1.png)');
gettext('Ejemplo de pantallazo a entregar: [Link](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/raw/master/wiki/Tutorial-23/Soluciones/sol-23.1.png)\n');
gettext('Ejercicio-23-2');
gettext('**Entregar**:\n\n  -1 Pantallazo donde se muestre Icestudio con el menú **Tablas/tablas-3** desplegado y  \n     con los 3 tablas colocados (Ver ejemplo adjunto)\n \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube\n  ');
gettext('**Ejercicio 23.2:** (5 Bitpoints). Añadiendo tablas a mi colección\n\nContinuar con la colección creada en el ejercicio 23.1. Añadir un **nuevo menu**  \nllamado **Tablas** que contenga **tres tablas de 3 entradas** y salidas de  \n5, 6 y 7 bits. Deben estar en un **sub-menú** llamado **tablas-3**    \n\nCrearlas usando la [Fábrica de tablas](https://obijuan.github.io/iceFactory/icetable/icetable.html)');
gettext('![](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/raw/master/wiki/Tutorial-23/Soluciones/sol-23.2.png)');
gettext('Ejemplo de pantallazo a entregar: [Link](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/raw/master/wiki/Tutorial-23/Soluciones/sol-23.2.png)\n');
gettext('Ejercicio-23-3');
gettext('**Entregar**:\n\n  -1 Pantallazo donde se muestre Icestudio con el menú de **Ejemplos** desplegado y  \n     con el circuito de pruebas de Franky cargado\n     \n  -El fichero .ZIP con la colección\n \n  Enviarlos por redes sociales (Twitter, G+) con mención \n  a @Obijuan_cube\n  ');
gettext('**Ejercicio 23.3:** (5 Bitpoints). Añadiendo Ejemplos a mi colección\n\nAñadir los dos **circuitos de pruebas** de los bloques AND y de Franky que se  \nhicieron en el **tutorial 21**. Se deben llamar **Test-and** y **Test-Franky**  \nTiene que ser accesible desde el menú de **Ejemplos** de la colección');
gettext('![](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/raw/master/wiki/Tutorial-23/Soluciones/sol-23.3.png)');
gettext('Ejemplo de pantallazo a entregar: [Link](https://github.com/Obijuan/digital-electronics-with-open-FPGAs-tutorial/raw/master/wiki/Tutorial-23/Soluciones/sol-23.3.png)\n');
